
test_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009874  08009874  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009874  08009874  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009874  08009874  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800987c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b10  20000180  080099fc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c90  080099fc  00022c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2c0  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004023  00000000  00000000  0003d469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000425f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000592c  00000000  00000000  000435a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150f6  00000000  00000000  00048ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5b1  00000000  00000000  0005dfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec57b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  000ec5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080097ac 	.word	0x080097ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080097ac 	.word	0x080097ac

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f942 	bl	80003dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f870 	bl	8000240 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f006 f9fe 	bl	8006560 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f006 fa5f 	bl	800662c <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f006 fa26 	bl	80065c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	08009840 	.word	0x08009840
 8000180:	0800029d 	.word	0x0800029d
 8000184:	20001cc8 	.word	0x20001cc8

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	; 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f009 fb00 	bl	800979c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 ff54 	bl	800208c <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ea:	f000 f862 	bl	80002b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f9be 	bl	800258c <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000216:	f000 f84c 	bl	80002b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800021a:	2310      	movs	r3, #16
 800021c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800021e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000222:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fb18 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000232:	f000 f83e 	bl	80002b2 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3750      	adds	r7, #80	; 0x50
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_GPIO_Init+0x58>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a13      	ldr	r2, [pc, #76]	; (8000298 <MX_GPIO_Init+0x58>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_GPIO_Init+0x58>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0310 	and.w	r3, r3, #16
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_GPIO_Init+0x58>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <MX_GPIO_Init+0x58>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	6193      	str	r3, [r2, #24]
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_GPIO_Init+0x58>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a07      	ldr	r2, [pc, #28]	; (8000298 <MX_GPIO_Init+0x58>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002a4:	f008 fdd2 	bl	8008e4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_Delay(500);
 80002a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ac:	f000 f8f8 	bl	80004a0 <HAL_Delay>
 80002b0:	e7fa      	b.n	80002a8 <StartDefaultTask+0xc>

080002b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b6:	b672      	cpsid	i
}
 80002b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ba:	e7fe      	b.n	80002ba <Error_Handler+0x8>

080002bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <HAL_MspInit+0x68>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <HAL_MspInit+0x68>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <HAL_MspInit+0x68>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_MspInit+0x68>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <HAL_MspInit+0x68>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e4:	61d3      	str	r3, [r2, #28]
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <HAL_MspInit+0x68>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	210f      	movs	r1, #15
 80002f6:	f06f 0001 	mvn.w	r0, #1
 80002fa:	f000 f9cc 	bl	8000696 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_MspInit+0x6c>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_MspInit+0x6c>)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40010000 	.word	0x40010000

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <NMI_Handler+0x4>

08000332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>

0800033e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <UsageFault_Handler+0x4>

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035a:	f000 f885 	bl	8000468 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800035e:	f007 fdb9 	bl	8007ed4 <xTaskGetSchedulerState>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	d001      	beq.n	800036c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000368:	f008 fb16 	bl	8008998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000376:	f000 faf5 	bl	8000964 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200029a4 	.word	0x200029a4

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b6:	f7ff ffe5 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ba:	f009 f9bd 	bl	8009738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff fec7 	bl	8000150 <main>
  bx lr
 80003c2:	4770      	bx	lr
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80003cc:	0800987c 	.word	0x0800987c
  ldr r2, =_sbss
 80003d0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80003d4:	20002c90 	.word	0x20002c90

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <HAL_Init+0x28>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_Init+0x28>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 f947 	bl	8000680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f2:	200f      	movs	r0, #15
 80003f4:	f000 f808 	bl	8000408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003f8:	f7ff ff60 	bl	80002bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_InitTick+0x54>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_InitTick+0x58>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000422:	fbb2 f3f3 	udiv	r3, r2, r3
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f95f 	bl	80006ea <HAL_SYSTICK_Config>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000432:	2301      	movs	r3, #1
 8000434:	e00e      	b.n	8000454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d80a      	bhi.n	8000452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800043c:	2200      	movs	r2, #0
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000444:	f000 f927 	bl	8000696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000448:	4a06      	ldr	r2, [pc, #24]	; (8000464 <HAL_InitTick+0x5c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000000 	.word	0x20000000
 8000460:	20000008 	.word	0x20000008
 8000464:	20000004 	.word	0x20000004

08000468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x1c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x20>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a03      	ldr	r2, [pc, #12]	; (8000488 <HAL_IncTick+0x20>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000008 	.word	0x20000008
 8000488:	20001ccc 	.word	0x20001ccc

0800048c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return uwTick;
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <HAL_GetTick+0x10>)
 8000492:	681b      	ldr	r3, [r3, #0]
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20001ccc 	.word	0x20001ccc

080004a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a8:	f7ff fff0 	bl	800048c <HAL_GetTick>
 80004ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004b8:	d005      	beq.n	80004c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_Delay+0x44>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	461a      	mov	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4413      	add	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c6:	bf00      	nop
 80004c8:	f7ff ffe0 	bl	800048c <HAL_GetTick>
 80004cc:	4602      	mov	r2, r0
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d8f7      	bhi.n	80004c8 <HAL_Delay+0x28>
  {
  }
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000008 	.word	0x20000008

080004e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60d3      	str	r3, [r2, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_GetPriorityGrouping+0x18>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	f003 0307 	and.w	r3, r3, #7
}
 800053e:	4618      	mov	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	db0b      	blt.n	8000576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 021f 	and.w	r2, r3, #31
 8000564:	4906      	ldr	r1, [pc, #24]	; (8000580 <__NVIC_EnableIRQ+0x34>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	095b      	lsrs	r3, r3, #5
 800056c:	2001      	movs	r0, #1
 800056e:	fa00 f202 	lsl.w	r2, r0, r2
 8000572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	e000e100 	.word	0xe000e100

08000584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	db0a      	blt.n	80005ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	490c      	ldr	r1, [pc, #48]	; (80005d0 <__NVIC_SetPriority+0x4c>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	440b      	add	r3, r1
 80005a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ac:	e00a      	b.n	80005c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <__NVIC_SetPriority+0x50>)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	3b04      	subs	r3, #4
 80005bc:	0112      	lsls	r2, r2, #4
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	440b      	add	r3, r1
 80005c2:	761a      	strb	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	f1c3 0307 	rsb	r3, r3, #7
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	bf28      	it	cs
 80005f6:	2304      	movcs	r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3304      	adds	r3, #4
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d902      	bls.n	8000608 <NVIC_EncodePriority+0x30>
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3b03      	subs	r3, #3
 8000606:	e000      	b.n	800060a <NVIC_EncodePriority+0x32>
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43da      	mvns	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	401a      	ands	r2, r3
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43d9      	mvns	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	4313      	orrs	r3, r2
         );
}
 8000632:	4618      	mov	r0, r3
 8000634:	3724      	adds	r7, #36	; 0x24
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800064c:	d301      	bcc.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e00f      	b.n	8000672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <SysTick_Config+0x40>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	210f      	movs	r1, #15
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000660:	f7ff ff90 	bl	8000584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SysTick_Config+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <SysTick_Config+0x40>)
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010

08000680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff2d 	bl	80004e8 <__NVIC_SetPriorityGrouping>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006a8:	f7ff ff42 	bl	8000530 <__NVIC_GetPriorityGrouping>
 80006ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	6978      	ldr	r0, [r7, #20]
 80006b4:	f7ff ff90 	bl	80005d8 <NVIC_EncodePriority>
 80006b8:	4602      	mov	r2, r0
 80006ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff5f 	bl	8000584 <__NVIC_SetPriority>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff35 	bl	800054c <__NVIC_EnableIRQ>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ffa2 	bl	800063c <SysTick_Config>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000704:	b08b      	sub	sp, #44	; 0x2c
 8000706:	af06      	add	r7, sp, #24
 8000708:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e0fd      	b.n	8000910 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d106      	bne.n	800072e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f008 fd5b 	bl	80091e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2203      	movs	r2, #3
 8000732:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f96a 	bl	8002a14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	687e      	ldr	r6, [r7, #4]
 8000748:	466d      	mov	r5, sp
 800074a:	f106 0410 	add.w	r4, r6, #16
 800074e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	602b      	str	r3, [r5, #0]
 8000756:	1d33      	adds	r3, r6, #4
 8000758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800075a:	6838      	ldr	r0, [r7, #0]
 800075c:	f002 f934 	bl	80029c8 <USB_CoreInit>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d005      	beq.n	8000772 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2202      	movs	r2, #2
 800076a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e0ce      	b.n	8000910 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f002 f965 	bl	8002a48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e04c      	b.n	800081e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	440b      	add	r3, r1
 8000794:	3301      	adds	r3, #1
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	440b      	add	r3, r1
 80007aa:	7bfa      	ldrb	r2, [r7, #15]
 80007ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	b298      	uxth	r0, r3
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	440b      	add	r3, r1
 80007c0:	3336      	adds	r3, #54	; 0x36
 80007c2:	4602      	mov	r2, r0
 80007c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3303      	adds	r3, #3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3338      	adds	r3, #56	; 0x38
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007f0:	7bfa      	ldrb	r2, [r7, #15]
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	333c      	adds	r3, #60	; 0x3c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	3340      	adds	r3, #64	; 0x40
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3ad      	bcc.n	8000784 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e044      	b.n	80008b8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800082e:	7bfa      	ldrb	r2, [r7, #15]
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	440b      	add	r3, r1
 8000852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	440b      	add	r3, r1
 8000868:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
 8000894:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3b5      	bcc.n	800082e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	687e      	ldr	r6, [r7, #4]
 80008ca:	466d      	mov	r5, sp
 80008cc:	f106 0410 	add.w	r4, r6, #16
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	602b      	str	r3, [r5, #0]
 80008d8:	1d33      	adds	r3, r6, #4
 80008da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f002 f8bf 	bl	8002a60 <USB_DevInit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2202      	movs	r2, #2
 80008ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00d      	b.n	8000910 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fa30 	bl	8004d6e <USB_DevDisconnect>

  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000918 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000926:	2b01      	cmp	r3, #1
 8000928:	d101      	bne.n	800092e <HAL_PCD_Start+0x16>
 800092a:	2302      	movs	r3, #2
 800092c:	e016      	b.n	800095c <HAL_PCD_Start+0x44>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f002 f854 	bl	80029e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000940:	2101      	movs	r1, #1
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f008 fec1 	bl	80096ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fa04 	bl	8004d5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fa06 	bl	8004d82 <USB_ReadInterrupts>
 8000976:	4603      	mov	r3, r0
 8000978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000980:	d102      	bne.n	8000988 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fb61 	bl	800104a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f004 f9f8 	bl	8004d82 <USB_ReadInterrupts>
 8000992:	4603      	mov	r3, r0
 8000994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800099c:	d112      	bne.n	80009c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009b0:	b292      	uxth	r2, r2
 80009b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f008 fc8f 	bl	80092da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009bc:	2100      	movs	r1, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f925 	bl	8000c0e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 f9da 	bl	8004d82 <USB_ReadInterrupts>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009d8:	d10b      	bne.n	80009f2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009ec:	b292      	uxth	r2, r2
 80009ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 f9c3 	bl	8004d82 <USB_ReadInterrupts>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a06:	d10b      	bne.n	8000a20 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a1a:	b292      	uxth	r2, r2
 8000a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 f9ac 	bl	8004d82 <USB_ReadInterrupts>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a34:	d126      	bne.n	8000a84 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0204 	bic.w	r2, r2, #4
 8000a48:	b292      	uxth	r2, r2
 8000a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0208 	bic.w	r2, r2, #8
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f008 fc70 	bl	800934c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 f97a 	bl	8004d82 <USB_ReadInterrupts>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a98:	f040 8084 	bne.w	8000ba4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	77fb      	strb	r3, [r7, #31]
 8000aa0:	e011      	b.n	8000ac6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	441a      	add	r2, r3
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	f107 0120 	add.w	r1, r7, #32
 8000aba:	440b      	add	r3, r1
 8000abc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	77fb      	strb	r3, [r7, #31]
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d9ea      	bls.n	8000aa2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	b292      	uxth	r2, r2
 8000af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000afc:	bf00      	nop
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f6      	beq.n	8000afe <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b22:	b292      	uxth	r2, r2
 8000b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	77fb      	strb	r3, [r7, #31]
 8000b2c:	e010      	b.n	8000b50 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b2e:	7ffb      	ldrb	r3, [r7, #31]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	4611      	mov	r1, r2
 8000b36:	7ffa      	ldrb	r2, [r7, #31]
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	440a      	add	r2, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	f107 0120 	add.w	r1, r7, #32
 8000b42:	440b      	add	r3, r1
 8000b44:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b48:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b4a:	7ffb      	ldrb	r3, [r7, #31]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	77fb      	strb	r3, [r7, #31]
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d9eb      	bls.n	8000b2e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f042 0208 	orr.w	r2, r2, #8
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b80:	b292      	uxth	r2, r2
 8000b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0204 	orr.w	r2, r2, #4
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f008 fbba 	bl	8009318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f8ea 	bl	8004d82 <USB_ReadInterrupts>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb8:	d10e      	bne.n	8000bd8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bcc:	b292      	uxth	r2, r2
 8000bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f008 fb73 	bl	80092be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 f8d0 	bl	8004d82 <USB_ReadInterrupts>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bec:	d10b      	bne.n	8000c06 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c00:	b292      	uxth	r2, r2
 8000c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_PCD_SetAddress+0x1a>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e013      	b.n	8000c50 <HAL_PCD_SetAddress+0x42>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	78fa      	ldrb	r2, [r7, #3]
 8000c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 f877 	bl	8004d34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	4608      	mov	r0, r1
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	70fb      	strb	r3, [r7, #3]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	803b      	strh	r3, [r7, #0]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da0e      	bge.n	8000c9c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	705a      	strb	r2, [r3, #1]
 8000c9a:	e00e      	b.n	8000cba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	f003 0207 	and.w	r2, r3, #7
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cc6:	883a      	ldrh	r2, [r7, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	78ba      	ldrb	r2, [r7, #2]
 8000cd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ce4:	78bb      	ldrb	r3, [r7, #2]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d102      	bne.n	8000cf0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2200      	movs	r2, #0
 8000cee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d101      	bne.n	8000cfe <HAL_PCD_EP_Open+0xa6>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e00e      	b.n	8000d1c <HAL_PCD_EP_Open+0xc4>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68f9      	ldr	r1, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fec7 	bl	8002aa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da0e      	bge.n	8000d56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	705a      	strb	r2, [r3, #1]
 8000d54:	e00e      	b.n	8000d74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	f003 0207 	and.w	r2, r3, #7
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2200      	movs	r2, #0
 8000d72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_PCD_EP_Close+0x6a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e00e      	b.n	8000dac <HAL_PCD_EP_Close+0x88>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68f9      	ldr	r1, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f9e9 	bl	8003174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	f003 0207 	and.w	r2, r3, #7
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2200      	movs	r2, #0
 8000df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6979      	ldr	r1, [r7, #20]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fb9b 	bl	800354c <USB_EPStartXfer>
 8000e16:	e005      	b.n	8000e24 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6979      	ldr	r1, [r7, #20]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fb94 	bl	800354c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	f003 0207 	and.w	r2, r3, #7
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e50:	681b      	ldr	r3, [r3, #0]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ea8:	7afb      	ldrb	r3, [r7, #11]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6979      	ldr	r1, [r7, #20]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fb41 	bl	800354c <USB_EPStartXfer>
 8000eca:	e005      	b.n	8000ed8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6979      	ldr	r1, [r7, #20]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fb3a 	bl	800354c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f003 0207 	and.w	r2, r3, #7
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d901      	bls.n	8000f00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e04c      	b.n	8000f9a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da0e      	bge.n	8000f26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	705a      	strb	r2, [r3, #1]
 8000f24:	e00c      	b.n	8000f40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_PCD_EP_SetStall+0x7e>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e01c      	b.n	8000f9a <HAL_PCD_EP_SetStall+0xb8>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fde3 	bl	8004b3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f003 ff08 	bl	8004da0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	f003 020f 	and.w	r2, r3, #15
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d901      	bls.n	8000fc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e040      	b.n	8001042 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	da0e      	bge.n	8000fe6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	705a      	strb	r2, [r3, #1]
 8000fe4:	e00e      	b.n	8001004 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	f003 0207 	and.w	r2, r3, #7
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	b2da      	uxtb	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_PCD_EP_ClrStall+0x82>
 8001020:	2302      	movs	r3, #2
 8001022:	e00e      	b.n	8001042 <HAL_PCD_EP_ClrStall+0xa0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68f9      	ldr	r1, [r7, #12]
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fdd1 	bl	8004bda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b08e      	sub	sp, #56	; 0x38
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001052:	e2ec      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800105c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800105e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800106a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 8161 	bne.w	8001336 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d152      	bne.n	8001124 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800108a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800108e:	81fb      	strh	r3, [r7, #14]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800109a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800109e:	b29b      	uxth	r3, r3
 80010a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3328      	adds	r3, #40	; 0x28
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	3302      	adds	r3, #2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	441a      	add	r2, r3
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010e2:	2100      	movs	r1, #0
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f008 f8d0 	bl	800928a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 829b 	beq.w	800162e <PCD_EP_ISR_Handler+0x5e4>
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 8296 	bne.w	800162e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2da      	uxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001122:	e284      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113a:	2b00      	cmp	r3, #0
 800113c:	d034      	beq.n	80011a8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	3306      	adds	r3, #6
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	4413      	add	r3, r2
 800115c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800117c:	b29b      	uxth	r3, r3
 800117e:	f003 fe5f 	bl	8004e40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800118e:	4013      	ands	r3, r2
 8001190:	823b      	strh	r3, [r7, #16]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	8a3a      	ldrh	r2, [r7, #16]
 8001198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800119c:	b292      	uxth	r2, r2
 800119e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f008 f845 	bl	8009230 <HAL_PCD_SetupStageCallback>
 80011a6:	e242      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f280 823e 	bge.w	800162e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011be:	4013      	ands	r3, r2
 80011c0:	83bb      	strh	r3, [r7, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	8bba      	ldrh	r2, [r7, #28]
 80011c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011cc:	b292      	uxth	r2, r2
 80011ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	3306      	adds	r3, #6
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d019      	beq.n	8001238 <PCD_EP_ISR_Handler+0x1ee>
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	6959      	ldr	r1, [r3, #20]
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800121c:	b29b      	uxth	r3, r3
 800121e:	f003 fe0f 	bl	8004e40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	441a      	add	r2, r3
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001230:	2100      	movs	r1, #0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f008 f80e 	bl	8009254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 81f2 	bne.w	800162e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4413      	add	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d112      	bne.n	8001298 <PCD_EP_ISR_Handler+0x24e>
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800127c:	b29a      	uxth	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800128c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001290:	b29a      	uxth	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	e02f      	b.n	80012f8 <PCD_EP_ISR_Handler+0x2ae>
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b3e      	cmp	r3, #62	; 0x3e
 800129e:	d813      	bhi.n	80012c8 <PCD_EP_ISR_Handler+0x27e>
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <PCD_EP_ISR_Handler+0x270>
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b6:	3301      	adds	r3, #1
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	b29b      	uxth	r3, r3
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	e017      	b.n	80012f8 <PCD_EP_ISR_Handler+0x2ae>
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <PCD_EP_ISR_Handler+0x298>
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	3b01      	subs	r3, #1
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001308:	827b      	strh	r3, [r7, #18]
 800130a:	8a7b      	ldrh	r3, [r7, #18]
 800130c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001310:	827b      	strh	r3, [r7, #18]
 8001312:	8a7b      	ldrh	r3, [r7, #18]
 8001314:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001318:	827b      	strh	r3, [r7, #18]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	8a7b      	ldrh	r3, [r7, #18]
 8001320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	b29b      	uxth	r3, r3
 8001332:	8013      	strh	r3, [r2, #0]
 8001334:	e17b      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001348:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134c:	2b00      	cmp	r3, #0
 800134e:	f280 80ea 	bge.w	8001526 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b29a      	uxth	r2, r3
 8001364:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001368:	4013      	ands	r3, r2
 800136a:	853b      	strh	r3, [r7, #40]	; 0x28
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800137c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001380:	b292      	uxth	r2, r2
 8001382:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001384:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	7b1b      	ldrb	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d122      	bne.n	80013e8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	3306      	adds	r3, #6
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ca:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80013cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	6959      	ldr	r1, [r3, #20]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	88da      	ldrh	r2, [r3, #6]
 80013e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013e2:	f003 fd2d 	bl	8004e40 <USB_ReadPMA>
 80013e6:	e07c      	b.n	80014e2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d108      	bne.n	8001402 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013f2:	461a      	mov	r2, r3
 80013f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f927 	bl	800164a <HAL_PCD_EP_DB_Receive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001400:	e06f      	b.n	80014e2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800141c:	847b      	strh	r3, [r7, #34]	; 0x22
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	441a      	add	r2, r3
 800142c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800142e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800143e:	b29b      	uxth	r3, r3
 8001440:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	3302      	adds	r3, #2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001484:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001488:	2b00      	cmp	r3, #0
 800148a:	d02a      	beq.n	80014e2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	6959      	ldr	r1, [r3, #20]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	891a      	ldrh	r2, [r3, #8]
 8001498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800149a:	f003 fcd1 	bl	8004e40 <USB_ReadPMA>
 800149e:	e020      	b.n	80014e2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	3306      	adds	r3, #6
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014c8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	6959      	ldr	r1, [r3, #20]
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	895a      	ldrh	r2, [r3, #10]
 80014dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014de:	f003 fcaf 	bl	8004e40 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014e8:	441a      	add	r2, r3
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014f4:	441a      	add	r2, r3
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <PCD_EP_ISR_Handler+0x4c2>
 8001502:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d206      	bcs.n	800151a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f007 fe9e 	bl	8009254 <HAL_PCD_DataOutStageCallback>
 8001518:	e005      	b.n	8001526 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001520:	4618      	mov	r0, r3
 8001522:	f002 f813 	bl	800354c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152c:	2b00      	cmp	r3, #0
 800152e:	d07e      	beq.n	800162e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155e:	843b      	strh	r3, [r7, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	8c3b      	ldrh	r3, [r7, #32]
 8001570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001578:	b29b      	uxth	r3, r3
 800157a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d00c      	beq.n	800159e <PCD_EP_ISR_Handler+0x554>
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	78db      	ldrb	r3, [r3, #3]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001590:	2b02      	cmp	r3, #2
 8001592:	d146      	bne.n	8001622 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001594:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d141      	bne.n	8001622 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	3302      	adds	r3, #2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	8bfb      	ldrh	r3, [r7, #30]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d906      	bls.n	80015e0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	619a      	str	r2, [r3, #24]
 80015de:	e002      	b.n	80015e6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f007 fe48 	bl	800928a <HAL_PCD_DataInStageCallback>
 80015fa:	e018      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	441a      	add	r2, r3
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	441a      	add	r2, r3
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161a:	4618      	mov	r0, r3
 800161c:	f001 ff96 	bl	800354c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001620:	e005      	b.n	800162e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001622:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001624:	461a      	mov	r2, r3
 8001626:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f91b 	bl	8001864 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001636:	b29b      	uxth	r3, r3
 8001638:	b21b      	sxth	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f6ff ad0a 	blt.w	8001054 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b088      	sub	sp, #32
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	4613      	mov	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d07e      	beq.n	8001760 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	3302      	adds	r3, #2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	8b7b      	ldrh	r3, [r7, #26]
 8001692:	429a      	cmp	r2, r3
 8001694:	d306      	bcc.n	80016a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	8b7b      	ldrh	r3, [r7, #26]
 800169c:	1ad2      	subs	r2, r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	619a      	str	r2, [r3, #24]
 80016a2:	e002      	b.n	80016aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d123      	bne.n	80016fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016cc:	833b      	strh	r3, [r7, #24]
 80016ce:	8b3b      	ldrh	r3, [r7, #24]
 80016d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016d4:	833b      	strh	r3, [r7, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	441a      	add	r2, r3
 80016e4:	8b3b      	ldrh	r3, [r7, #24]
 80016e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01f      	beq.n	8001744 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171e:	82fb      	strh	r3, [r7, #22]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	441a      	add	r2, r3
 800172e:	8afb      	ldrh	r3, [r7, #22]
 8001730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001740:	b29b      	uxth	r3, r3
 8001742:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001744:	8b7b      	ldrh	r3, [r7, #26]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8087 	beq.w	800185a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	6959      	ldr	r1, [r3, #20]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	891a      	ldrh	r2, [r3, #8]
 8001758:	8b7b      	ldrh	r3, [r7, #26]
 800175a:	f003 fb71 	bl	8004e40 <USB_ReadPMA>
 800175e:	e07c      	b.n	800185a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	3306      	adds	r3, #6
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001788:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	8b7b      	ldrh	r3, [r7, #26]
 8001790:	429a      	cmp	r2, r3
 8001792:	d306      	bcc.n	80017a2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	8b7b      	ldrh	r3, [r7, #26]
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	e002      	b.n	80017a8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d123      	bne.n	80017f8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ca:	83fb      	strh	r3, [r7, #30]
 80017cc:	8bfb      	ldrh	r3, [r7, #30]
 80017ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017d2:	83fb      	strh	r3, [r7, #30]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	8bfb      	ldrh	r3, [r7, #30]
 80017e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11f      	bne.n	8001842 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181c:	83bb      	strh	r3, [r7, #28]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	441a      	add	r2, r3
 800182c:	8bbb      	ldrh	r3, [r7, #28]
 800182e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800183e:	b29b      	uxth	r3, r3
 8001840:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001842:	8b7b      	ldrh	r3, [r7, #26]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	6959      	ldr	r1, [r3, #20]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	895a      	ldrh	r2, [r3, #10]
 8001854:	8b7b      	ldrh	r3, [r7, #26]
 8001856:	f003 faf3 	bl	8004e40 <USB_ReadPMA>
    }
  }

  return count;
 800185a:	8b7b      	ldrh	r3, [r7, #26]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0a2      	sub	sp, #136	; 0x88
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 81c7 	beq.w	8001c0c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	3302      	adds	r3, #2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d907      	bls.n	80018c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	e002      	b.n	80018cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 80b9 	bne.w	8001a48 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d126      	bne.n	800192c <HAL_PCD_EP_DB_Transmit+0xc8>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	011a      	lsls	r2, r3, #4
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	4413      	add	r3, r2
 8001900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001910:	b29a      	uxth	r2, r3
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001924:	b29a      	uxth	r2, r3
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e01a      	b.n	8001962 <HAL_PCD_EP_DB_Transmit+0xfe>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d116      	bne.n	8001962 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	4413      	add	r3, r2
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	011a      	lsls	r2, r3, #4
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	4413      	add	r3, r2
 8001956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d126      	bne.n	80019be <HAL_PCD_EP_DB_Transmit+0x15a>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4413      	add	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	011a      	lsls	r2, r3, #4
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4413      	add	r3, r2
 8001992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	801a      	strh	r2, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e017      	b.n	80019ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d113      	bne.n	80019ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	4413      	add	r3, r2
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	011a      	lsls	r2, r3, #4
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	4413      	add	r3, r2
 80019e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2200      	movs	r2, #0
 80019ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f007 fc48 	bl	800928a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 82d4 	beq.w	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a20:	827b      	strh	r3, [r7, #18]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	441a      	add	r2, r3
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8013      	strh	r3, [r2, #0]
 8001a46:	e2b2      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d021      	beq.n	8001a96 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	441a      	add	r2, r3
 8001a7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 8286 	bne.w	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aaa:	441a      	add	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ab8:	441a      	add	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d309      	bcc.n	8001ade <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	621a      	str	r2, [r3, #32]
 8001adc:	e015      	b.n	8001b0a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001af4:	e009      	b.n	8001b0a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d155      	bne.n	8001bbe <HAL_PCD_EP_DB_Transmit+0x35a>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b26:	4413      	add	r3, r2
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	011a      	lsls	r2, r3, #4
 8001b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b32:	4413      	add	r3, r2
 8001b34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d112      	bne.n	8001b66 <HAL_PCD_EP_DB_Transmit+0x302>
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	e047      	b.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b68:	2b3e      	cmp	r3, #62	; 0x3e
 8001b6a:	d811      	bhi.n	8001b90 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7e:	3301      	adds	r3, #1
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e032      	b.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_EP_DB_Transmit+0x342>
 8001ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	e01b      	b.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d117      	bne.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bda:	4413      	add	r3, r2
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	011a      	lsls	r2, r3, #4
 8001be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be6:	4413      	add	r3, r2
 8001be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	6959      	ldr	r1, [r3, #20]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	891a      	ldrh	r2, [r3, #8]
 8001c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f003 f8d6 	bl	8004db6 <USB_WritePMA>
 8001c0a:	e1d0      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3306      	adds	r3, #6
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d307      	bcc.n	8001c54 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c4c:	1ad2      	subs	r2, r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	e002      	b.n	8001c5a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80c4 	bne.w	8001dec <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d126      	bne.n	8001cba <HAL_PCD_EP_DB_Transmit+0x456>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c80:	4413      	add	r3, r2
 8001c82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	011a      	lsls	r2, r3, #4
 8001c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	e01a      	b.n	8001cf0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	785b      	ldrb	r3, [r3, #1]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d116      	bne.n	8001cf0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	677b      	str	r3, [r7, #116]	; 0x74
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd6:	4413      	add	r3, r2
 8001cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	011a      	lsls	r2, r3, #4
 8001ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ce8:	673b      	str	r3, [r7, #112]	; 0x70
 8001cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	785b      	ldrb	r3, [r3, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12f      	bne.n	8001d5e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d16:	4413      	add	r3, r2
 8001d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	011a      	lsls	r2, r3, #4
 8001d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d26:	4413      	add	r3, r2
 8001d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5a:	801a      	strh	r2, [r3, #0]
 8001d5c:	e017      	b.n	8001d8e <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d113      	bne.n	8001d8e <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d74:	4413      	add	r3, r2
 8001d76:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	011a      	lsls	r2, r3, #4
 8001d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d80:	4413      	add	r3, r2
 8001d82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f007 fa78 	bl	800928a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8104 	bne.w	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	8013      	strh	r3, [r2, #0]
 8001dea:	e0e0      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d121      	bne.n	8001e3a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	441a      	add	r2, r3
 8001e22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 80b4 	bne.w	8001fae <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e4e:	441a      	add	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e5c:	441a      	add	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d309      	bcc.n	8001e82 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	e015      	b.n	8001eae <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001e8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e98:	e009      	b.n	8001eae <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d155      	bne.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x704>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed0:	4413      	add	r3, r2
 8001ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	011a      	lsls	r2, r3, #4
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	4413      	add	r3, r2
 8001ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d112      	bne.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	e044      	b.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x736>
 8001f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f12:	2b3e      	cmp	r3, #62	; 0x3e
 8001f14:	d811      	bhi.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	3301      	adds	r3, #1
 8001f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e02f      	b.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x736>
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e018      	b.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x736>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d114      	bne.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x736>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f7e:	4413      	add	r3, r2
 8001f80:	667b      	str	r3, [r7, #100]	; 0x64
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	011a      	lsls	r2, r3, #4
 8001f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f90:	663b      	str	r3, [r7, #96]	; 0x60
 8001f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6959      	ldr	r1, [r3, #20]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	895a      	ldrh	r2, [r3, #10]
 8001fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f002 ff04 	bl	8004db6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fc8:	823b      	strh	r3, [r7, #16]
 8001fca:	8a3b      	ldrh	r3, [r7, #16]
 8001fcc:	f083 0310 	eor.w	r3, r3, #16
 8001fd0:	823b      	strh	r3, [r7, #16]
 8001fd2:	8a3b      	ldrh	r3, [r7, #16]
 8001fd4:	f083 0320 	eor.w	r3, r3, #32
 8001fd8:	823b      	strh	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	8a3b      	ldrh	r3, [r7, #16]
 8001fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3788      	adds	r7, #136	; 0x88
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	4613      	mov	r3, r2
 8002018:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e009      	b.n	8002052 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800203e:	897a      	ldrh	r2, [r7, #10]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002052:	893b      	ldrh	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	b29a      	uxth	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	80da      	strh	r2, [r3, #6]
 8002066:	e00b      	b.n	8002080 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2201      	movs	r2, #1
 800206c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	b29a      	uxth	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	b29a      	uxth	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e26c      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d112      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d10b      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x12c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d168      	bne.n	80021b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e246      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x76>
 80020f4:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7f      	ldr	r2, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e02e      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0xbc>
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe f990 	bl	800048c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe f98c 	bl	800048c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1fa      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xe4>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe f97c 	bl	800048c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe f978 	bl	800048c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1e6      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x10c>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1ba      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4939      	ldr	r1, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe f931 	bl	800048c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe f92d 	bl	800048c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e19b      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe f910 	bl	800048c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe f90c 	bl	800048c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e17a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03a      	beq.n	8002310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe f8f0 	bl	800048c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe f8ec 	bl	800048c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e15a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 faa6 	bl	8002820 <RCC_Delay>
 80022d4:	e01c      	b.n	8002310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe f8d6 	bl	800048c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe f8d2 	bl	800048c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d908      	bls.n	8002304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e140      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	42420000 	.word	0x42420000
 8002300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e9      	bne.n	80022e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a6 	beq.w	800246a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b97      	ldr	r3, [pc, #604]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b94      	ldr	r3, [pc, #592]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a93      	ldr	r2, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b91      	ldr	r3, [pc, #580]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a8a      	ldr	r2, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe f893 	bl	800048c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe f88f 	bl	800048c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0fd      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e02d      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	e01c      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x356>
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a66      	ldr	r2, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a63      	ldr	r2, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe f843 	bl	800048c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe f83f 	bl	800048c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ab      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RCC_OscConfig+0x37e>
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe f82d 	bl	800048c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe f829 	bl	800048c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e095      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b48      	ldr	r3, [pc, #288]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8081 	beq.w	8002576 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d061      	beq.n	8002544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d146      	bne.n	8002516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fd fffd 	bl	800048c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fd fff9 	bl	800048c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e067      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	492d      	ldr	r1, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a19      	ldr	r1, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	430b      	orrs	r3, r1
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fd ffcd 	bl	800048c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fd ffc9 	bl	800048c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e037      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
 8002514:	e02f      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fd ffb6 	bl	800048c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fd ffb2 	bl	800048c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e020      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x498>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	42420060 	.word	0x42420060

0800258c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d0      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d910      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4965      	ldr	r1, [pc, #404]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b8      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800260a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	494d      	ldr	r1, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d040      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e073      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06b      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4936      	ldr	r1, [pc, #216]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fd ff06 	bl	800048c <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fd ff02 	bl	800048c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e053      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d210      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4922      	ldr	r1, [pc, #136]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e032      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4916      	ldr	r1, [pc, #88]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800271a:	f000 f821 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800271e:	4602      	mov	r2, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd fe64 	bl	8000408 <HAL_InitTick>

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000
 8002750:	40021000 	.word	0x40021000
 8002754:	08009864 	.word	0x08009864
 8002758:	20000000 	.word	0x20000000
 800275c:	20000004 	.word	0x20000004

08002760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b490      	push	{r4, r7}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002768:	1d3c      	adds	r4, r7, #4
 800276a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002770:	f240 2301 	movw	r3, #513	; 0x201
 8002774:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x40>
 800279a:	2b08      	cmp	r3, #8
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x46>
 800279e:	e02d      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a2:	623b      	str	r3, [r7, #32]
      break;
 80027a4:	e02d      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027b2:	4413      	add	r3, r2
 80027b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c5b      	lsrs	r3, r3, #17
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027d2:	4413      	add	r3, r2
 80027d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027de:	fb02 f203 	mul.w	r2, r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e004      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	623b      	str	r3, [r7, #32]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6a3b      	ldr	r3, [r7, #32]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3728      	adds	r7, #40	; 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc90      	pop	{r4, r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	080097d0 	.word	0x080097d0
 8002814:	40021000 	.word	0x40021000
 8002818:	007a1200 	.word	0x007a1200
 800281c:	003d0900 	.word	0x003d0900

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000000 	.word	0x20000000
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d07d      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d118      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b0:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028bc:	f7fd fde6 	bl	800048c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fd fde2 	bl	800048c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e06d      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d027      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002916:	4a29      	ldr	r2, [pc, #164]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fd fdb1 	bl	800048c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fd fdad 	bl	800048c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e036      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	4313      	orrs	r3, r2
 8002960:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	490b      	ldr	r1, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420440 	.word	0x42420440

080029c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029c8:	b084      	sub	sp, #16
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	f107 0014 	add.w	r0, r7, #20
 80029d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	b004      	add	sp, #16
 80029e6:	4770      	bx	lr

080029e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a60:	b084      	sub	sp, #16
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	f107 0014 	add.w	r0, r7, #20
 8002a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	b004      	add	sp, #16
 8002a9e:	4770      	bx	lr

08002aa0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b09b      	sub	sp, #108	; 0x6c
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	78db      	ldrb	r3, [r3, #3]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d81f      	bhi.n	8002b12 <USB_ActivateEndpoint+0x72>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <USB_ActivateEndpoint+0x38>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b1b 	.word	0x08002b1b
 8002ae4:	08002af7 	.word	0x08002af7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ae8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002af4:	e012      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002af6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002afa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002afe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b02:	e00b      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b10:	e004      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002b18:	e000      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>
      break;
 8002b1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	7b1b      	ldrb	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 8149 	bne.w	8002e20 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8084 	beq.w	8002ca0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	88db      	ldrh	r3, [r3, #6]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	81fb      	strh	r3, [r7, #14]
 8002bda:	89fb      	ldrh	r3, [r7, #14]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <USB_ActivateEndpoint+0x17c>
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	81bb      	strh	r3, [r7, #12]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	89bb      	ldrh	r3, [r7, #12]
 8002c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	78db      	ldrb	r3, [r3, #3]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d020      	beq.n	8002c66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3a:	813b      	strh	r3, [r7, #8]
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	f083 0320 	eor.w	r3, r3, #32
 8002c42:	813b      	strh	r3, [r7, #8]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	8013      	strh	r3, [r2, #0]
 8002c64:	e27f      	b.n	8003166 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
 8002c9e:	e262      	b.n	8003166 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	011a      	lsls	r2, r3, #4
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	88db      	ldrh	r3, [r3, #6]
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d112      	bne.n	8002d26 <USB_ActivateEndpoint+0x286>
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	e02f      	b.n	8002d86 <USB_ActivateEndpoint+0x2e6>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d2c:	d813      	bhi.n	8002d56 <USB_ActivateEndpoint+0x2b6>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <USB_ActivateEndpoint+0x2a8>
 8002d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d44:	3301      	adds	r3, #1
 8002d46:	663b      	str	r3, [r7, #96]	; 0x60
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	029b      	lsls	r3, r3, #10
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e017      	b.n	8002d86 <USB_ActivateEndpoint+0x2e6>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <USB_ActivateEndpoint+0x2d0>
 8002d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	029b      	lsls	r3, r3, #10
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	83fb      	strh	r3, [r7, #30]
 8002d94:	8bfb      	ldrh	r3, [r7, #30]
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01b      	beq.n	8002dd6 <USB_ActivateEndpoint+0x336>
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	83bb      	strh	r3, [r7, #28]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	441a      	add	r2, r3
 8002dc0:	8bbb      	ldrh	r3, [r7, #28]
 8002dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	837b      	strh	r3, [r7, #26]
 8002dee:	8b7b      	ldrh	r3, [r7, #26]
 8002df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002df4:	837b      	strh	r3, [r7, #26]
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dfc:	837b      	strh	r3, [r7, #26]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	8b7b      	ldrh	r3, [r7, #26]
 8002e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
 8002e1e:	e1a2      	b.n	8003166 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	4413      	add	r3, r2
 8002e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	891b      	ldrh	r3, [r3, #8]
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	653b      	str	r3, [r7, #80]	; 0x50
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	4413      	add	r3, r2
 8002ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	011a      	lsls	r2, r3, #4
 8002eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	895b      	ldrh	r3, [r3, #10]
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 8091 	bne.w	8002ff0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01b      	beq.n	8002f1e <USB_ActivateEndpoint+0x47e>
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01b      	beq.n	8002f6e <USB_ActivateEndpoint+0x4ce>
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	441a      	add	r2, r3
 8002fa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fcc:	867b      	strh	r3, [r7, #50]	; 0x32
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	441a      	add	r2, r3
 8002fd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	8013      	strh	r3, [r2, #0]
 8002fee:	e0ba      	b.n	8003166 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01d      	beq.n	8003048 <USB_ActivateEndpoint+0x5a8>
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800303c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01d      	beq.n	80030a0 <USB_ActivateEndpoint+0x600>
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	78db      	ldrb	r3, [r3, #3]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d024      	beq.n	80030f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030c6:	f083 0320 	eor.w	r3, r3, #32
 80030ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]
 80030f0:	e01d      	b.n	800312e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003108:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800316a:	4618      	mov	r0, r3
 800316c:	376c      	adds	r7, #108	; 0x6c
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003174:	b480      	push	{r7}
 8003176:	b08d      	sub	sp, #52	; 0x34
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	7b1b      	ldrb	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 808e 	bne.w	80032a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d044      	beq.n	800321a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	81bb      	strh	r3, [r7, #12]
 800319e:	89bb      	ldrh	r3, [r7, #12]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <USB_DeactivateEndpoint+0x6c>
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	817b      	strh	r3, [r7, #10]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031dc:	b29b      	uxth	r3, r3
 80031de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f6:	813b      	strh	r3, [r7, #8]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	893b      	ldrh	r3, [r7, #8]
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]
 8003218:	e192      	b.n	8003540 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	827b      	strh	r3, [r7, #18]
 8003228:	8a7b      	ldrh	r3, [r7, #18]
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01b      	beq.n	800326a <USB_DeactivateEndpoint+0xf6>
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003248:	823b      	strh	r3, [r7, #16]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	8a3b      	ldrh	r3, [r7, #16]
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	81fb      	strh	r3, [r7, #14]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]
 80032a2:	e14d      	b.n	8003540 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 80a5 	bne.w	80033f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	843b      	strh	r3, [r7, #32]
 80032bc:	8c3b      	ldrh	r3, [r7, #32]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01b      	beq.n	80032fe <USB_DeactivateEndpoint+0x18a>
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	83fb      	strh	r3, [r7, #30]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	8bfb      	ldrh	r3, [r7, #30]
 80032ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	83bb      	strh	r3, [r7, #28]
 800330c:	8bbb      	ldrh	r3, [r7, #28]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01b      	beq.n	800334e <USB_DeactivateEndpoint+0x1da>
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332c:	837b      	strh	r3, [r7, #26]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	8b7b      	ldrh	r3, [r7, #26]
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	833b      	strh	r3, [r7, #24]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	8b3b      	ldrh	r3, [r7, #24]
 8003372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	82fb      	strh	r3, [r7, #22]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	441a      	add	r2, r3
 80033a8:	8afb      	ldrh	r3, [r7, #22]
 80033aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d4:	82bb      	strh	r3, [r7, #20]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	8abb      	ldrh	r3, [r7, #20]
 80033e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]
 80033f6:	e0a3      	b.n	8003540 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <USB_DeactivateEndpoint+0x2d4>
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800343c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003444:	b29b      	uxth	r3, r3
 8003446:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <USB_DeactivateEndpoint+0x324>
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	853b      	strh	r3, [r7, #40]	; 0x28
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003494:	b29b      	uxth	r3, r3
 8003496:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	441a      	add	r2, r3
 80034ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3734      	adds	r7, #52	; 0x34
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b0cc      	sub	sp, #304	; 0x130
 8003550:	af00      	add	r7, sp, #0
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	6018      	str	r0, [r3, #0]
 8003556:	463b      	mov	r3, r7
 8003558:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800355a:	463b      	mov	r3, r7
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 872e 	bne.w	80043c2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003566:	463b      	mov	r3, r7
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	463b      	mov	r3, r7
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	429a      	cmp	r2, r3
 8003574:	d905      	bls.n	8003582 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003576:	463b      	mov	r3, r7
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003580:	e004      	b.n	800358c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003582:	463b      	mov	r3, r7
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800358c:	463b      	mov	r3, r7
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	7b1b      	ldrb	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d134      	bne.n	8003600 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003596:	463b      	mov	r3, r7
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6959      	ldr	r1, [r3, #20]
 800359c:	463b      	mov	r3, r7
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	88da      	ldrh	r2, [r3, #6]
 80035a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	1d38      	adds	r0, r7, #4
 80035aa:	6800      	ldr	r0, [r0, #0]
 80035ac:	f001 fc03 	bl	8004db6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	1d3a      	adds	r2, r7, #4
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4619      	mov	r1, r3
 80035c6:	f107 0310 	add.w	r3, r7, #16
 80035ca:	f107 0210 	add.w	r2, r7, #16
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	440a      	add	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	463b      	mov	r3, r7
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	011a      	lsls	r2, r3, #4
 80035dc:	f107 0310 	add.w	r3, r7, #16
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	f000 beac 	b.w	8004358 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003600:	463b      	mov	r3, r7
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78db      	ldrb	r3, [r3, #3]
 8003606:	2b02      	cmp	r3, #2
 8003608:	f040 838c 	bne.w	8003d24 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800360c:	463b      	mov	r3, r7
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	463b      	mov	r3, r7
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	f240 8330 	bls.w	8003c7e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	463b      	mov	r3, r7
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	463b      	mov	r3, r7
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003662:	463b      	mov	r3, r7
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	463b      	mov	r3, r7
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	463b      	mov	r3, r7
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 819e 	beq.w	80039cc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003694:	1d3a      	adds	r2, r7, #4
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	463b      	mov	r3, r7
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d17a      	bne.n	800379a <USB_EPStartXfer+0x24e>
 80036a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a8:	1d3a      	adds	r2, r7, #4
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	440a      	add	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	463b      	mov	r3, r7
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	011a      	lsls	r2, r3, #4
 80036d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80036dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <USB_EPStartXfer+0x1d4>
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003714:	b29a      	uxth	r2, r3
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	e062      	b.n	80037e6 <USB_EPStartXfer+0x29a>
 8003720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003724:	2b3e      	cmp	r3, #62	; 0x3e
 8003726:	d819      	bhi.n	800375c <USB_EPStartXfer+0x210>
 8003728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <USB_EPStartXfer+0x1fc>
 800373e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003742:	3301      	adds	r3, #1
 8003744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800374c:	b29b      	uxth	r3, r3
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29a      	uxth	r2, r3
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e044      	b.n	80037e6 <USB_EPStartXfer+0x29a>
 800375c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <USB_EPStartXfer+0x230>
 8003772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003776:	3b01      	subs	r3, #1
 8003778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003780:	b29b      	uxth	r3, r3
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	b29b      	uxth	r3, r3
 8003786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378e:	b29a      	uxth	r2, r3
 8003790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	e025      	b.n	80037e6 <USB_EPStartXfer+0x29a>
 800379a:	463b      	mov	r3, r7
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d120      	bne.n	80037e6 <USB_EPStartXfer+0x29a>
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	440a      	add	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	463b      	mov	r3, r7
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	011a      	lsls	r2, r3, #4
 80037c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80037d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037dc:	b29a      	uxth	r2, r3
 80037de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80037e6:	463b      	mov	r3, r7
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	895b      	ldrh	r3, [r3, #10]
 80037ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6959      	ldr	r1, [r3, #20]
 80037f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003800:	1d38      	adds	r0, r7, #4
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f001 fad7 	bl	8004db6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003808:	463b      	mov	r3, r7
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003812:	441a      	add	r2, r3
 8003814:	463b      	mov	r3, r7
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800381a:	463b      	mov	r3, r7
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	463b      	mov	r3, r7
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d909      	bls.n	800383e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800382a:	463b      	mov	r3, r7
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003834:	1ad2      	subs	r2, r2, r3
 8003836:	463b      	mov	r3, r7
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	621a      	str	r2, [r3, #32]
 800383c:	e008      	b.n	8003850 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800383e:	463b      	mov	r3, r7
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003848:	463b      	mov	r3, r7
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003850:	463b      	mov	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d17a      	bne.n	8003950 <USB_EPStartXfer+0x404>
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	1d3a      	adds	r2, r7, #4
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386c:	b29b      	uxth	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	f107 0218 	add.w	r2, r7, #24
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	440a      	add	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	463b      	mov	r3, r7
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	011a      	lsls	r2, r3, #4
 8003886:	f107 0318 	add.w	r3, r7, #24
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4413      	add	r3, r2
 800388e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11a      	bne.n	80038d6 <USB_EPStartXfer+0x38a>
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	e067      	b.n	80039a6 <USB_EPStartXfer+0x45a>
 80038d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038da:	2b3e      	cmp	r3, #62	; 0x3e
 80038dc:	d819      	bhi.n	8003912 <USB_EPStartXfer+0x3c6>
 80038de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <USB_EPStartXfer+0x3b2>
 80038f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038f8:	3301      	adds	r3, #1
 80038fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003902:	b29b      	uxth	r3, r3
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	b29a      	uxth	r2, r3
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	e049      	b.n	80039a6 <USB_EPStartXfer+0x45a>
 8003912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800391c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <USB_EPStartXfer+0x3e6>
 8003928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800392c:	3b01      	subs	r3, #1
 800392e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003932:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003936:	b29b      	uxth	r3, r3
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	b29b      	uxth	r3, r3
 800393c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003944:	b29a      	uxth	r2, r3
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	e02a      	b.n	80039a6 <USB_EPStartXfer+0x45a>
 8003950:	463b      	mov	r3, r7
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d125      	bne.n	80039a6 <USB_EPStartXfer+0x45a>
 800395a:	f107 0320 	add.w	r3, r7, #32
 800395e:	1d3a      	adds	r2, r7, #4
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396c:	b29b      	uxth	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	f107 0320 	add.w	r3, r7, #32
 8003974:	f107 0220 	add.w	r2, r7, #32
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	440a      	add	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	463b      	mov	r3, r7
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	f107 0320 	add.w	r3, r7, #32
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4413      	add	r3, r2
 800398e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003992:	f107 031c 	add.w	r3, r7, #28
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399c:	b29a      	uxth	r2, r3
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039a6:	463b      	mov	r3, r7
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	891b      	ldrh	r3, [r3, #8]
 80039ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039b0:	463b      	mov	r3, r7
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6959      	ldr	r1, [r3, #20]
 80039b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80039c0:	1d38      	adds	r0, r7, #4
 80039c2:	6800      	ldr	r0, [r0, #0]
 80039c4:	f001 f9f7 	bl	8004db6 <USB_WritePMA>
 80039c8:	f000 bcc6 	b.w	8004358 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039cc:	463b      	mov	r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	785b      	ldrb	r3, [r3, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d164      	bne.n	8003aa0 <USB_EPStartXfer+0x554>
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ea:	4413      	add	r3, r2
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ee:	463b      	mov	r3, r7
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	011a      	lsls	r2, r3, #4
 80039f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d112      	bne.n	8003a2e <USB_EPStartXfer+0x4e2>
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	e057      	b.n	8003ade <USB_EPStartXfer+0x592>
 8003a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a32:	2b3e      	cmp	r3, #62	; 0x3e
 8003a34:	d817      	bhi.n	8003a66 <USB_EPStartXfer+0x51a>
 8003a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <USB_EPStartXfer+0x50a>
 8003a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a50:	3301      	adds	r3, #1
 8003a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e03b      	b.n	8003ade <USB_EPStartXfer+0x592>
 8003a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <USB_EPStartXfer+0x53a>
 8003a7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a80:	3b01      	subs	r3, #1
 8003a82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e01e      	b.n	8003ade <USB_EPStartXfer+0x592>
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d119      	bne.n	8003ade <USB_EPStartXfer+0x592>
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003abe:	4413      	add	r3, r2
 8003ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	011a      	lsls	r2, r3, #4
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	4413      	add	r3, r2
 8003ace:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ade:	463b      	mov	r3, r7
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	891b      	ldrh	r3, [r3, #8]
 8003ae4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ae8:	463b      	mov	r3, r7
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6959      	ldr	r1, [r3, #20]
 8003aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003af8:	1d38      	adds	r0, r7, #4
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	f001 f95b 	bl	8004db6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b00:	463b      	mov	r3, r7
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b0a:	441a      	add	r2, r3
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b12:	463b      	mov	r3, r7
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	463b      	mov	r3, r7
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d909      	bls.n	8003b36 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003b22:	463b      	mov	r3, r7
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	463b      	mov	r3, r7
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	e008      	b.n	8003b48 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b36:	463b      	mov	r3, r7
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003b40:	463b      	mov	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2200      	movs	r2, #0
 8003b46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4e:	463b      	mov	r3, r7
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d164      	bne.n	8003c22 <USB_EPStartXfer+0x6d6>
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	4413      	add	r3, r2
 8003b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b70:	463b      	mov	r3, r7
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	011a      	lsls	r2, r3, #4
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
 8003b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d112      	bne.n	8003bb0 <USB_EPStartXfer+0x664>
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	e054      	b.n	8003c5a <USB_EPStartXfer+0x70e>
 8003bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb6:	d817      	bhi.n	8003be8 <USB_EPStartXfer+0x69c>
 8003bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <USB_EPStartXfer+0x68c>
 8003bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	e038      	b.n	8003c5a <USB_EPStartXfer+0x70e>
 8003be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <USB_EPStartXfer+0x6bc>
 8003bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	029b      	lsls	r3, r3, #10
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	e01b      	b.n	8003c5a <USB_EPStartXfer+0x70e>
 8003c22:	463b      	mov	r3, r7
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d116      	bne.n	8003c5a <USB_EPStartXfer+0x70e>
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	4413      	add	r3, r2
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3e:	463b      	mov	r3, r7
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	011a      	lsls	r2, r3, #4
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	4413      	add	r3, r2
 8003c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	895b      	ldrh	r3, [r3, #10]
 8003c60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c64:	463b      	mov	r3, r7
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c74:	1d38      	adds	r0, r7, #4
 8003c76:	6800      	ldr	r0, [r0, #0]
 8003c78:	f001 f89d 	bl	8004db6 <USB_WritePMA>
 8003c7c:	e36c      	b.n	8004358 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003c7e:	463b      	mov	r3, r7
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	463b      	mov	r3, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce0:	4413      	add	r3, r2
 8003ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	011a      	lsls	r2, r3, #4
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	4413      	add	r3, r2
 8003cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	891b      	ldrh	r3, [r3, #8]
 8003d06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d0a:	463b      	mov	r3, r7
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6959      	ldr	r1, [r3, #20]
 8003d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d1a:	1d38      	adds	r0, r7, #4
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	f001 f84a 	bl	8004db6 <USB_WritePMA>
 8003d22:	e319      	b.n	8004358 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	463b      	mov	r3, r7
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	463b      	mov	r3, r7
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d68:	463b      	mov	r3, r7
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	463b      	mov	r3, r7
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	463b      	mov	r3, r7
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8162 	beq.w	800405a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d9e:	463b      	mov	r3, r7
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d164      	bne.n	8003e72 <USB_EPStartXfer+0x926>
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dbc:	4413      	add	r3, r2
 8003dbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	011a      	lsls	r2, r3, #4
 8003dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd0:	677b      	str	r3, [r7, #116]	; 0x74
 8003dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d112      	bne.n	8003e00 <USB_EPStartXfer+0x8b4>
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	e057      	b.n	8003eb0 <USB_EPStartXfer+0x964>
 8003e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e04:	2b3e      	cmp	r3, #62	; 0x3e
 8003e06:	d817      	bhi.n	8003e38 <USB_EPStartXfer+0x8ec>
 8003e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <USB_EPStartXfer+0x8dc>
 8003e1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e22:	3301      	adds	r3, #1
 8003e24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	e03b      	b.n	8003eb0 <USB_EPStartXfer+0x964>
 8003e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <USB_EPStartXfer+0x90c>
 8003e4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e52:	3b01      	subs	r3, #1
 8003e54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	029b      	lsls	r3, r3, #10
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e01e      	b.n	8003eb0 <USB_EPStartXfer+0x964>
 8003e72:	463b      	mov	r3, r7
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <USB_EPStartXfer+0x964>
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e92:	463b      	mov	r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	011a      	lsls	r2, r3, #4
 8003e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	895b      	ldrh	r3, [r3, #10]
 8003eb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003eba:	463b      	mov	r3, r7
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6959      	ldr	r1, [r3, #20]
 8003ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003eca:	1d38      	adds	r0, r7, #4
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f000 ff72 	bl	8004db6 <USB_WritePMA>
          ep->xfer_buff += len;
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003edc:	441a      	add	r2, r3
 8003ede:	463b      	mov	r3, r7
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	463b      	mov	r3, r7
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d909      	bls.n	8003f08 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	463b      	mov	r3, r7
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	621a      	str	r2, [r3, #32]
 8003f06:	e008      	b.n	8003f1a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003f08:	463b      	mov	r3, r7
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003f12:	463b      	mov	r3, r7
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 821a 	beq.w	8004358 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f24:	463b      	mov	r3, r7
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d164      	bne.n	8003ff8 <USB_EPStartXfer+0xaac>
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f42:	4413      	add	r3, r2
 8003f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f46:	463b      	mov	r3, r7
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	011a      	lsls	r2, r3, #4
 8003f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f50:	4413      	add	r3, r2
 8003f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f56:	667b      	str	r3, [r7, #100]	; 0x64
 8003f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d112      	bne.n	8003f86 <USB_EPStartXfer+0xa3a>
 8003f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e057      	b.n	8004036 <USB_EPStartXfer+0xaea>
 8003f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f8c:	d817      	bhi.n	8003fbe <USB_EPStartXfer+0xa72>
 8003f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <USB_EPStartXfer+0xa62>
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	e03b      	b.n	8004036 <USB_EPStartXfer+0xaea>
 8003fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <USB_EPStartXfer+0xa92>
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	e01e      	b.n	8004036 <USB_EPStartXfer+0xaea>
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d119      	bne.n	8004036 <USB_EPStartXfer+0xaea>
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	673b      	str	r3, [r7, #112]	; 0x70
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004016:	4413      	add	r3, r2
 8004018:	673b      	str	r3, [r7, #112]	; 0x70
 800401a:	463b      	mov	r3, r7
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004024:	4413      	add	r3, r2
 8004026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800402a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800402c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004030:	b29a      	uxth	r2, r3
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	891b      	ldrh	r3, [r3, #8]
 800403c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404a:	b29b      	uxth	r3, r3
 800404c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004050:	1d38      	adds	r0, r7, #4
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	f000 feaf 	bl	8004db6 <USB_WritePMA>
 8004058:	e17e      	b.n	8004358 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800405a:	463b      	mov	r3, r7
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d16f      	bne.n	8004144 <USB_EPStartXfer+0xbf8>
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004074:	b29b      	uxth	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800407c:	4413      	add	r3, r2
 800407e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004082:	463b      	mov	r3, r7
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	011a      	lsls	r2, r3, #4
 800408a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800408e:	4413      	add	r3, r2
 8004090:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <USB_EPStartXfer+0xb82>
 80040a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	e05f      	b.n	800418e <USB_EPStartXfer+0xc42>
 80040ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d2:	2b3e      	cmp	r3, #62	; 0x3e
 80040d4:	d818      	bhi.n	8004108 <USB_EPStartXfer+0xbbc>
 80040d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <USB_EPStartXfer+0xbaa>
 80040ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040f0:	3301      	adds	r3, #1
 80040f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e042      	b.n	800418e <USB_EPStartXfer+0xc42>
 8004108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <USB_EPStartXfer+0xbdc>
 800411e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004122:	3b01      	subs	r3, #1
 8004124:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004128:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800412c:	b29b      	uxth	r3, r3
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	b29b      	uxth	r3, r3
 8004132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413a:	b29a      	uxth	r2, r3
 800413c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	e024      	b.n	800418e <USB_EPStartXfer+0xc42>
 8004144:	463b      	mov	r3, r7
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11f      	bne.n	800418e <USB_EPStartXfer+0xc42>
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004166:	4413      	add	r3, r2
 8004168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800416c:	463b      	mov	r3, r7
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	011a      	lsls	r2, r3, #4
 8004174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004178:	4413      	add	r3, r2
 800417a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004186:	b29a      	uxth	r2, r3
 8004188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800418c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800418e:	463b      	mov	r3, r7
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	891b      	ldrh	r3, [r3, #8]
 8004194:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004198:	463b      	mov	r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6959      	ldr	r1, [r3, #20]
 800419e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80041a8:	1d38      	adds	r0, r7, #4
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f000 fe03 	bl	8004db6 <USB_WritePMA>
          ep->xfer_buff += len;
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ba:	441a      	add	r2, r3
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	463b      	mov	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d909      	bls.n	80041e6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80041d2:	463b      	mov	r3, r7
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	463b      	mov	r3, r7
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	621a      	str	r2, [r3, #32]
 80041e4:	e008      	b.n	80041f8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80041e6:	463b      	mov	r3, r7
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80041f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80ab 	beq.w	8004358 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420a:	463b      	mov	r3, r7
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d16f      	bne.n	80042f4 <USB_EPStartXfer+0xda8>
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422c:	4413      	add	r3, r2
 800422e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004232:	463b      	mov	r3, r7
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	011a      	lsls	r2, r3, #4
 800423a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800423e:	4413      	add	r3, r2
 8004240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d116      	bne.n	800427e <USB_EPStartXfer+0xd32>
 8004250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800425c:	b29a      	uxth	r2, r3
 800425e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e05b      	b.n	8004336 <USB_EPStartXfer+0xdea>
 800427e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004282:	2b3e      	cmp	r3, #62	; 0x3e
 8004284:	d818      	bhi.n	80042b8 <USB_EPStartXfer+0xd6c>
 8004286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <USB_EPStartXfer+0xd5a>
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a0:	3301      	adds	r3, #1
 80042a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e03e      	b.n	8004336 <USB_EPStartXfer+0xdea>
 80042b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <USB_EPStartXfer+0xd8c>
 80042ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	e020      	b.n	8004336 <USB_EPStartXfer+0xdea>
 80042f4:	463b      	mov	r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d11b      	bne.n	8004336 <USB_EPStartXfer+0xdea>
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800430e:	4413      	add	r3, r2
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	011a      	lsls	r2, r3, #4
 800431c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004320:	4413      	add	r3, r2
 8004322:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800432a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432e:	b29a      	uxth	r2, r3
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004334:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004336:	463b      	mov	r3, r7
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	895b      	ldrh	r3, [r3, #10]
 800433c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6959      	ldr	r1, [r3, #20]
 8004346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800434a:	b29b      	uxth	r3, r3
 800434c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004350:	1d38      	adds	r0, r7, #4
 8004352:	6800      	ldr	r0, [r0, #0]
 8004354:	f000 fd2f 	bl	8004db6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	463b      	mov	r3, r7
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f107 020a 	add.w	r2, r7, #10
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	8013      	strh	r3, [r2, #0]
 8004378:	f107 030a 	add.w	r3, r7, #10
 800437c:	f107 020a 	add.w	r2, r7, #10
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	f082 0210 	eor.w	r2, r2, #16
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	f107 030a 	add.w	r3, r7, #10
 800438c:	f107 020a 	add.w	r2, r7, #10
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	f082 0220 	eor.w	r2, r2, #32
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	463b      	mov	r3, r7
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f107 030a 	add.w	r3, r7, #10
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
 80043c0:	e3b5      	b.n	8004b2e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	7b1b      	ldrb	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 8090 	bne.w	80044ee <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80043ce:	463b      	mov	r3, r7
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699a      	ldr	r2, [r3, #24]
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d90e      	bls.n	80043fc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	463b      	mov	r3, r7
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	e008      	b.n	800440e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004406:	463b      	mov	r3, r7
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004426:	4413      	add	r3, r2
 8004428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004438:	4413      	add	r3, r2
 800443a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800443e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d116      	bne.n	8004478 <USB_EPStartXfer+0xf2c>
 800444a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004456:	b29a      	uxth	r2, r3
 8004458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446e:	b29a      	uxth	r2, r3
 8004470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e32c      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
 8004478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800447c:	2b3e      	cmp	r3, #62	; 0x3e
 800447e:	d818      	bhi.n	80044b2 <USB_EPStartXfer+0xf66>
 8004480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800448a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <USB_EPStartXfer+0xf54>
 8004496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800449a:	3301      	adds	r3, #1
 800449c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	029b      	lsls	r3, r3, #10
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	e30f      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
 80044b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <USB_EPStartXfer+0xf86>
 80044c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044cc:	3b01      	subs	r3, #1
 80044ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29b      	uxth	r3, r3
 80044dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	e2f1      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80044ee:	463b      	mov	r3, r7
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78db      	ldrb	r3, [r3, #3]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f040 818f 	bne.w	8004818 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80044fa:	463b      	mov	r3, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d175      	bne.n	80045f0 <USB_EPStartXfer+0x10a4>
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004514:	b29b      	uxth	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800451c:	4413      	add	r3, r2
 800451e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004522:	463b      	mov	r3, r7
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	011a      	lsls	r2, r3, #4
 800452a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800452e:	4413      	add	r3, r2
 8004530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004538:	463b      	mov	r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d116      	bne.n	8004570 <USB_EPStartXfer+0x1024>
 8004542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800454e:	b29a      	uxth	r2, r3
 8004550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004566:	b29a      	uxth	r2, r3
 8004568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	e065      	b.n	800463c <USB_EPStartXfer+0x10f0>
 8004570:	463b      	mov	r3, r7
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b3e      	cmp	r3, #62	; 0x3e
 8004578:	d81a      	bhi.n	80045b0 <USB_EPStartXfer+0x1064>
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <USB_EPStartXfer+0x1052>
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	3301      	adds	r3, #1
 800459a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	e045      	b.n	800463c <USB_EPStartXfer+0x10f0>
 80045b0:	463b      	mov	r3, r7
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045bc:	463b      	mov	r3, r7
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <USB_EPStartXfer+0x1088>
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ce:	3b01      	subs	r3, #1
 80045d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d8:	b29b      	uxth	r3, r3
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e025      	b.n	800463c <USB_EPStartXfer+0x10f0>
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d120      	bne.n	800463c <USB_EPStartXfer+0x10f0>
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004612:	4413      	add	r3, r2
 8004614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	011a      	lsls	r2, r3, #4
 8004620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004624:	4413      	add	r3, r2
 8004626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800462a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	b29a      	uxth	r2, r3
 8004636:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004644:	463b      	mov	r3, r7
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d175      	bne.n	800473a <USB_EPStartXfer+0x11ee>
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004666:	4413      	add	r3, r2
 8004668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	011a      	lsls	r2, r3, #4
 8004674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004678:	4413      	add	r3, r2
 800467a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800467e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004682:	463b      	mov	r3, r7
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d116      	bne.n	80046ba <USB_EPStartXfer+0x116e>
 800468c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004698:	b29a      	uxth	r2, r3
 800469a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	e061      	b.n	800477e <USB_EPStartXfer+0x1232>
 80046ba:	463b      	mov	r3, r7
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b3e      	cmp	r3, #62	; 0x3e
 80046c2:	d81a      	bhi.n	80046fa <USB_EPStartXfer+0x11ae>
 80046c4:	463b      	mov	r3, r7
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <USB_EPStartXfer+0x119c>
 80046de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046e2:	3301      	adds	r3, #1
 80046e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	029b      	lsls	r3, r3, #10
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	e041      	b.n	800477e <USB_EPStartXfer+0x1232>
 80046fa:	463b      	mov	r3, r7
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <USB_EPStartXfer+0x11d2>
 8004714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004718:	3b01      	subs	r3, #1
 800471a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800471e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	e021      	b.n	800477e <USB_EPStartXfer+0x1232>
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d11c      	bne.n	800477e <USB_EPStartXfer+0x1232>
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004754:	4413      	add	r3, r2
 8004756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800475a:	463b      	mov	r3, r7
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	011a      	lsls	r2, r3, #4
 8004762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004766:	4413      	add	r3, r2
 8004768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800476c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004770:	463b      	mov	r3, r7
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	b29a      	uxth	r2, r3
 8004778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800477c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800477e:	463b      	mov	r3, r7
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 81a4 	beq.w	8004ad2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800479e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <USB_EPStartXfer+0x126a>
 80047aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047b6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 8187 	bne.w	8004ad2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 8180 	bne.w	8004ad2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	463b      	mov	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ec:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
 8004816:	e15c      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004818:	463b      	mov	r3, r7
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f040 8155 	bne.w	8004ace <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004824:	463b      	mov	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	463b      	mov	r3, r7
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d90e      	bls.n	8004852 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004848:	1ad2      	subs	r2, r2, r3
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	619a      	str	r2, [r3, #24]
 8004850:	e008      	b.n	8004864 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004852:	463b      	mov	r3, r7
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800485c:	463b      	mov	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004864:	463b      	mov	r3, r7
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d16f      	bne.n	800494e <USB_EPStartXfer+0x1402>
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004886:	4413      	add	r3, r2
 8004888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800488c:	463b      	mov	r3, r7
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	011a      	lsls	r2, r3, #4
 8004894:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004898:	4413      	add	r3, r2
 800489a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800489e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d116      	bne.n	80048d8 <USB_EPStartXfer+0x138c>
 80048aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e05f      	b.n	8004998 <USB_EPStartXfer+0x144c>
 80048d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048dc:	2b3e      	cmp	r3, #62	; 0x3e
 80048de:	d818      	bhi.n	8004912 <USB_EPStartXfer+0x13c6>
 80048e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <USB_EPStartXfer+0x13b4>
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fa:	3301      	adds	r3, #1
 80048fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004904:	b29b      	uxth	r3, r3
 8004906:	029b      	lsls	r3, r3, #10
 8004908:	b29a      	uxth	r2, r3
 800490a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e042      	b.n	8004998 <USB_EPStartXfer+0x144c>
 8004912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800491c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <USB_EPStartXfer+0x13e6>
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492c:	3b01      	subs	r3, #1
 800492e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29b      	uxth	r3, r3
 800493c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004944:	b29a      	uxth	r2, r3
 8004946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	e024      	b.n	8004998 <USB_EPStartXfer+0x144c>
 800494e:	463b      	mov	r3, r7
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d11f      	bne.n	8004998 <USB_EPStartXfer+0x144c>
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	4413      	add	r3, r2
 8004972:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	011a      	lsls	r2, r3, #4
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	4413      	add	r3, r2
 8004984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004988:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800498c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004990:	b29a      	uxth	r2, r3
 8004992:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a0:	463b      	mov	r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d16f      	bne.n	8004a8a <USB_EPStartXfer+0x153e>
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c2:	4413      	add	r3, r2
 80049c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049c8:	463b      	mov	r3, r7
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d4:	4413      	add	r3, r2
 80049d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <USB_EPStartXfer+0x14c8>
 80049e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f8:	801a      	strh	r2, [r3, #0]
 80049fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e05e      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
 8004a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a18:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1a:	d818      	bhi.n	8004a4e <USB_EPStartXfer+0x1502>
 8004a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <USB_EPStartXfer+0x14f0>
 8004a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a36:	3301      	adds	r3, #1
 8004a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	e041      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
 8004a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <USB_EPStartXfer+0x1522>
 8004a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	029b      	lsls	r3, r3, #10
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e023      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d11e      	bne.n	8004ad2 <USB_EPStartXfer+0x1586>
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aaa:	463b      	mov	r3, r7
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	011a      	lsls	r2, r3, #4
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	e001      	b.n	8004ad2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02e      	b.n	8004b30 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004af0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004af4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004af8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004afc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b04:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b62:	81bb      	strh	r3, [r7, #12]
 8004b64:	89bb      	ldrh	r3, [r7, #12]
 8004b66:	f083 0310 	eor.w	r3, r3, #16
 8004b6a:	81bb      	strh	r3, [r7, #12]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	89bb      	ldrh	r3, [r7, #12]
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
 8004b8c:	e01f      	b.n	8004bce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	81fb      	strh	r3, [r7, #14]
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bac:	81fb      	strh	r3, [r7, #14]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	7b1b      	ldrb	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 809d 	bne.w	8004d28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04c      	beq.n	8004c90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	823b      	strh	r3, [r7, #16]
 8004c04:	8a3b      	ldrh	r3, [r7, #16]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01b      	beq.n	8004c46 <USB_EPClearStall+0x6c>
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	81fb      	strh	r3, [r7, #14]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d06c      	beq.n	8004d28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	81bb      	strh	r3, [r7, #12]
 8004c66:	89bb      	ldrh	r3, [r7, #12]
 8004c68:	f083 0320 	eor.w	r3, r3, #32
 8004c6c:	81bb      	strh	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	e04b      	b.n	8004d28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	82fb      	strh	r3, [r7, #22]
 8004c9e:	8afb      	ldrh	r3, [r7, #22]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <USB_EPClearStall+0x106>
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	82bb      	strh	r3, [r7, #20]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	8abb      	ldrh	r3, [r7, #20]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	827b      	strh	r3, [r7, #18]
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cfe:	827b      	strh	r3, [r7, #18]
 8004d00:	8a7b      	ldrh	r3, [r7, #18]
 8004d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d06:	827b      	strh	r3, [r7, #18]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b08d      	sub	sp, #52	; 0x34
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	80fb      	strh	r3, [r7, #6]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004dcc:	88bb      	ldrh	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	005a      	lsls	r2, r3, #1
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dee:	e01e      	b.n	8004e2e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	3301      	adds	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	3302      	adds	r3, #2
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	3302      	adds	r3, #2
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	3301      	adds	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1dd      	bne.n	8004df0 <USB_WritePMA+0x3a>
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3734      	adds	r7, #52	; 0x34
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b08b      	sub	sp, #44	; 0x2c
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	460b      	mov	r3, r1
 8004e50:	80fb      	strh	r3, [r7, #6]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	005a      	lsls	r2, r3, #1
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
 8004e78:	e01b      	b.n	8004eb2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3302      	adds	r3, #2
 8004e86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e0      	bne.n	8004e7a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004eb8:	88bb      	ldrh	r3, [r7, #4]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	701a      	strb	r2, [r3, #0]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	372c      	adds	r7, #44	; 0x2c
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7c1b      	ldrb	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d115      	bne.n	8004f22 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efa:	2202      	movs	r2, #2
 8004efc:	2181      	movs	r1, #129	; 0x81
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f004 faa7 	bl	8009452 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f0e:	2202      	movs	r2, #2
 8004f10:	2101      	movs	r1, #1
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f004 fa9d 	bl	8009452 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004f20:	e012      	b.n	8004f48 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	2202      	movs	r2, #2
 8004f26:	2181      	movs	r1, #129	; 0x81
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f004 fa92 	bl	8009452 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	2202      	movs	r2, #2
 8004f38:	2101      	movs	r1, #1
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f004 fa89 	bl	8009452 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f48:	2308      	movs	r3, #8
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	2182      	movs	r1, #130	; 0x82
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f004 fa7f 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f5a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f5e:	f004 fb9f 	bl	80096a0 <USBD_static_malloc>
 8004f62:	4602      	mov	r2, r0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e026      	b.n	8004fc8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f80:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7c1b      	ldrb	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fae:	2101      	movs	r1, #1
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f004 fb3f 	bl	8009634 <USBD_LL_PrepareReceive>
 8004fb6:	e007      	b.n	8004fc8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fbe:	2340      	movs	r3, #64	; 0x40
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f004 fb36 	bl	8009634 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fe2:	2181      	movs	r1, #129	; 0x81
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f004 fa5a 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f004 fa53 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005000:	2182      	movs	r1, #130	; 0x82
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f004 fa4b 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00e      	beq.n	8005036 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005028:	4618      	mov	r0, r3
 800502a:	f004 fb45 	bl	80096b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005050:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005066:	2b00      	cmp	r3, #0
 8005068:	d039      	beq.n	80050de <USBD_CDC_Setup+0x9e>
 800506a:	2b20      	cmp	r3, #32
 800506c:	d17f      	bne.n	800516e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	88db      	ldrh	r3, [r3, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d029      	beq.n	80050ca <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	da11      	bge.n	80050a4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800508c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	88d2      	ldrh	r2, [r2, #6]
 8005092:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005094:	6939      	ldr	r1, [r7, #16]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	88db      	ldrh	r3, [r3, #6]
 800509a:	461a      	mov	r2, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 f9da 	bl	8006456 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80050a2:	e06b      	b.n	800517c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	785a      	ldrb	r2, [r3, #1]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	88db      	ldrh	r3, [r3, #6]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050ba:	6939      	ldr	r1, [r7, #16]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	88db      	ldrh	r3, [r3, #6]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f001 f9f5 	bl	80064b2 <USBD_CtlPrepareRx>
      break;
 80050c8:	e058      	b.n	800517c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	7850      	ldrb	r0, [r2, #1]
 80050d6:	2200      	movs	r2, #0
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	4798      	blx	r3
      break;
 80050dc:	e04e      	b.n	800517c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b0b      	cmp	r3, #11
 80050e4:	d02e      	beq.n	8005144 <USBD_CDC_Setup+0x104>
 80050e6:	2b0b      	cmp	r3, #11
 80050e8:	dc38      	bgt.n	800515c <USBD_CDC_Setup+0x11c>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <USBD_CDC_Setup+0xb4>
 80050ee:	2b0a      	cmp	r3, #10
 80050f0:	d014      	beq.n	800511c <USBD_CDC_Setup+0xdc>
 80050f2:	e033      	b.n	800515c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d107      	bne.n	800510e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80050fe:	f107 030c 	add.w	r3, r7, #12
 8005102:	2202      	movs	r2, #2
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 f9a5 	bl	8006456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800510c:	e02e      	b.n	800516c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f936 	bl	8006382 <USBD_CtlError>
            ret = USBD_FAIL;
 8005116:	2302      	movs	r3, #2
 8005118:	75fb      	strb	r3, [r7, #23]
          break;
 800511a:	e027      	b.n	800516c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005122:	2b03      	cmp	r3, #3
 8005124:	d107      	bne.n	8005136 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005126:	f107 030f 	add.w	r3, r7, #15
 800512a:	2201      	movs	r2, #1
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 f991 	bl	8006456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005134:	e01a      	b.n	800516c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005136:	6839      	ldr	r1, [r7, #0]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 f922 	bl	8006382 <USBD_CtlError>
            ret = USBD_FAIL;
 800513e:	2302      	movs	r3, #2
 8005140:	75fb      	strb	r3, [r7, #23]
          break;
 8005142:	e013      	b.n	800516c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514a:	2b03      	cmp	r3, #3
 800514c:	d00d      	beq.n	800516a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 f916 	bl	8006382 <USBD_CtlError>
            ret = USBD_FAIL;
 8005156:	2302      	movs	r3, #2
 8005158:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800515a:	e006      	b.n	800516a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 f90f 	bl	8006382 <USBD_CtlError>
          ret = USBD_FAIL;
 8005164:	2302      	movs	r3, #2
 8005166:	75fb      	strb	r3, [r7, #23]
          break;
 8005168:	e000      	b.n	800516c <USBD_CDC_Setup+0x12c>
          break;
 800516a:	bf00      	nop
      }
      break;
 800516c:	e006      	b.n	800517c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f906 	bl	8006382 <USBD_CtlError>
      ret = USBD_FAIL;
 8005176:	2302      	movs	r3, #2
 8005178:	75fb      	strb	r3, [r7, #23]
      break;
 800517a:	bf00      	nop
  }

  return ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005198:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051a0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d03a      	beq.n	8005222 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	331c      	adds	r3, #28
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d029      	beq.n	8005216 <USBD_CDC_DataIn+0x90>
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	331c      	adds	r3, #28
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	78f9      	ldrb	r1, [r7, #3]
 80051d6:	68b8      	ldr	r0, [r7, #8]
 80051d8:	460b      	mov	r3, r1
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4403      	add	r3, r0
 80051e2:	3338      	adds	r3, #56	; 0x38
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	fbb2 f1f3 	udiv	r1, r2, r3
 80051ea:	fb03 f301 	mul.w	r3, r3, r1
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d110      	bne.n	8005216 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	331c      	adds	r3, #28
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005208:	78f9      	ldrb	r1, [r7, #3]
 800520a:	2300      	movs	r3, #0
 800520c:	2200      	movs	r2, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f004 f9ed 	bl	80095ee <USBD_LL_Transmit>
 8005214:	e003      	b.n	800521e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f004 fa18 	bl	800967a <USBD_LL_GetRxDataSize>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005270:	4611      	mov	r1, r2
 8005272:	4798      	blx	r3

    return USBD_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005290:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <USBD_CDC_EP0_RxReady+0x46>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052a2:	2bff      	cmp	r3, #255	; 0xff
 80052a4:	d010      	beq.n	80052c8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80052b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052bc:	b292      	uxth	r2, r2
 80052be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2243      	movs	r2, #67	; 0x43
 80052e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80052e2:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000094 	.word	0x20000094

080052f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2243      	movs	r2, #67	; 0x43
 8005300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005302:	4b03      	ldr	r3, [pc, #12]	; (8005310 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000050 	.word	0x20000050

08005314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2243      	movs	r2, #67	; 0x43
 8005320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005322:	4b03      	ldr	r3, [pc, #12]	; (8005330 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200000d8 	.word	0x200000d8

08005334 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	220a      	movs	r2, #10
 8005340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005342:	4b03      	ldr	r3, [pc, #12]	; (8005350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	2000000c 	.word	0x2000000c

08005354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800535e:	2302      	movs	r3, #2
 8005360:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005394:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d017      	beq.n	8005422 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7c1b      	ldrb	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005404:	2101      	movs	r1, #1
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f004 f914 	bl	8009634 <USBD_LL_PrepareReceive>
 800540c:	e007      	b.n	800541e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	2101      	movs	r1, #1
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f004 f90b 	bl	8009634 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005440:	2302      	movs	r3, #2
 8005442:	e01a      	b.n	800547a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	79fa      	ldrb	r2, [r7, #7]
 8005470:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f003 ff78 	bl	8009368 <USBD_LL_Init>

  return USBD_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
 80054a2:	e001      	b.n	80054a8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054a4:	2302      	movs	r3, #2
 80054a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f003 ffad 	bl	800941c <USBD_LL_Start>

  return USBD_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054ec:	2302      	movs	r3, #2
 80054ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	4611      	mov	r1, r2
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	4611      	mov	r1, r2
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3

  return USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fed7 	bl	800630a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2b02      	cmp	r3, #2
 800557e:	d016      	beq.n	80055ae <USBD_LL_SetupStage+0x6a>
 8005580:	2b02      	cmp	r3, #2
 8005582:	d81c      	bhi.n	80055be <USBD_LL_SetupStage+0x7a>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <USBD_LL_SetupStage+0x4a>
 8005588:	2b01      	cmp	r3, #1
 800558a:	d008      	beq.n	800559e <USBD_LL_SetupStage+0x5a>
 800558c:	e017      	b.n	80055be <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9ca 	bl	8005930 <USBD_StdDevReq>
      break;
 800559c:	e01a      	b.n	80055d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa2c 	bl	8005a04 <USBD_StdItfReq>
      break;
 80055ac:	e012      	b.n	80055d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fa6c 	bl	8005a94 <USBD_StdEPReq>
      break;
 80055bc:	e00a      	b.n	80055d4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f003 ff85 	bl	80094dc <USBD_LL_StallEP>
      break;
 80055d2:	bf00      	nop
  }

  return USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	460b      	mov	r3, r1
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d14b      	bne.n	800568a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005600:	2b03      	cmp	r3, #3
 8005602:	d134      	bne.n	800566e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	429a      	cmp	r2, r3
 800560e:	d919      	bls.n	8005644 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005626:	429a      	cmp	r2, r3
 8005628:	d203      	bcs.n	8005632 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800562e:	b29b      	uxth	r3, r3
 8005630:	e002      	b.n	8005638 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 ff56 	bl	80064ee <USBD_CtlContinueRx>
 8005642:	e038      	b.n	80056b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005656:	2b03      	cmp	r3, #3
 8005658:	d105      	bne.n	8005666 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 ff53 	bl	8006512 <USBD_CtlSendStatus>
 800566c:	e023      	b.n	80056b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005674:	2b05      	cmp	r3, #5
 8005676:	d11e      	bne.n	80056b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005680:	2100      	movs	r1, #0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f003 ff2a 	bl	80094dc <USBD_LL_StallEP>
 8005688:	e015      	b.n	80056b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800569c:	2b03      	cmp	r3, #3
 800569e:	d108      	bne.n	80056b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	7afa      	ldrb	r2, [r7, #11]
 80056aa:	4611      	mov	r1, r2
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	4798      	blx	r3
 80056b0:	e001      	b.n	80056b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056b2:	2302      	movs	r3, #2
 80056b4:	e000      	b.n	80056b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	460b      	mov	r3, r1
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d17f      	bne.n	80057d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3314      	adds	r3, #20
 80056d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d15c      	bne.n	800579e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d915      	bls.n	800571c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fec0 	bl	800648e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800570e:	2300      	movs	r3, #0
 8005710:	2200      	movs	r2, #0
 8005712:	2100      	movs	r1, #0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f003 ff8d 	bl	8009634 <USBD_LL_PrepareReceive>
 800571a:	e04e      	b.n	80057ba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	6912      	ldr	r2, [r2, #16]
 8005724:	fbb3 f1f2 	udiv	r1, r3, r2
 8005728:	fb02 f201 	mul.w	r2, r2, r1
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11c      	bne.n	800576c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800573a:	429a      	cmp	r2, r3
 800573c:	d316      	bcc.n	800576c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005748:	429a      	cmp	r2, r3
 800574a:	d20f      	bcs.n	800576c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800574c:	2200      	movs	r2, #0
 800574e:	2100      	movs	r1, #0
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fe9c 	bl	800648e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800575e:	2300      	movs	r3, #0
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f003 ff65 	bl	8009634 <USBD_LL_PrepareReceive>
 800576a:	e026      	b.n	80057ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800577e:	2b03      	cmp	r3, #3
 8005780:	d105      	bne.n	800578e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f003 fea3 	bl	80094dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fece 	bl	8006538 <USBD_CtlReceiveStatus>
 800579c:	e00d      	b.n	80057ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d004      	beq.n	80057b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f003 fe91 	bl	80094dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d11d      	bne.n	8005800 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fe81 	bl	80054cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80057d2:	e015      	b.n	8005800 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d108      	bne.n	80057fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	7afa      	ldrb	r2, [r7, #11]
 80057f4:	4611      	mov	r1, r2
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	4798      	blx	r3
 80057fa:	e001      	b.n	8005800 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057fc:	2302      	movs	r3, #2
 80057fe:	e000      	b.n	8005802 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005812:	2340      	movs	r3, #64	; 0x40
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f003 fe1a 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f003 fe0c 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6852      	ldr	r2, [r2, #4]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	4611      	mov	r1, r2
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
  }

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2204      	movs	r2, #4
 80058c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d105      	bne.n	80058f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d10b      	bne.n	8005926 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d005      	beq.n	8005956 <USBD_StdDevReq+0x26>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d84f      	bhi.n	80059ee <USBD_StdDevReq+0xbe>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <USBD_StdDevReq+0x36>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d14b      	bne.n	80059ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
      break;
 8005964:	e048      	b.n	80059f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b09      	cmp	r3, #9
 800596c:	d839      	bhi.n	80059e2 <USBD_StdDevReq+0xb2>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <USBD_StdDevReq+0x44>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059d9 	.word	0x080059d9
 800597c:	080059e3 	.word	0x080059e3
 8005980:	080059cf 	.word	0x080059cf
 8005984:	080059e3 	.word	0x080059e3
 8005988:	080059a7 	.word	0x080059a7
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059e3 	.word	0x080059e3
 8005994:	080059bb 	.word	0x080059bb
 8005998:	080059b1 	.word	0x080059b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9dc 	bl	8005d5c <USBD_GetDescriptor>
          break;
 80059a4:	e022      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb3f 	bl	800602c <USBD_SetAddress>
          break;
 80059ae:	e01d      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fb7e 	bl	80060b4 <USBD_SetConfig>
          break;
 80059b8:	e018      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc07 	bl	80061d0 <USBD_GetConfig>
          break;
 80059c2:	e013      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc37 	bl	800623a <USBD_GetStatus>
          break;
 80059cc:	e00e      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc65 	bl	80062a0 <USBD_SetFeature>
          break;
 80059d6:	e009      	b.n	80059ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fc74 	bl	80062c8 <USBD_ClrFeature>
          break;
 80059e0:	e004      	b.n	80059ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fccc 	bl	8006382 <USBD_CtlError>
          break;
 80059ea:	bf00      	nop
      }
      break;
 80059ec:	e004      	b.n	80059f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fcc6 	bl	8006382 <USBD_CtlError>
      break;
 80059f6:	bf00      	nop
  }

  return ret;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d005      	beq.n	8005a2a <USBD_StdItfReq+0x26>
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d82e      	bhi.n	8005a80 <USBD_StdItfReq+0x7c>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <USBD_StdItfReq+0x26>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d12a      	bne.n	8005a80 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a30:	3b01      	subs	r3, #1
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d81d      	bhi.n	8005a72 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	889b      	ldrh	r3, [r3, #4]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d813      	bhi.n	8005a68 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	88db      	ldrh	r3, [r3, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <USBD_StdItfReq+0x78>
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10d      	bne.n	8005a7c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fd56 	bl	8006512 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a66:	e009      	b.n	8005a7c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fc89 	bl	8006382 <USBD_CtlError>
          break;
 8005a70:	e004      	b.n	8005a7c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fc84 	bl	8006382 <USBD_CtlError>
          break;
 8005a7a:	e000      	b.n	8005a7e <USBD_StdItfReq+0x7a>
          break;
 8005a7c:	bf00      	nop
      }
      break;
 8005a7e:	e004      	b.n	8005a8a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fc7d 	bl	8006382 <USBD_CtlError>
      break;
 8005a88:	bf00      	nop
  }

  return USBD_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	889b      	ldrh	r3, [r3, #4]
 8005aa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <USBD_StdEPReq+0x30>
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	f200 8146 	bhi.w	8005d46 <USBD_StdEPReq+0x2b2>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <USBD_StdEPReq+0x40>
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	f040 8141 	bne.w	8005d46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
      break;
 8005ad2:	e13d      	b.n	8005d50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d10a      	bne.n	8005af6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	e12d      	b.n	8005d52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d007      	beq.n	8005b0e <USBD_StdEPReq+0x7a>
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	f300 811b 	bgt.w	8005d3a <USBD_StdEPReq+0x2a6>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d072      	beq.n	8005bee <USBD_StdEPReq+0x15a>
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d03a      	beq.n	8005b82 <USBD_StdEPReq+0xee>
 8005b0c:	e115      	b.n	8005d3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d002      	beq.n	8005b1e <USBD_StdEPReq+0x8a>
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d015      	beq.n	8005b48 <USBD_StdEPReq+0xb4>
 8005b1c:	e02b      	b.n	8005b76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <USBD_StdEPReq+0xaa>
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d009      	beq.n	8005b3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f003 fcd4 	bl	80094dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b34:	2180      	movs	r1, #128	; 0x80
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f003 fcd0 	bl	80094dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b3c:	e020      	b.n	8005b80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc1e 	bl	8006382 <USBD_CtlError>
              break;
 8005b46:	e01b      	b.n	8005b80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <USBD_StdEPReq+0xda>
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d008      	beq.n	8005b6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f003 fcb7 	bl	80094dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fccf 	bl	8006512 <USBD_CtlSendStatus>

              break;
 8005b74:	e004      	b.n	8005b80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc02 	bl	8006382 <USBD_CtlError>
              break;
 8005b7e:	bf00      	nop
          }
          break;
 8005b80:	e0e0      	b.n	8005d44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d002      	beq.n	8005b92 <USBD_StdEPReq+0xfe>
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d015      	beq.n	8005bbc <USBD_StdEPReq+0x128>
 8005b90:	e026      	b.n	8005be0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <USBD_StdEPReq+0x11e>
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d009      	beq.n	8005bb2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f003 fc9a 	bl	80094dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ba8:	2180      	movs	r1, #128	; 0x80
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f003 fc96 	bl	80094dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bb0:	e01c      	b.n	8005bec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fbe4 	bl	8006382 <USBD_CtlError>
              break;
 8005bba:	e017      	b.n	8005bec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	885b      	ldrh	r3, [r3, #2]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d112      	bne.n	8005bea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f003 fca1 	bl	800951a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fc9a 	bl	8006512 <USBD_CtlSendStatus>
              }
              break;
 8005bde:	e004      	b.n	8005bea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fbcd 	bl	8006382 <USBD_CtlError>
              break;
 8005be8:	e000      	b.n	8005bec <USBD_StdEPReq+0x158>
              break;
 8005bea:	bf00      	nop
          }
          break;
 8005bec:	e0aa      	b.n	8005d44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d002      	beq.n	8005bfe <USBD_StdEPReq+0x16a>
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d032      	beq.n	8005c62 <USBD_StdEPReq+0x1ce>
 8005bfc:	e097      	b.n	8005d2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <USBD_StdEPReq+0x180>
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	2b80      	cmp	r3, #128	; 0x80
 8005c08:	d004      	beq.n	8005c14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbb8 	bl	8006382 <USBD_CtlError>
                break;
 8005c12:	e091      	b.n	8005d38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da0b      	bge.n	8005c34 <USBD_StdEPReq+0x1a0>
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	e00b      	b.n	8005c4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2202      	movs	r2, #2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fbfb 	bl	8006456 <USBD_CtlSendData>
              break;
 8005c60:	e06a      	b.n	8005d38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da11      	bge.n	8005c8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	f003 020f 	and.w	r2, r3, #15
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d117      	bne.n	8005cb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb7b 	bl	8006382 <USBD_CtlError>
                  break;
 8005c8c:	e054      	b.n	8005d38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb68 	bl	8006382 <USBD_CtlError>
                  break;
 8005cb2:	e041      	b.n	8005d38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0b      	bge.n	8005cd4 <USBD_StdEPReq+0x240>
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3310      	adds	r3, #16
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	e00b      	b.n	8005cec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	3304      	adds	r3, #4
 8005cec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <USBD_StdEPReq+0x266>
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d103      	bne.n	8005d02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e00e      	b.n	8005d20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f003 fc26 	bl	8009558 <USBD_LL_IsStallEP>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e002      	b.n	8005d20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2202      	movs	r2, #2
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb95 	bl	8006456 <USBD_CtlSendData>
              break;
 8005d2c:	e004      	b.n	8005d38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb26 	bl	8006382 <USBD_CtlError>
              break;
 8005d36:	bf00      	nop
          }
          break;
 8005d38:	e004      	b.n	8005d44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb20 	bl	8006382 <USBD_CtlError>
          break;
 8005d42:	bf00      	nop
      }
      break;
 8005d44:	e004      	b.n	8005d50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb1a 	bl	8006382 <USBD_CtlError>
      break;
 8005d4e:	bf00      	nop
  }

  return ret;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	885b      	ldrh	r3, [r3, #2]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	f200 8128 	bhi.w	8005fd2 <USBD_GetDescriptor+0x276>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <USBD_GetDescriptor+0x2c>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	08005dbd 	.word	0x08005dbd
 8005d90:	08005dfd 	.word	0x08005dfd
 8005d94:	08005fd3 	.word	0x08005fd3
 8005d98:	08005fd3 	.word	0x08005fd3
 8005d9c:	08005f73 	.word	0x08005f73
 8005da0:	08005f9f 	.word	0x08005f9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	7c12      	ldrb	r2, [r2, #16]
 8005db0:	f107 0108 	add.w	r1, r7, #8
 8005db4:	4610      	mov	r0, r2
 8005db6:	4798      	blx	r3
 8005db8:	60f8      	str	r0, [r7, #12]
      break;
 8005dba:	e112      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7c1b      	ldrb	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f107 0208 	add.w	r2, r7, #8
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	2202      	movs	r2, #2
 8005ddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dde:	e100      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f107 0208 	add.w	r2, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e0f2      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	885b      	ldrh	r3, [r3, #2]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	f200 80ac 	bhi.w	8005f60 <USBD_GetDescriptor+0x204>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USBD_GetDescriptor+0xb4>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e29 	.word	0x08005e29
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005ec5 	.word	0x08005ec5
 8005e20:	08005ef9 	.word	0x08005ef9
 8005e24:	08005f2d 	.word	0x08005f2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	7c12      	ldrb	r2, [r2, #16]
 8005e40:	f107 0108 	add.w	r1, r7, #8
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3
 8005e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4a:	e091      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa97 	bl	8006382 <USBD_CtlError>
            err++;
 8005e54:	7afb      	ldrb	r3, [r7, #11]
 8005e56:	3301      	adds	r3, #1
 8005e58:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5a:	e089      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	7c12      	ldrb	r2, [r2, #16]
 8005e74:	f107 0108 	add.w	r1, r7, #8
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
 8005e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e7e:	e077      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa7d 	bl	8006382 <USBD_CtlError>
            err++;
 8005e88:	7afb      	ldrb	r3, [r7, #11]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e8e:	e06f      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	7c12      	ldrb	r2, [r2, #16]
 8005ea8:	f107 0108 	add.w	r1, r7, #8
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
 8005eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eb2:	e05d      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa63 	bl	8006382 <USBD_CtlError>
            err++;
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ec2:	e055      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7c12      	ldrb	r2, [r2, #16]
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ee6:	e043      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa49 	bl	8006382 <USBD_CtlError>
            err++;
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ef6:	e03b      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	7c12      	ldrb	r2, [r2, #16]
 8005f10:	f107 0108 	add.w	r1, r7, #8
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
 8005f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f1a:	e029      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa2f 	bl	8006382 <USBD_CtlError>
            err++;
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	3301      	adds	r3, #1
 8005f28:	72fb      	strb	r3, [r7, #11]
          break;
 8005f2a:	e021      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7c12      	ldrb	r2, [r2, #16]
 8005f44:	f107 0108 	add.w	r1, r7, #8
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f4e:	e00f      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa15 	bl	8006382 <USBD_CtlError>
            err++;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f5e:	e007      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa0d 	bl	8006382 <USBD_CtlError>
          err++;
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005f6e:	e038      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
 8005f70:	e037      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7c1b      	ldrb	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	f107 0208 	add.w	r2, r7, #8
 8005f86:	4610      	mov	r0, r2
 8005f88:	4798      	blx	r3
 8005f8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f8c:	e029      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f9f6 	bl	8006382 <USBD_CtlError>
        err++;
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f9c:	e021      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7c1b      	ldrb	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fc0:	e00f      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f9dc 	bl	8006382 <USBD_CtlError>
        err++;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	72fb      	strb	r3, [r7, #11]
      break;
 8005fd0:	e007      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f9d4 	bl	8006382 <USBD_CtlError>
      err++;
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	72fb      	strb	r3, [r7, #11]
      break;
 8005fe0:	bf00      	nop
  }

  if (err != 0U)
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11c      	bne.n	8006022 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005fe8:	893b      	ldrh	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <USBD_GetDescriptor+0x2b6>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88da      	ldrh	r2, [r3, #6]
 8005ffa:	893b      	ldrh	r3, [r7, #8]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bf28      	it	cs
 8006000:	4613      	movcs	r3, r2
 8006002:	b29b      	uxth	r3, r3
 8006004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006006:	893b      	ldrh	r3, [r7, #8]
 8006008:	461a      	mov	r2, r3
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa22 	bl	8006456 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa79 	bl	8006512 <USBD_CtlSendStatus>
 8006020:	e000      	b.n	8006024 <USBD_GetDescriptor+0x2c8>
    return;
 8006022:	bf00      	nop
    }
  }
}
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop

0800602c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	889b      	ldrh	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d130      	bne.n	80060a0 <USBD_SetAddress+0x74>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	88db      	ldrh	r3, [r3, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d12c      	bne.n	80060a0 <USBD_SetAddress+0x74>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	2b7f      	cmp	r3, #127	; 0x7f
 800604c:	d828      	bhi.n	80060a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	885b      	ldrh	r3, [r3, #2]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006060:	2b03      	cmp	r3, #3
 8006062:	d104      	bne.n	800606e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f98b 	bl	8006382 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606c:	e01d      	b.n	80060aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7bfa      	ldrb	r2, [r7, #15]
 8006072:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f003 fa98 	bl	80095b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fa46 	bl	8006512 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006094:	e009      	b.n	80060aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	e004      	b.n	80060aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f96d 	bl	8006382 <USBD_CtlError>
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	885b      	ldrh	r3, [r3, #2]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	4b41      	ldr	r3, [pc, #260]	; (80061cc <USBD_SetConfig+0x118>)
 80060c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060c8:	4b40      	ldr	r3, [pc, #256]	; (80061cc <USBD_SetConfig+0x118>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d904      	bls.n	80060da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f955 	bl	8006382 <USBD_CtlError>
 80060d8:	e075      	b.n	80061c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d002      	beq.n	80060ea <USBD_SetConfig+0x36>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d023      	beq.n	8006130 <USBD_SetConfig+0x7c>
 80060e8:	e062      	b.n	80061b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80060ea:	4b38      	ldr	r3, [pc, #224]	; (80061cc <USBD_SetConfig+0x118>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01a      	beq.n	8006128 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <USBD_SetConfig+0x118>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2203      	movs	r2, #3
 8006100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006104:	4b31      	ldr	r3, [pc, #196]	; (80061cc <USBD_SetConfig+0x118>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff f9e8 	bl	80054e0 <USBD_SetClassConfig>
 8006110:	4603      	mov	r3, r0
 8006112:	2b02      	cmp	r3, #2
 8006114:	d104      	bne.n	8006120 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f932 	bl	8006382 <USBD_CtlError>
            return;
 800611e:	e052      	b.n	80061c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f9f6 	bl	8006512 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006126:	e04e      	b.n	80061c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f9f2 	bl	8006512 <USBD_CtlSendStatus>
        break;
 800612e:	e04a      	b.n	80061c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006130:	4b26      	ldr	r3, [pc, #152]	; (80061cc <USBD_SetConfig+0x118>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d112      	bne.n	800615e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006140:	4b22      	ldr	r3, [pc, #136]	; (80061cc <USBD_SetConfig+0x118>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <USBD_SetConfig+0x118>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff f9e4 	bl	800551e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9db 	bl	8006512 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800615c:	e033      	b.n	80061c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <USBD_SetConfig+0x118>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d01d      	beq.n	80061a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff f9d2 	bl	800551e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <USBD_SetConfig+0x118>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <USBD_SetConfig+0x118>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff f9a8 	bl	80054e0 <USBD_SetClassConfig>
 8006190:	4603      	mov	r3, r0
 8006192:	2b02      	cmp	r3, #2
 8006194:	d104      	bne.n	80061a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8f2 	bl	8006382 <USBD_CtlError>
            return;
 800619e:	e012      	b.n	80061c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f9b6 	bl	8006512 <USBD_CtlSendStatus>
        break;
 80061a6:	e00e      	b.n	80061c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f9b2 	bl	8006512 <USBD_CtlSendStatus>
        break;
 80061ae:	e00a      	b.n	80061c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8e5 	bl	8006382 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <USBD_SetConfig+0x118>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff f9ad 	bl	800551e <USBD_ClrClassConfig>
        break;
 80061c4:	bf00      	nop
    }
  }
}
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	2000019c 	.word	0x2000019c

080061d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d004      	beq.n	80061ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8cc 	bl	8006382 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80061ea:	e022      	b.n	8006232 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	dc02      	bgt.n	80061fc <USBD_GetConfig+0x2c>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc03      	bgt.n	8006202 <USBD_GetConfig+0x32>
 80061fa:	e015      	b.n	8006228 <USBD_GetConfig+0x58>
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d00b      	beq.n	8006218 <USBD_GetConfig+0x48>
 8006200:	e012      	b.n	8006228 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3308      	adds	r3, #8
 800620c:	2201      	movs	r2, #1
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f920 	bl	8006456 <USBD_CtlSendData>
        break;
 8006216:	e00c      	b.n	8006232 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2201      	movs	r2, #1
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f918 	bl	8006456 <USBD_CtlSendData>
        break;
 8006226:	e004      	b.n	8006232 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8a9 	bl	8006382 <USBD_CtlError>
        break;
 8006230:	bf00      	nop
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624a:	3b01      	subs	r3, #1
 800624c:	2b02      	cmp	r3, #2
 800624e:	d81e      	bhi.n	800628e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	88db      	ldrh	r3, [r3, #6]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d004      	beq.n	8006262 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f891 	bl	8006382 <USBD_CtlError>
        break;
 8006260:	e01a      	b.n	8006298 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f043 0202 	orr.w	r2, r3, #2
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	330c      	adds	r3, #12
 8006282:	2202      	movs	r2, #2
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8e5 	bl	8006456 <USBD_CtlSendData>
      break;
 800628c:	e004      	b.n	8006298 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f876 	bl	8006382 <USBD_CtlError>
      break;
 8006296:	bf00      	nop
  }
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	885b      	ldrh	r3, [r3, #2]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d106      	bne.n	80062c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f929 	bl	8006512 <USBD_CtlSendStatus>
  }
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	3b01      	subs	r3, #1
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d80b      	bhi.n	80062f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10c      	bne.n	8006300 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f90f 	bl	8006512 <USBD_CtlSendStatus>
      }
      break;
 80062f4:	e004      	b.n	8006300 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f842 	bl	8006382 <USBD_CtlError>
      break;
 80062fe:	e000      	b.n	8006302 <USBD_ClrFeature+0x3a>
      break;
 8006300:	bf00      	nop
  }
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781a      	ldrb	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785a      	ldrb	r2, [r3, #1]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3302      	adds	r3, #2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	3303      	adds	r3, #3
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	b29b      	uxth	r3, r3
 8006338:	4413      	add	r3, r2
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	3304      	adds	r3, #4
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	b29a      	uxth	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3305      	adds	r3, #5
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	b29b      	uxth	r3, r3
 8006354:	4413      	add	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	3306      	adds	r3, #6
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	3307      	adds	r3, #7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	b29b      	uxth	r3, r3
 8006370:	4413      	add	r3, r2
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	80da      	strh	r2, [r3, #6]

}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f003 f8a4 	bl	80094dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006394:	2100      	movs	r1, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f003 f8a0 	bl	80094dc <USBD_LL_StallEP>
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d032      	beq.n	8006420 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f834 	bl	8006428 <USBD_GetLen>
 80063c0:	4603      	mov	r3, r0
 80063c2:	3301      	adds	r3, #1
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	75fa      	strb	r2, [r7, #23]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4413      	add	r3, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	75fa      	strb	r2, [r7, #23]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4413      	add	r3, r2
 80063ec:	2203      	movs	r2, #3
 80063ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80063f0:	e012      	b.n	8006418 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	60fa      	str	r2, [r7, #12]
 80063f8:	7dfa      	ldrb	r2, [r7, #23]
 80063fa:	1c51      	adds	r1, r2, #1
 80063fc:	75f9      	strb	r1, [r7, #23]
 80063fe:	4611      	mov	r1, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	440a      	add	r2, r1
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	75fa      	strb	r2, [r7, #23]
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4413      	add	r3, r2
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e8      	bne.n	80063f2 <USBD_GetString+0x4e>
    }
  }
}
 8006420:	bf00      	nop
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006434:	e005      	b.n	8006442 <USBD_GetLen+0x1a>
  {
    len++;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	3301      	adds	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3301      	adds	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f5      	bne.n	8006436 <USBD_GetLen+0xe>
  }

  return len;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr

08006456 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	4613      	mov	r3, r2
 8006462:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2202      	movs	r2, #2
 8006468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800646c:	88fa      	ldrh	r2, [r7, #6]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f003 f8b5 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	2100      	movs	r1, #0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f003 f8a3 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	4613      	mov	r3, r2
 80064be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2203      	movs	r2, #3
 80064c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	2100      	movs	r1, #0
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f003 f8a8 	bl	8009634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	4613      	mov	r3, r2
 80064fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f003 f896 	bl	8009634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006522:	2300      	movs	r3, #0
 8006524:	2200      	movs	r2, #0
 8006526:	2100      	movs	r1, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f003 f860 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2205      	movs	r2, #5
 8006544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006548:	2300      	movs	r3, #0
 800654a:	2200      	movs	r2, #0
 800654c:	2100      	movs	r1, #0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f003 f870 	bl	8009634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006566:	f3ef 8305 	mrs	r3, IPSR
 800656a:	60bb      	str	r3, [r7, #8]
  return(result);
 800656c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10f      	bne.n	8006592 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	607b      	str	r3, [r7, #4]
  return(result);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <osKernelInitialize+0x32>
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <osKernelInitialize+0x60>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d109      	bne.n	800659a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	603b      	str	r3, [r7, #0]
  return(result);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006592:	f06f 0305 	mvn.w	r3, #5
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e00c      	b.n	80065b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <osKernelInitialize+0x60>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80065a2:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <osKernelInitialize+0x60>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e002      	b.n	80065b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065b4:	68fb      	ldr	r3, [r7, #12]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	200001a0 	.word	0x200001a0

080065c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ca:	f3ef 8305 	mrs	r3, IPSR
 80065ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80065d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10f      	bne.n	80065f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d6:	f3ef 8310 	mrs	r3, PRIMASK
 80065da:	607b      	str	r3, [r7, #4]
  return(result);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <osKernelStart+0x32>
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <osKernelStart+0x64>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d109      	bne.n	80065fe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	603b      	str	r3, [r7, #0]
  return(result);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80065f6:	f06f 0305 	mvn.w	r3, #5
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e00e      	b.n	800661c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <osKernelStart+0x64>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <osKernelStart+0x64>)
 8006608:	2202      	movs	r2, #2
 800660a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800660c:	f001 f816 	bl	800763c <vTaskStartScheduler>
      stat = osOK;
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e002      	b.n	800661c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800661a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200001a0 	.word	0x200001a0

0800662c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b092      	sub	sp, #72	; 0x48
 8006630:	af04      	add	r7, sp, #16
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663c:	f3ef 8305 	mrs	r3, IPSR
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8094 	bne.w	8006772 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664a:	f3ef 8310 	mrs	r3, PRIMASK
 800664e:	623b      	str	r3, [r7, #32]
  return(result);
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 808d 	bne.w	8006772 <osThreadNew+0x146>
 8006658:	4b48      	ldr	r3, [pc, #288]	; (800677c <osThreadNew+0x150>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d106      	bne.n	800666e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006660:	f3ef 8311 	mrs	r3, BASEPRI
 8006664:	61fb      	str	r3, [r7, #28]
  return(result);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8082 	bne.w	8006772 <osThreadNew+0x146>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d07e      	beq.n	8006772 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006678:	2318      	movs	r3, #24
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800667c:	2300      	movs	r3, #0
 800667e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006680:	f107 031b 	add.w	r3, r7, #27
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d045      	beq.n	800671e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <osThreadNew+0x74>
        name = attr->name;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <osThreadNew+0x9a>
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	2b38      	cmp	r3, #56	; 0x38
 80066b8:	d805      	bhi.n	80066c6 <osThreadNew+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <osThreadNew+0x9e>
        return (NULL);
 80066c6:	2300      	movs	r3, #0
 80066c8:	e054      	b.n	8006774 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <osThreadNew+0xd4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b5b      	cmp	r3, #91	; 0x5b
 80066e8:	d90a      	bls.n	8006700 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d006      	beq.n	8006700 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osThreadNew+0xd4>
        mem = 1;
 80066fa:	2301      	movs	r3, #1
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fe:	e010      	b.n	8006722 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <osThreadNew+0xf6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d108      	bne.n	8006722 <osThreadNew+0xf6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <osThreadNew+0xf6>
          mem = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
 800671c:	e001      	b.n	8006722 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	2b01      	cmp	r3, #1
 8006726:	d110      	bne.n	800674a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006730:	9202      	str	r2, [sp, #8]
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fde4 	bl	800730c <xTaskCreateStatic>
 8006744:	4603      	mov	r3, r0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e013      	b.n	8006772 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d110      	bne.n	8006772 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	b29a      	uxth	r2, r3
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fe2e 	bl	80073c4 <xTaskCreate>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d001      	beq.n	8006772 <osThreadNew+0x146>
          hTask = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006772:	697b      	ldr	r3, [r7, #20]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3738      	adds	r7, #56	; 0x38
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	200001a0 	.word	0x200001a0

08006780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a06      	ldr	r2, [pc, #24]	; (80067a8 <vApplicationGetIdleTaskMemory+0x28>)
 8006790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4a05      	ldr	r2, [pc, #20]	; (80067ac <vApplicationGetIdleTaskMemory+0x2c>)
 8006796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2280      	movs	r2, #128	; 0x80
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	200001a4 	.word	0x200001a4
 80067ac:	20000200 	.word	0x20000200

080067b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a07      	ldr	r2, [pc, #28]	; (80067dc <vApplicationGetTimerTaskMemory+0x2c>)
 80067c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a06      	ldr	r2, [pc, #24]	; (80067e0 <vApplicationGetTimerTaskMemory+0x30>)
 80067c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ce:	601a      	str	r2, [r3, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000400 	.word	0x20000400
 80067e0:	2000045c 	.word	0x2000045c

080067e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 0208 	add.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f103 0208 	add.w	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f103 0208 	add.w	r2, r3, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006896:	d103      	bne.n	80068a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e00c      	b.n	80068ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3308      	adds	r3, #8
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e002      	b.n	80068ae <vListInsert+0x2e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d2f6      	bcs.n	80068a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6852      	ldr	r2, [r2, #4]
 8006910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	d103      	bne.n	8006924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	1e5a      	subs	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
	...

08006944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800696e:	f001 ff95 	bl	800889c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	441a      	add	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	3b01      	subs	r3, #1
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	441a      	add	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22ff      	movs	r2, #255	; 0xff
 80069b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	22ff      	movs	r2, #255	; 0xff
 80069ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d114      	bne.n	80069ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01a      	beq.n	8006a02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3310      	adds	r3, #16
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f8bd 	bl	8007b50 <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <xQueueGenericReset+0xcc>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	e009      	b.n	8006a02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3310      	adds	r3, #16
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fef6 	bl	80067e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fef1 	bl	80067e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a02:	f001 ff7b 	bl	80088fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a06:	2301      	movs	r3, #1
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08e      	sub	sp, #56	; 0x38
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <xQueueGenericCreateStatic+0x52>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <xQueueGenericCreateStatic+0x56>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericCreateStatic+0x58>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	623b      	str	r3, [r7, #32]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <xQueueGenericCreateStatic+0x7e>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <xQueueGenericCreateStatic+0x82>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueGenericCreateStatic+0x84>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	61fb      	str	r3, [r7, #28]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ab2:	2350      	movs	r3, #80	; 0x50
 8006ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b50      	cmp	r3, #80	; 0x50
 8006aba:	d00a      	beq.n	8006ad2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	61bb      	str	r3, [r7, #24]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ae4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f805 	bl	8006b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b30:	2101      	movs	r1, #1
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f7ff ff06 	bl	8006944 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b56:	2300      	movs	r3, #0
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xQueueGenericSend+0x32>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <xQueueGenericSend+0x40>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <xQueueGenericSend+0x44>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <xQueueGenericSend+0x46>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <xQueueGenericSend+0x60>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d103      	bne.n	8006bb6 <xQueueGenericSend+0x6e>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <xQueueGenericSend+0x72>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueGenericSend+0x74>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	623b      	str	r3, [r7, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd6:	f001 f97d 	bl	8007ed4 <xTaskGetSchedulerState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <xQueueGenericSend+0x9e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <xQueueGenericSend+0xa2>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <xQueueGenericSend+0xa4>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xQueueGenericSend+0xbe>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	61fb      	str	r3, [r7, #28]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c06:	f001 fe49 	bl	800889c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <xQueueGenericSend+0xd4>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d129      	bne.n	8006c70 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c22:	f000 fa07 	bl	8007034 <prvCopyDataToQueue>
 8006c26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d010      	beq.n	8006c52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 ff8b 	bl	8007b50 <xTaskRemoveFromEventList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c40:	4b3f      	ldr	r3, [pc, #252]	; (8006d40 <xQueueGenericSend+0x1f8>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	e00a      	b.n	8006c68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c58:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <xQueueGenericSend+0x1f8>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c68:	f001 fe48 	bl	80088fc <vPortExitCritical>
				return pdPASS;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e063      	b.n	8006d38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c76:	f001 fe41 	bl	80088fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e05c      	b.n	8006d38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c84:	f107 0314 	add.w	r3, r7, #20
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 ffc5 	bl	8007c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c92:	f001 fe33 	bl	80088fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c96:	f000 fd37 	bl	8007708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c9a:	f001 fdff 	bl	800889c <vPortEnterCritical>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006caa:	d103      	bne.n	8006cb4 <xQueueGenericSend+0x16c>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cba:	b25b      	sxtb	r3, r3
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc0:	d103      	bne.n	8006cca <xQueueGenericSend+0x182>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cca:	f001 fe17 	bl	80088fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cce:	1d3a      	adds	r2, r7, #4
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ffb4 	bl	8007c44 <xTaskCheckForTimeOut>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d124      	bne.n	8006d2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce4:	f000 fa9e 	bl	8007224 <prvIsQueueFull>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 feda 	bl	8007ab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfe:	f000 fa29 	bl	8007154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d02:	f000 fd0f 	bl	8007724 <xTaskResumeAll>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f47f af7c 	bne.w	8006c06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <xQueueGenericSend+0x1f8>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	e772      	b.n	8006c06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d22:	f000 fa17 	bl	8007154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d26:	f000 fcfd 	bl	8007724 <xTaskResumeAll>
 8006d2a:	e76c      	b.n	8006c06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d2e:	f000 fa11 	bl	8007154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d32:	f000 fcf7 	bl	8007724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d36:	2300      	movs	r3, #0
		}
	}
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3738      	adds	r7, #56	; 0x38
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08e      	sub	sp, #56	; 0x38
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <xQueueGenericSendFromISR+0x3c>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <xQueueGenericSendFromISR+0x40>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <xQueueGenericSendFromISR+0x42>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	623b      	str	r3, [r7, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d103      	bne.n	8006dae <xQueueGenericSendFromISR+0x6a>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <xQueueGenericSendFromISR+0x6e>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <xQueueGenericSendFromISR+0x70>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	61fb      	str	r3, [r7, #28]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dce:	f001 fe27 	bl	8008a20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	61ba      	str	r2, [r7, #24]
 8006de8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d302      	bcc.n	8006e00 <xQueueGenericSendFromISR+0xbc>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d12c      	bne.n	8006e5a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e10:	f000 f910 	bl	8007034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1c:	d112      	bne.n	8006e44 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fe90 	bl	8007b50 <xTaskRemoveFromEventList>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00e      	beq.n	8006e54 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e007      	b.n	8006e54 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e48:	3301      	adds	r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	b25a      	sxtb	r2, r3
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e54:	2301      	movs	r3, #1
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e58:	e001      	b.n	8006e5e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3738      	adds	r7, #56	; 0x38
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xQueueReceive+0x30>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	623b      	str	r3, [r7, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <xQueueReceive+0x3e>
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <xQueueReceive+0x42>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueReceive+0x44>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueReceive+0x5e>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	61fb      	str	r3, [r7, #28]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed2:	f000 ffff 	bl	8007ed4 <xTaskGetSchedulerState>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <xQueueReceive+0x6e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <xQueueReceive+0x72>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <xQueueReceive+0x74>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xQueueReceive+0x8e>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	61bb      	str	r3, [r7, #24]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f02:	f001 fccb 	bl	800889c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01f      	beq.n	8006f52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f16:	f000 f8f7 	bl	8007108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00f      	beq.n	8006f4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fe0e 	bl	8007b50 <xTaskRemoveFromEventList>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f3a:	4b3d      	ldr	r3, [pc, #244]	; (8007030 <xQueueReceive+0x1bc>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f4a:	f001 fcd7 	bl	80088fc <vPortExitCritical>
				return pdPASS;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e069      	b.n	8007026 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f58:	f001 fcd0 	bl	80088fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e062      	b.n	8007026 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f66:	f107 0310 	add.w	r3, r7, #16
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fe54 	bl	8007c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f74:	f001 fcc2 	bl	80088fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f78:	f000 fbc6 	bl	8007708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f7c:	f001 fc8e 	bl	800889c <vPortEnterCritical>
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8c:	d103      	bne.n	8006f96 <xQueueReceive+0x122>
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa2:	d103      	bne.n	8006fac <xQueueReceive+0x138>
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fac:	f001 fca6 	bl	80088fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fb0:	1d3a      	adds	r2, r7, #4
 8006fb2:	f107 0310 	add.w	r3, r7, #16
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fe43 	bl	8007c44 <xTaskCheckForTimeOut>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d123      	bne.n	800700c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc6:	f000 f917 	bl	80071f8 <prvIsQueueEmpty>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	3324      	adds	r3, #36	; 0x24
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fd69 	bl	8007ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe0:	f000 f8b8 	bl	8007154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fe4:	f000 fb9e 	bl	8007724 <xTaskResumeAll>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d189      	bne.n	8006f02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <xQueueReceive+0x1bc>)
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	e780      	b.n	8006f02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007002:	f000 f8a7 	bl	8007154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007006:	f000 fb8d 	bl	8007724 <xTaskResumeAll>
 800700a:	e77a      	b.n	8006f02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800700c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700e:	f000 f8a1 	bl	8007154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007012:	f000 fb87 	bl	8007724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007018:	f000 f8ee 	bl	80071f8 <prvIsQueueEmpty>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f43f af6f 	beq.w	8006f02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007026:	4618      	mov	r0, r3
 8007028:	3730      	adds	r7, #48	; 0x30
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10d      	bne.n	800706e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d14d      	bne.n	80070f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 ff56 	bl	8007f10 <xTaskPriorityDisinherit>
 8007064:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	e043      	b.n	80070f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d119      	bne.n	80070a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6898      	ldr	r0, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	461a      	mov	r2, r3
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	f002 fb7e 	bl	8009780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d32b      	bcc.n	80070f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	e026      	b.n	80070f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68d8      	ldr	r0, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	461a      	mov	r2, r3
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	f002 fb64 	bl	8009780 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	425b      	negs	r3, r3
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d207      	bcs.n	80070e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	425b      	negs	r3, r3
 80070de:	441a      	add	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d105      	bne.n	80070f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070fe:	697b      	ldr	r3, [r7, #20]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d018      	beq.n	800714c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	441a      	add	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d303      	bcc.n	800713c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68d9      	ldr	r1, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	461a      	mov	r2, r3
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	f002 fb1a 	bl	8009780 <memcpy>
	}
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800715c:	f001 fb9e 	bl	800889c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007168:	e011      	b.n	800718e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d012      	beq.n	8007198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3324      	adds	r3, #36	; 0x24
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fcea 	bl	8007b50 <xTaskRemoveFromEventList>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007182:	f000 fdc1 	bl	8007d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	3b01      	subs	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800718e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dce9      	bgt.n	800716a <prvUnlockQueue+0x16>
 8007196:	e000      	b.n	800719a <prvUnlockQueue+0x46>
					break;
 8007198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071a2:	f001 fbab 	bl	80088fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071a6:	f001 fb79 	bl	800889c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071b2:	e011      	b.n	80071d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3310      	adds	r3, #16
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fcc5 	bl	8007b50 <xTaskRemoveFromEventList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071cc:	f000 fd9c 	bl	8007d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dce9      	bgt.n	80071b4 <prvUnlockQueue+0x60>
 80071e0:	e000      	b.n	80071e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22ff      	movs	r2, #255	; 0xff
 80071e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071ec:	f001 fb86 	bl	80088fc <vPortExitCritical>
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007200:	f001 fb4c 	bl	800889c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e001      	b.n	8007216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007216:	f001 fb71 	bl	80088fc <vPortExitCritical>

	return xReturn;
 800721a:	68fb      	ldr	r3, [r7, #12]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800722c:	f001 fb36 	bl	800889c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	429a      	cmp	r2, r3
 800723a:	d102      	bne.n	8007242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e001      	b.n	8007246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007246:	f001 fb59 	bl	80088fc <vPortExitCritical>

	return xReturn;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e014      	b.n	800728e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10b      	bne.n	8007288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007270:	490b      	ldr	r1, [pc, #44]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007286:	e006      	b.n	8007296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b07      	cmp	r3, #7
 8007292:	d9e7      	bls.n	8007264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr
 80072a0:	20001cd0 	.word	0x20001cd0

080072a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072b4:	f001 faf2 	bl	800889c <vPortEnterCritical>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d103      	bne.n	80072ce <vQueueWaitForMessageRestricted+0x2a>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072da:	d103      	bne.n	80072e4 <vQueueWaitForMessageRestricted+0x40>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e4:	f001 fb0a 	bl	80088fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3324      	adds	r3, #36	; 0x24
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fbfd 	bl	8007af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072fe:	6978      	ldr	r0, [r7, #20]
 8007300:	f7ff ff28 	bl	8007154 <prvUnlockQueue>
	}
 8007304:	bf00      	nop
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	623b      	str	r3, [r7, #32]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xTaskCreateStatic+0x46>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61fb      	str	r3, [r7, #28]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007352:	235c      	movs	r3, #92	; 0x5c
 8007354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b5c      	cmp	r3, #92	; 0x5c
 800735a:	d00a      	beq.n	8007372 <xTaskCreateStatic+0x66>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	61bb      	str	r3, [r7, #24]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01e      	beq.n	80073b6 <xTaskCreateStatic+0xaa>
 8007378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01b      	beq.n	80073b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007386:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007390:	2300      	movs	r3, #0
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	f107 0314 	add.w	r3, r7, #20
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f850 	bl	800744e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073b0:	f000 f8d4 	bl	800755c <prvAddNewTaskToReadyList>
 80073b4:	e001      	b.n	80073ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073ba:	697b      	ldr	r3, [r7, #20]
	}
 80073bc:	4618      	mov	r0, r3
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	; 0x30
 80073c8:	af04      	add	r7, sp, #16
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fb5f 	bl	8008a9c <pvPortMalloc>
 80073de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00e      	beq.n	8007404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073e6:	205c      	movs	r0, #92	; 0x5c
 80073e8:	f001 fb58 	bl	8008a9c <pvPortMalloc>
 80073ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
 80073fa:	e005      	b.n	8007408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073fc:	6978      	ldr	r0, [r7, #20]
 80073fe:	f001 fc11 	bl	8008c24 <vPortFree>
 8007402:	e001      	b.n	8007408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d017      	beq.n	800743e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007416:	88fa      	ldrh	r2, [r7, #6]
 8007418:	2300      	movs	r3, #0
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f80e 	bl	800744e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007432:	69f8      	ldr	r0, [r7, #28]
 8007434:	f000 f892 	bl	800755c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	e002      	b.n	8007444 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007442:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007444:	69bb      	ldr	r3, [r7, #24]
	}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b088      	sub	sp, #32
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	461a      	mov	r2, r3
 8007466:	21a5      	movs	r1, #165	; 0xa5
 8007468:	f002 f998 	bl	800979c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007476:	3b01      	subs	r3, #1
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	617b      	str	r3, [r7, #20]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	e012      	b.n	80074d2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	3334      	adds	r3, #52	; 0x34
 80074bc:	460a      	mov	r2, r1
 80074be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d9e9      	bls.n	80074ac <prvInitialiseNewTask+0x5e>
 80074d8:	e000      	b.n	80074dc <prvInitialiseNewTask+0x8e>
		{
			break;
 80074da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2b37      	cmp	r3, #55	; 0x37
 80074e8:	d901      	bls.n	80074ee <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074ea:	2337      	movs	r3, #55	; 0x37
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2200      	movs	r2, #0
 80074fe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	3304      	adds	r3, #4
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff f98c 	bl	8006822 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	3318      	adds	r3, #24
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff f987 	bl	8006822 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007518:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2200      	movs	r2, #0
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f001 f8bb 	bl	80086b8 <pxPortInitialiseStack>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007564:	f001 f99a 	bl	800889c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007568:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <prvAddNewTaskToReadyList+0xc4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	4a2c      	ldr	r2, [pc, #176]	; (8007620 <prvAddNewTaskToReadyList+0xc4>)
 8007570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007572:	4b2c      	ldr	r3, [pc, #176]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800757a:	4a2a      	ldr	r2, [pc, #168]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007580:	4b27      	ldr	r3, [pc, #156]	; (8007620 <prvAddNewTaskToReadyList+0xc4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d110      	bne.n	80075aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007588:	f000 fbe2 	bl	8007d50 <prvInitialiseTaskLists>
 800758c:	e00d      	b.n	80075aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800758e:	4b26      	ldr	r3, [pc, #152]	; (8007628 <prvAddNewTaskToReadyList+0xcc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007596:	4b23      	ldr	r3, [pc, #140]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d802      	bhi.n	80075aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075a4:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075aa:	4b20      	ldr	r3, [pc, #128]	; (800762c <prvAddNewTaskToReadyList+0xd0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	4a1e      	ldr	r2, [pc, #120]	; (800762c <prvAddNewTaskToReadyList+0xd0>)
 80075b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075b4:	4b1d      	ldr	r3, [pc, #116]	; (800762c <prvAddNewTaskToReadyList+0xd0>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <prvAddNewTaskToReadyList+0xd4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d903      	bls.n	80075d0 <prvAddNewTaskToReadyList+0x74>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <prvAddNewTaskToReadyList+0xd4>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <prvAddNewTaskToReadyList+0xd8>)
 80075de:	441a      	add	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7ff f927 	bl	800683a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075ec:	f001 f986 	bl	80088fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <prvAddNewTaskToReadyList+0xcc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00e      	beq.n	8007616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	429a      	cmp	r2, r3
 8007604:	d207      	bcs.n	8007616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvAddNewTaskToReadyList+0xdc>)
 8007608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000d30 	.word	0x20000d30
 8007624:	2000085c 	.word	0x2000085c
 8007628:	20000d3c 	.word	0x20000d3c
 800762c:	20000d4c 	.word	0x20000d4c
 8007630:	20000d38 	.word	0x20000d38
 8007634:	20000860 	.word	0x20000860
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800764a:	463a      	mov	r2, r7
 800764c:	1d39      	adds	r1, r7, #4
 800764e:	f107 0308 	add.w	r3, r7, #8
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f894 	bl	8006780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	9202      	str	r2, [sp, #8]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	2300      	movs	r3, #0
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	2300      	movs	r3, #0
 8007668:	460a      	mov	r2, r1
 800766a:	4921      	ldr	r1, [pc, #132]	; (80076f0 <vTaskStartScheduler+0xb4>)
 800766c:	4821      	ldr	r0, [pc, #132]	; (80076f4 <vTaskStartScheduler+0xb8>)
 800766e:	f7ff fe4d 	bl	800730c <xTaskCreateStatic>
 8007672:	4603      	mov	r3, r0
 8007674:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <vTaskStartScheduler+0xbc>)
 8007676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007678:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <vTaskStartScheduler+0xbc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007680:	2301      	movs	r3, #1
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e001      	b.n	800768a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d102      	bne.n	8007696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007690:	f000 fd00 	bl	8008094 <xTimerCreateTimerTask>
 8007694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d116      	bne.n	80076ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <vTaskStartScheduler+0xc0>)
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <vTaskStartScheduler+0xc4>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <vTaskStartScheduler+0xc8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076c4:	f001 f878 	bl	80087b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076c8:	e00e      	b.n	80076e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d0:	d10a      	bne.n	80076e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60fb      	str	r3, [r7, #12]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <vTaskStartScheduler+0xaa>
}
 80076e8:	bf00      	nop
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	080097e0 	.word	0x080097e0
 80076f4:	08007d21 	.word	0x08007d21
 80076f8:	20000d54 	.word	0x20000d54
 80076fc:	20000d50 	.word	0x20000d50
 8007700:	20000d3c 	.word	0x20000d3c
 8007704:	20000d34 	.word	0x20000d34

08007708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800770c:	4b04      	ldr	r3, [pc, #16]	; (8007720 <vTaskSuspendAll+0x18>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	4a03      	ldr	r2, [pc, #12]	; (8007720 <vTaskSuspendAll+0x18>)
 8007714:	6013      	str	r3, [r2, #0]
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000d58 	.word	0x20000d58

08007724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007732:	4b42      	ldr	r3, [pc, #264]	; (800783c <xTaskResumeAll+0x118>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <xTaskResumeAll+0x2c>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	603b      	str	r3, [r7, #0]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007750:	f001 f8a4 	bl	800889c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007754:	4b39      	ldr	r3, [pc, #228]	; (800783c <xTaskResumeAll+0x118>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3b01      	subs	r3, #1
 800775a:	4a38      	ldr	r2, [pc, #224]	; (800783c <xTaskResumeAll+0x118>)
 800775c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775e:	4b37      	ldr	r3, [pc, #220]	; (800783c <xTaskResumeAll+0x118>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d162      	bne.n	800782c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007766:	4b36      	ldr	r3, [pc, #216]	; (8007840 <xTaskResumeAll+0x11c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d05e      	beq.n	800782c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800776e:	e02f      	b.n	80077d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007770:	4b34      	ldr	r3, [pc, #208]	; (8007844 <xTaskResumeAll+0x120>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3318      	adds	r3, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff f8b7 	bl	80068f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3304      	adds	r3, #4
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff f8b2 	bl	80068f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <xTaskResumeAll+0x124>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d903      	bls.n	80077a0 <xTaskResumeAll+0x7c>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <xTaskResumeAll+0x124>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <xTaskResumeAll+0x128>)
 80077ae:	441a      	add	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7ff f83f 	bl	800683a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4b23      	ldr	r3, [pc, #140]	; (8007850 <xTaskResumeAll+0x12c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077ca:	4b22      	ldr	r3, [pc, #136]	; (8007854 <xTaskResumeAll+0x130>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077d0:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <xTaskResumeAll+0x120>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1cb      	bne.n	8007770 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077de:	f000 fb55 	bl	8007e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077e2:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <xTaskResumeAll+0x134>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077ee:	f000 f845 	bl	800787c <xTaskIncrementTick>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077f8:	4b16      	ldr	r3, [pc, #88]	; (8007854 <xTaskResumeAll+0x130>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3b01      	subs	r3, #1
 8007802:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f1      	bne.n	80077ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <xTaskResumeAll+0x134>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007810:	4b10      	ldr	r3, [pc, #64]	; (8007854 <xTaskResumeAll+0x130>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d009      	beq.n	800782c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <xTaskResumeAll+0x138>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800782c:	f001 f866 	bl	80088fc <vPortExitCritical>

	return xAlreadyYielded;
 8007830:	68bb      	ldr	r3, [r7, #8]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000d58 	.word	0x20000d58
 8007840:	20000d30 	.word	0x20000d30
 8007844:	20000cf0 	.word	0x20000cf0
 8007848:	20000d38 	.word	0x20000d38
 800784c:	20000860 	.word	0x20000860
 8007850:	2000085c 	.word	0x2000085c
 8007854:	20000d44 	.word	0x20000d44
 8007858:	20000d40 	.word	0x20000d40
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007866:	4b04      	ldr	r3, [pc, #16]	; (8007878 <xTaskGetTickCount+0x18>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800786c:	687b      	ldr	r3, [r7, #4]
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	20000d34 	.word	0x20000d34

0800787c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007886:	4b51      	ldr	r3, [pc, #324]	; (80079cc <xTaskIncrementTick+0x150>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 808e 	bne.w	80079ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007890:	4b4f      	ldr	r3, [pc, #316]	; (80079d0 <xTaskIncrementTick+0x154>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007898:	4a4d      	ldr	r2, [pc, #308]	; (80079d0 <xTaskIncrementTick+0x154>)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d120      	bne.n	80078e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078a4:	4b4b      	ldr	r3, [pc, #300]	; (80079d4 <xTaskIncrementTick+0x158>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	603b      	str	r3, [r7, #0]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <xTaskIncrementTick+0x46>
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <xTaskIncrementTick+0x158>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	4b43      	ldr	r3, [pc, #268]	; (80079d8 <xTaskIncrementTick+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a41      	ldr	r2, [pc, #260]	; (80079d4 <xTaskIncrementTick+0x158>)
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	4a41      	ldr	r2, [pc, #260]	; (80079d8 <xTaskIncrementTick+0x15c>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4b40      	ldr	r3, [pc, #256]	; (80079dc <xTaskIncrementTick+0x160>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a3f      	ldr	r2, [pc, #252]	; (80079dc <xTaskIncrementTick+0x160>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	f000 fad3 	bl	8007e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078e6:	4b3e      	ldr	r3, [pc, #248]	; (80079e0 <xTaskIncrementTick+0x164>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d34e      	bcc.n	800798e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f0:	4b38      	ldr	r3, [pc, #224]	; (80079d4 <xTaskIncrementTick+0x158>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <xTaskIncrementTick+0x82>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <xTaskIncrementTick+0x84>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007904:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <xTaskIncrementTick+0x164>)
 8007906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790a:	601a      	str	r2, [r3, #0]
					break;
 800790c:	e03f      	b.n	800798e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800790e:	4b31      	ldr	r3, [pc, #196]	; (80079d4 <xTaskIncrementTick+0x158>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d203      	bcs.n	800792e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007926:	4a2e      	ldr	r2, [pc, #184]	; (80079e0 <xTaskIncrementTick+0x164>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6013      	str	r3, [r2, #0]
						break;
 800792c:	e02f      	b.n	800798e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe ffdc 	bl	80068f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3318      	adds	r3, #24
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe ffd3 	bl	80068f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <xTaskIncrementTick+0x168>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d903      	bls.n	800795e <xTaskIncrementTick+0xe2>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <xTaskIncrementTick+0x168>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <xTaskIncrementTick+0x16c>)
 800796c:	441a      	add	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7fe ff60 	bl	800683a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <xTaskIncrementTick+0x170>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	429a      	cmp	r2, r3
 8007986:	d3b3      	bcc.n	80078f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800798c:	e7b0      	b.n	80078f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800798e:	4b17      	ldr	r3, [pc, #92]	; (80079ec <xTaskIncrementTick+0x170>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4914      	ldr	r1, [pc, #80]	; (80079e8 <xTaskIncrementTick+0x16c>)
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d907      	bls.n	80079b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80079a6:	2301      	movs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e004      	b.n	80079b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xTaskIncrementTick+0x174>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <xTaskIncrementTick+0x174>)
 80079b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <xTaskIncrementTick+0x178>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079c2:	697b      	ldr	r3, [r7, #20]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000d58 	.word	0x20000d58
 80079d0:	20000d34 	.word	0x20000d34
 80079d4:	20000ce8 	.word	0x20000ce8
 80079d8:	20000cec 	.word	0x20000cec
 80079dc:	20000d48 	.word	0x20000d48
 80079e0:	20000d50 	.word	0x20000d50
 80079e4:	20000d38 	.word	0x20000d38
 80079e8:	20000860 	.word	0x20000860
 80079ec:	2000085c 	.word	0x2000085c
 80079f0:	20000d40 	.word	0x20000d40
 80079f4:	20000d44 	.word	0x20000d44

080079f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079fe:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <vTaskSwitchContext+0xa4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a06:	4b26      	ldr	r3, [pc, #152]	; (8007aa0 <vTaskSwitchContext+0xa8>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a0c:	e041      	b.n	8007a92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a0e:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <vTaskSwitchContext+0xa8>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a14:	4b23      	ldr	r3, [pc, #140]	; (8007aa4 <vTaskSwitchContext+0xac>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	e010      	b.n	8007a3e <vTaskSwitchContext+0x46>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	607b      	str	r3, [r7, #4]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vTaskSwitchContext+0x3e>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	491a      	ldr	r1, [pc, #104]	; (8007aa8 <vTaskSwitchContext+0xb0>)
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0e4      	beq.n	8007a1c <vTaskSwitchContext+0x24>
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <vTaskSwitchContext+0xb0>)
 8007a5e:	4413      	add	r3, r2
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	3308      	adds	r3, #8
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d104      	bne.n	8007a82 <vTaskSwitchContext+0x8a>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <vTaskSwitchContext+0xb4>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <vTaskSwitchContext+0xac>)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6013      	str	r3, [r2, #0]
}
 8007a92:	bf00      	nop
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	20000d58 	.word	0x20000d58
 8007aa0:	20000d44 	.word	0x20000d44
 8007aa4:	20000d38 	.word	0x20000d38
 8007aa8:	20000860 	.word	0x20000860
 8007aac:	2000085c 	.word	0x2000085c

08007ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <vTaskPlaceOnEventList+0x44>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3318      	adds	r3, #24
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fe fece 	bl	8006880 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	f000 fa80 	bl	8007fec <prvAddCurrentTaskToDelayedList>
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	2000085c 	.word	0x2000085c

08007af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	617b      	str	r3, [r7, #20]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <vTaskPlaceOnEventListRestricted+0x54>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4619      	mov	r1, r3
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7fe fe86 	bl	800683a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	68b8      	ldr	r0, [r7, #8]
 8007b3e:	f000 fa55 	bl	8007fec <prvAddCurrentTaskToDelayedList>
	}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000085c 	.word	0x2000085c

08007b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60fb      	str	r3, [r7, #12]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe feb5 	bl	80068f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b86:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <xTaskRemoveFromEventList+0xb0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d11d      	bne.n	8007bca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe feac 	bl	80068f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <xTaskRemoveFromEventList+0xb4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d903      	bls.n	8007bac <xTaskRemoveFromEventList+0x5c>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <xTaskRemoveFromEventList+0xb4>)
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <xTaskRemoveFromEventList+0xb8>)
 8007bba:	441a      	add	r2, r3
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7fe fe39 	bl	800683a <vListInsertEnd>
 8007bc8:	e005      	b.n	8007bd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3318      	adds	r3, #24
 8007bce:	4619      	mov	r1, r3
 8007bd0:	480e      	ldr	r0, [pc, #56]	; (8007c0c <xTaskRemoveFromEventList+0xbc>)
 8007bd2:	f7fe fe32 	bl	800683a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <xTaskRemoveFromEventList+0xc0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d905      	bls.n	8007bf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <xTaskRemoveFromEventList+0xc4>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e001      	b.n	8007bf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bf4:	697b      	ldr	r3, [r7, #20]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000d58 	.word	0x20000d58
 8007c04:	20000d38 	.word	0x20000d38
 8007c08:	20000860 	.word	0x20000860
 8007c0c:	20000cf0 	.word	0x20000cf0
 8007c10:	2000085c 	.word	0x2000085c
 8007c14:	20000d44 	.word	0x20000d44

08007c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <vTaskInternalSetTimeOutState+0x24>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <vTaskInternalSetTimeOutState+0x28>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20000d48 	.word	0x20000d48
 8007c40:	20000d34 	.word	0x20000d34

08007c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	613b      	str	r3, [r7, #16]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c86:	f000 fe09 	bl	800889c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <xTaskCheckForTimeOut+0xbc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ca2:	d102      	bne.n	8007caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e023      	b.n	8007cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <xTaskCheckForTimeOut+0xc0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d007      	beq.n	8007cc6 <xTaskCheckForTimeOut+0x82>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]
 8007cc4:	e015      	b.n	8007cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d20b      	bcs.n	8007ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff ff9b 	bl	8007c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	e004      	b.n	8007cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cf2:	f000 fe03 	bl	80088fc <vPortExitCritical>

	return xReturn;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3720      	adds	r7, #32
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000d34 	.word	0x20000d34
 8007d04:	20000d48 	.word	0x20000d48

08007d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <vTaskMissedYield+0x14>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
}
 8007d12:	bf00      	nop
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000d44 	.word	0x20000d44

08007d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d28:	f000 f852 	bl	8007dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <prvIdleTask+0x28>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d9f9      	bls.n	8007d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <prvIdleTask+0x2c>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d44:	e7f0      	b.n	8007d28 <prvIdleTask+0x8>
 8007d46:	bf00      	nop
 8007d48:	20000860 	.word	0x20000860
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d56:	2300      	movs	r3, #0
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	e00c      	b.n	8007d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a12      	ldr	r2, [pc, #72]	; (8007db0 <prvInitialiseTaskLists+0x60>)
 8007d68:	4413      	add	r3, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fd3a 	bl	80067e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3301      	adds	r3, #1
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b37      	cmp	r3, #55	; 0x37
 8007d7a:	d9ef      	bls.n	8007d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d7c:	480d      	ldr	r0, [pc, #52]	; (8007db4 <prvInitialiseTaskLists+0x64>)
 8007d7e:	f7fe fd31 	bl	80067e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d82:	480d      	ldr	r0, [pc, #52]	; (8007db8 <prvInitialiseTaskLists+0x68>)
 8007d84:	f7fe fd2e 	bl	80067e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d88:	480c      	ldr	r0, [pc, #48]	; (8007dbc <prvInitialiseTaskLists+0x6c>)
 8007d8a:	f7fe fd2b 	bl	80067e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d8e:	480c      	ldr	r0, [pc, #48]	; (8007dc0 <prvInitialiseTaskLists+0x70>)
 8007d90:	f7fe fd28 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d94:	480b      	ldr	r0, [pc, #44]	; (8007dc4 <prvInitialiseTaskLists+0x74>)
 8007d96:	f7fe fd25 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <prvInitialiseTaskLists+0x78>)
 8007d9c:	4a05      	ldr	r2, [pc, #20]	; (8007db4 <prvInitialiseTaskLists+0x64>)
 8007d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <prvInitialiseTaskLists+0x7c>)
 8007da2:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <prvInitialiseTaskLists+0x68>)
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000860 	.word	0x20000860
 8007db4:	20000cc0 	.word	0x20000cc0
 8007db8:	20000cd4 	.word	0x20000cd4
 8007dbc:	20000cf0 	.word	0x20000cf0
 8007dc0:	20000d04 	.word	0x20000d04
 8007dc4:	20000d1c 	.word	0x20000d1c
 8007dc8:	20000ce8 	.word	0x20000ce8
 8007dcc:	20000cec 	.word	0x20000cec

08007dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd6:	e019      	b.n	8007e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dd8:	f000 fd60 	bl	800889c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <prvCheckTasksWaitingTermination+0x50>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fd81 	bl	80068f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <prvCheckTasksWaitingTermination+0x54>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	4a0b      	ldr	r2, [pc, #44]	; (8007e24 <prvCheckTasksWaitingTermination+0x54>)
 8007df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <prvCheckTasksWaitingTermination+0x58>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <prvCheckTasksWaitingTermination+0x58>)
 8007e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e02:	f000 fd7b 	bl	80088fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f810 	bl	8007e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <prvCheckTasksWaitingTermination+0x58>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e1      	bne.n	8007dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000d04 	.word	0x20000d04
 8007e24:	20000d30 	.word	0x20000d30
 8007e28:	20000d18 	.word	0x20000d18

08007e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 feee 	bl	8008c24 <vPortFree>
				vPortFree( pxTCB );
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 feeb 	bl	8008c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e4e:	e018      	b.n	8007e82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d103      	bne.n	8007e62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fee2 	bl	8008c24 <vPortFree>
	}
 8007e60:	e00f      	b.n	8007e82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d00a      	beq.n	8007e82 <prvDeleteTCB+0x56>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60fb      	str	r3, [r7, #12]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <prvDeleteTCB+0x54>
	}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <prvResetNextTaskUnblockTime+0x14>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <prvResetNextTaskUnblockTime+0x16>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eae:	e008      	b.n	8007ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ec0:	6013      	str	r3, [r2, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	20000ce8 	.word	0x20000ce8
 8007ed0:	20000d50 	.word	0x20000d50

08007ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <xTaskGetSchedulerState+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e008      	b.n	8007efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <xTaskGetSchedulerState+0x38>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e001      	b.n	8007efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007efa:	687b      	ldr	r3, [r7, #4]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000d3c 	.word	0x20000d3c
 8007f0c:	20000d58 	.word	0x20000d58

08007f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d056      	beq.n	8007fd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f26:	4b2e      	ldr	r3, [pc, #184]	; (8007fe0 <xTaskPriorityDisinherit+0xd0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d00a      	beq.n	8007f46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60bb      	str	r3, [r7, #8]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d02c      	beq.n	8007fd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d128      	bne.n	8007fd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fcb2 	bl	80068f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <xTaskPriorityDisinherit+0xd4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d903      	bls.n	8007fb4 <xTaskPriorityDisinherit+0xa4>
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <xTaskPriorityDisinherit+0xd4>)
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <xTaskPriorityDisinherit+0xd8>)
 8007fc2:	441a      	add	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f7fe fc35 	bl	800683a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd4:	697b      	ldr	r3, [r7, #20]
	}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000085c 	.word	0x2000085c
 8007fe4:	20000d38 	.word	0x20000d38
 8007fe8:	20000860 	.word	0x20000860

08007fec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ff6:	4b21      	ldr	r3, [pc, #132]	; (800807c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffc:	4b20      	ldr	r3, [pc, #128]	; (8008080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3304      	adds	r3, #4
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fc74 	bl	80068f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800800e:	d10a      	bne.n	8008026 <prvAddCurrentTaskToDelayedList+0x3a>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008016:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <prvAddCurrentTaskToDelayedList+0x94>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4819      	ldr	r0, [pc, #100]	; (8008084 <prvAddCurrentTaskToDelayedList+0x98>)
 8008020:	f7fe fc0b 	bl	800683a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008024:	e026      	b.n	8008074 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800802e:	4b14      	ldr	r3, [pc, #80]	; (8008080 <prvAddCurrentTaskToDelayedList+0x94>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	429a      	cmp	r2, r3
 800803c:	d209      	bcs.n	8008052 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <prvAddCurrentTaskToDelayedList+0x94>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f7fe fc18 	bl	8006880 <vListInsert>
}
 8008050:	e010      	b.n	8008074 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008052:	4b0e      	ldr	r3, [pc, #56]	; (800808c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvAddCurrentTaskToDelayedList+0x94>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe fc0e 	bl	8006880 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	429a      	cmp	r2, r3
 800806c:	d202      	bcs.n	8008074 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800806e:	4a08      	ldr	r2, [pc, #32]	; (8008090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6013      	str	r3, [r2, #0]
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000d34 	.word	0x20000d34
 8008080:	2000085c 	.word	0x2000085c
 8008084:	20000d1c 	.word	0x20000d1c
 8008088:	20000cec 	.word	0x20000cec
 800808c:	20000ce8 	.word	0x20000ce8
 8008090:	20000d50 	.word	0x20000d50

08008094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800809e:	f000 facb 	bl	8008638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <xTimerCreateTimerTask+0x80>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d021      	beq.n	80080ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080b2:	1d3a      	adds	r2, r7, #4
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fb77 	bl	80067b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	9202      	str	r2, [sp, #8]
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	2302      	movs	r3, #2
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	460a      	mov	r2, r1
 80080d4:	4910      	ldr	r1, [pc, #64]	; (8008118 <xTimerCreateTimerTask+0x84>)
 80080d6:	4811      	ldr	r0, [pc, #68]	; (800811c <xTimerCreateTimerTask+0x88>)
 80080d8:	f7ff f918 	bl	800730c <xTaskCreateStatic>
 80080dc:	4603      	mov	r3, r0
 80080de:	4a10      	ldr	r2, [pc, #64]	; (8008120 <xTimerCreateTimerTask+0x8c>)
 80080e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <xTimerCreateTimerTask+0x8c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ea:	2301      	movs	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	613b      	str	r3, [r7, #16]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000d8c 	.word	0x20000d8c
 8008118:	080097e8 	.word	0x080097e8
 800811c:	08008241 	.word	0x08008241
 8008120:	20000d90 	.word	0x20000d90

08008124 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	; 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <xTimerGenericCommand+0x2e>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	623b      	str	r3, [r7, #32]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008152:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <xTimerGenericCommand+0x98>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d02a      	beq.n	80081b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b05      	cmp	r3, #5
 800816a:	dc18      	bgt.n	800819e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800816c:	f7ff feb2 	bl	8007ed4 <xTaskGetSchedulerState>
 8008170:	4603      	mov	r3, r0
 8008172:	2b02      	cmp	r3, #2
 8008174:	d109      	bne.n	800818a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008176:	4b11      	ldr	r3, [pc, #68]	; (80081bc <xTimerGenericCommand+0x98>)
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f107 0110 	add.w	r1, r7, #16
 800817e:	2300      	movs	r3, #0
 8008180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008182:	f7fe fce1 	bl	8006b48 <xQueueGenericSend>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24
 8008188:	e012      	b.n	80081b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <xTimerGenericCommand+0x98>)
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f107 0110 	add.w	r1, r7, #16
 8008192:	2300      	movs	r3, #0
 8008194:	2200      	movs	r2, #0
 8008196:	f7fe fcd7 	bl	8006b48 <xQueueGenericSend>
 800819a:	6278      	str	r0, [r7, #36]	; 0x24
 800819c:	e008      	b.n	80081b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800819e:	4b07      	ldr	r3, [pc, #28]	; (80081bc <xTimerGenericCommand+0x98>)
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	f107 0110 	add.w	r1, r7, #16
 80081a6:	2300      	movs	r3, #0
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	f7fe fdcb 	bl	8006d44 <xQueueGenericSendFromISR>
 80081ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3728      	adds	r7, #40	; 0x28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000d8c 	.word	0x20000d8c

080081c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ca:	4b1c      	ldr	r3, [pc, #112]	; (800823c <prvProcessExpiredTimer+0x7c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fb89 	bl	80068f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d122      	bne.n	800822c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	18d1      	adds	r1, r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	6978      	ldr	r0, [r7, #20]
 80081f4:	f000 f8c8 	bl	8008388 <prvInsertTimerInActiveList>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081fe:	2300      	movs	r3, #0
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	2300      	movs	r3, #0
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	2100      	movs	r1, #0
 8008208:	6978      	ldr	r0, [r7, #20]
 800820a:	f7ff ff8b 	bl	8008124 <xTimerGenericCommand>
 800820e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60fb      	str	r3, [r7, #12]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	6978      	ldr	r0, [r7, #20]
 8008232:	4798      	blx	r3
}
 8008234:	bf00      	nop
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000d84 	.word	0x20000d84

08008240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f857 	bl	8008300 <prvGetNextExpireTime>
 8008252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4619      	mov	r1, r3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f803 	bl	8008264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800825e:	f000 f8d5 	bl	800840c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008262:	e7f1      	b.n	8008248 <prvTimerTask+0x8>

08008264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800826e:	f7ff fa4b 	bl	8007708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f866 	bl	8008348 <prvSampleTimeNow>
 800827c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d130      	bne.n	80082e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <prvProcessTimerOrBlockTask+0x3c>
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	429a      	cmp	r2, r3
 8008290:	d806      	bhi.n	80082a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008292:	f7ff fa47 	bl	8007724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008296:	68f9      	ldr	r1, [r7, #12]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff ff91 	bl	80081c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800829e:	e024      	b.n	80082ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <prvProcessTimerOrBlockTask+0x90>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082b8:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <prvProcessTimerOrBlockTask+0x94>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	4619      	mov	r1, r3
 80082c6:	f7fe ffed 	bl	80072a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082ca:	f7ff fa2b 	bl	8007724 <xTaskResumeAll>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082d4:	4b09      	ldr	r3, [pc, #36]	; (80082fc <prvProcessTimerOrBlockTask+0x98>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
}
 80082e4:	e001      	b.n	80082ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082e6:	f7ff fa1d 	bl	8007724 <xTaskResumeAll>
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000d88 	.word	0x20000d88
 80082f8:	20000d8c 	.word	0x20000d8c
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008308:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <prvGetNextExpireTime+0x44>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008326:	4b07      	ldr	r3, [pc, #28]	; (8008344 <prvGetNextExpireTime+0x44>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e001      	b.n	8008336 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008336:	68fb      	ldr	r3, [r7, #12]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000d84 	.word	0x20000d84

08008348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008350:	f7ff fa86 	bl	8007860 <xTaskGetTickCount>
 8008354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <prvSampleTimeNow+0x3c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	429a      	cmp	r2, r3
 800835e:	d205      	bcs.n	800836c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008360:	f000 f908 	bl	8008574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	e002      	b.n	8008372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008372:	4a04      	ldr	r2, [pc, #16]	; (8008384 <prvSampleTimeNow+0x3c>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000d94 	.word	0x20000d94

08008388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d812      	bhi.n	80083d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d302      	bcc.n	80083c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e01b      	b.n	80083fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083c2:	4b10      	ldr	r3, [pc, #64]	; (8008404 <prvInsertTimerInActiveList+0x7c>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f7fe fa57 	bl	8006880 <vListInsert>
 80083d2:	e012      	b.n	80083fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d206      	bcs.n	80083ea <prvInsertTimerInActiveList+0x62>
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d302      	bcc.n	80083ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e007      	b.n	80083fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083ea:	4b07      	ldr	r3, [pc, #28]	; (8008408 <prvInsertTimerInActiveList+0x80>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7fe fa43 	bl	8006880 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083fa:	697b      	ldr	r3, [r7, #20]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000d88 	.word	0x20000d88
 8008408:	20000d84 	.word	0x20000d84

0800840c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	; 0x38
 8008410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008412:	e09d      	b.n	8008550 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	da18      	bge.n	800844c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	3304      	adds	r3, #4
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	61fb      	str	r3, [r7, #28]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008442:	6850      	ldr	r0, [r2, #4]
 8008444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008446:	6892      	ldr	r2, [r2, #8]
 8008448:	4611      	mov	r1, r2
 800844a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	db7d      	blt.n	800854e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	3304      	adds	r3, #4
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fa44 	bl	80068f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008468:	463b      	mov	r3, r7
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff ff6c 	bl	8008348 <prvSampleTimeNow>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b09      	cmp	r3, #9
 8008476:	d86b      	bhi.n	8008550 <prvProcessReceivedCommands+0x144>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <prvProcessReceivedCommands+0x74>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084a9 	.word	0x080084a9
 8008488:	080084a9 	.word	0x080084a9
 800848c:	08008551 	.word	0x08008551
 8008490:	08008505 	.word	0x08008505
 8008494:	0800853d 	.word	0x0800853d
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084a9 	.word	0x080084a9
 80084a0:	08008551 	.word	0x08008551
 80084a4:	08008505 	.word	0x08008505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	18d1      	adds	r1, r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b6:	f7ff ff67 	bl	8008388 <prvInsertTimerInActiveList>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d047      	beq.n	8008550 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d13f      	bne.n	8008550 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	441a      	add	r2, r3
 80084d8:	2300      	movs	r3, #0
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2300      	movs	r3, #0
 80084de:	2100      	movs	r1, #0
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f7ff fe1f 	bl	8008124 <xTimerGenericCommand>
 80084e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d130      	bne.n	8008550 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	61bb      	str	r3, [r7, #24]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	617b      	str	r3, [r7, #20]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	18d1      	adds	r1, r2, r3
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008536:	f7ff ff27 	bl	8008388 <prvInsertTimerInActiveList>
					break;
 800853a:	e009      	b.n	8008550 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008548:	f000 fb6c 	bl	8008c24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800854c:	e000      	b.n	8008550 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800854e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <prvProcessReceivedCommands+0x164>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	1d39      	adds	r1, r7, #4
 8008556:	2200      	movs	r2, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fc8b 	bl	8006e74 <xQueueReceive>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f47f af57 	bne.w	8008414 <prvProcessReceivedCommands+0x8>
	}
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	3730      	adds	r7, #48	; 0x30
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000d8c 	.word	0x20000d8c

08008574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800857a:	e045      	b.n	8008608 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800857c:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <prvSwitchTimerLists+0xbc>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008586:	4b2a      	ldr	r3, [pc, #168]	; (8008630 <prvSwitchTimerLists+0xbc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe f9ab 	bl	80068f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d12e      	bne.n	8008608 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d90e      	bls.n	80085da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085c8:	4b19      	ldr	r3, [pc, #100]	; (8008630 <prvSwitchTimerLists+0xbc>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fe f954 	bl	8006880 <vListInsert>
 80085d8:	e016      	b.n	8008608 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	2100      	movs	r1, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff fd9d 	bl	8008124 <xTimerGenericCommand>
 80085ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <prvSwitchTimerLists+0x94>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	603b      	str	r3, [r7, #0]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008608:	4b09      	ldr	r3, [pc, #36]	; (8008630 <prvSwitchTimerLists+0xbc>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1b4      	bne.n	800857c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <prvSwitchTimerLists+0xbc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <prvSwitchTimerLists+0xc0>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a04      	ldr	r2, [pc, #16]	; (8008630 <prvSwitchTimerLists+0xbc>)
 800861e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008620:	4a04      	ldr	r2, [pc, #16]	; (8008634 <prvSwitchTimerLists+0xc0>)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6013      	str	r3, [r2, #0]
}
 8008626:	bf00      	nop
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000d84 	.word	0x20000d84
 8008634:	20000d88 	.word	0x20000d88

08008638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800863e:	f000 f92d 	bl	800889c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d120      	bne.n	800868c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800864a:	4814      	ldr	r0, [pc, #80]	; (800869c <prvCheckForValidListAndQueue+0x64>)
 800864c:	f7fe f8ca 	bl	80067e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008650:	4813      	ldr	r0, [pc, #76]	; (80086a0 <prvCheckForValidListAndQueue+0x68>)
 8008652:	f7fe f8c7 	bl	80067e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <prvCheckForValidListAndQueue+0x6c>)
 8008658:	4a10      	ldr	r2, [pc, #64]	; (800869c <prvCheckForValidListAndQueue+0x64>)
 800865a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800865c:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <prvCheckForValidListAndQueue+0x70>)
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <prvCheckForValidListAndQueue+0x68>)
 8008660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b11      	ldr	r3, [pc, #68]	; (80086ac <prvCheckForValidListAndQueue+0x74>)
 8008668:	4a11      	ldr	r2, [pc, #68]	; (80086b0 <prvCheckForValidListAndQueue+0x78>)
 800866a:	2110      	movs	r1, #16
 800866c:	200a      	movs	r0, #10
 800866e:	f7fe f9d1 	bl	8006a14 <xQueueGenericCreateStatic>
 8008672:	4603      	mov	r3, r0
 8008674:	4a08      	ldr	r2, [pc, #32]	; (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008676:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <prvCheckForValidListAndQueue+0x60>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	490b      	ldr	r1, [pc, #44]	; (80086b4 <prvCheckForValidListAndQueue+0x7c>)
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fde4 	bl	8007254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800868c:	f000 f936 	bl	80088fc <vPortExitCritical>
}
 8008690:	bf00      	nop
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000d8c 	.word	0x20000d8c
 800869c:	20000d5c 	.word	0x20000d5c
 80086a0:	20000d70 	.word	0x20000d70
 80086a4:	20000d84 	.word	0x20000d84
 80086a8:	20000d88 	.word	0x20000d88
 80086ac:	20000e38 	.word	0x20000e38
 80086b0:	20000d98 	.word	0x20000d98
 80086b4:	080097f0 	.word	0x080097f0

080086b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3b04      	subs	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3b04      	subs	r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f023 0201 	bic.w	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3b04      	subs	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e8:	4a08      	ldr	r2, [pc, #32]	; (800870c <pxPortInitialiseStack+0x54>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b14      	subs	r3, #20
 80086f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3b20      	subs	r3, #32
 80086fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr
 800870c:	08008711 	.word	0x08008711

08008710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008716:	2300      	movs	r3, #0
 8008718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800871a:	4b12      	ldr	r3, [pc, #72]	; (8008764 <prvTaskExitError+0x54>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008722:	d00a      	beq.n	800873a <prvTaskExitError+0x2a>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	60fb      	str	r3, [r7, #12]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <prvTaskExitError+0x28>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60bb      	str	r3, [r7, #8]
}
 800874c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800874e:	bf00      	nop
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0fc      	beq.n	8008750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	2000011c 	.word	0x2000011c
	...

08008770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <pxCurrentTCBConst2>)
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	6808      	ldr	r0, [r1, #0]
 8008776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800877a:	f380 8809 	msr	PSP, r0
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8811 	msr	BASEPRI, r0
 800878a:	f04e 0e0d 	orr.w	lr, lr, #13
 800878e:	4770      	bx	lr

08008790 <pxCurrentTCBConst2>:
 8008790:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008798:	4806      	ldr	r0, [pc, #24]	; (80087b4 <prvPortStartFirstTask+0x1c>)
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f380 8808 	msr	MSP, r0
 80087a2:	b662      	cpsie	i
 80087a4:	b661      	cpsie	f
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	df00      	svc	0
 80087b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087b2:	bf00      	nop
 80087b4:	e000ed08 	.word	0xe000ed08

080087b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087be:	4b32      	ldr	r3, [pc, #200]	; (8008888 <xPortStartScheduler+0xd0>)
 80087c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	22ff      	movs	r2, #255	; 0xff
 80087ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	4b2a      	ldr	r3, [pc, #168]	; (800888c <xPortStartScheduler+0xd4>)
 80087e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <xPortStartScheduler+0xd8>)
 80087e8:	2207      	movs	r2, #7
 80087ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ec:	e009      	b.n	8008802 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087ee:	4b28      	ldr	r3, [pc, #160]	; (8008890 <xPortStartScheduler+0xd8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	4a26      	ldr	r2, [pc, #152]	; (8008890 <xPortStartScheduler+0xd8>)
 80087f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880a:	2b80      	cmp	r3, #128	; 0x80
 800880c:	d0ef      	beq.n	80087ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800880e:	4b20      	ldr	r3, [pc, #128]	; (8008890 <xPortStartScheduler+0xd8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f1c3 0307 	rsb	r3, r3, #7
 8008816:	2b04      	cmp	r3, #4
 8008818:	d00a      	beq.n	8008830 <xPortStartScheduler+0x78>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60bb      	str	r3, [r7, #8]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008830:	4b17      	ldr	r3, [pc, #92]	; (8008890 <xPortStartScheduler+0xd8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	021b      	lsls	r3, r3, #8
 8008836:	4a16      	ldr	r2, [pc, #88]	; (8008890 <xPortStartScheduler+0xd8>)
 8008838:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800883a:	4b15      	ldr	r3, [pc, #84]	; (8008890 <xPortStartScheduler+0xd8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008842:	4a13      	ldr	r2, [pc, #76]	; (8008890 <xPortStartScheduler+0xd8>)
 8008844:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <xPortStartScheduler+0xdc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a10      	ldr	r2, [pc, #64]	; (8008894 <xPortStartScheduler+0xdc>)
 8008854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <xPortStartScheduler+0xdc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a0d      	ldr	r2, [pc, #52]	; (8008894 <xPortStartScheduler+0xdc>)
 8008860:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008864:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008866:	f000 f8b9 	bl	80089dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <xPortStartScheduler+0xe0>)
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008870:	f7ff ff92 	bl	8008798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008874:	f7ff f8c0 	bl	80079f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008878:	f7ff ff4a 	bl	8008710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	e000e400 	.word	0xe000e400
 800888c:	20000e88 	.word	0x20000e88
 8008890:	20000e8c 	.word	0x20000e8c
 8008894:	e000ed20 	.word	0xe000ed20
 8008898:	2000011c 	.word	0x2000011c

0800889c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
}
 80088b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088b6:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <vPortEnterCritical+0x58>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	4a0d      	ldr	r2, [pc, #52]	; (80088f4 <vPortEnterCritical+0x58>)
 80088be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <vPortEnterCritical+0x58>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10f      	bne.n	80088e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <vPortEnterCritical+0x5c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <vPortEnterCritical+0x4a>
	}
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	2000011c 	.word	0x2000011c
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008902:	4b11      	ldr	r3, [pc, #68]	; (8008948 <vPortExitCritical+0x4c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <vPortExitCritical+0x24>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	607b      	str	r3, [r7, #4]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008920:	4b09      	ldr	r3, [pc, #36]	; (8008948 <vPortExitCritical+0x4c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3b01      	subs	r3, #1
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <vPortExitCritical+0x4c>)
 8008928:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <vPortExitCritical+0x4c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d105      	bne.n	800893e <vPortExitCritical+0x42>
 8008932:	2300      	movs	r3, #0
 8008934:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f383 8811 	msr	BASEPRI, r3
}
 800893c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	bc80      	pop	{r7}
 8008946:	4770      	bx	lr
 8008948:	2000011c 	.word	0x2000011c
 800894c:	00000000 	.word	0x00000000

08008950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008950:	f3ef 8009 	mrs	r0, PSP
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <pxCurrentTCBConst>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008960:	6010      	str	r0, [r2, #0]
 8008962:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008966:	f04f 0050 	mov.w	r0, #80	; 0x50
 800896a:	f380 8811 	msr	BASEPRI, r0
 800896e:	f7ff f843 	bl	80079f8 <vTaskSwitchContext>
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8811 	msr	BASEPRI, r0
 800897a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	6808      	ldr	r0, [r1, #0]
 8008982:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008986:	f380 8809 	msr	PSP, r0
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	4770      	bx	lr

08008990 <pxCurrentTCBConst>:
 8008990:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089b2:	f7fe ff63 	bl	800787c <xTaskIncrementTick>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <xPortSysTickHandler+0x40>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f383 8811 	msr	BASEPRI, r3
}
 80089ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <vPortSetupTimerInterrupt+0x30>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <vPortSetupTimerInterrupt+0x34>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <vPortSetupTimerInterrupt+0x38>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a09      	ldr	r2, [pc, #36]	; (8008a18 <vPortSetupTimerInterrupt+0x3c>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	099b      	lsrs	r3, r3, #6
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <vPortSetupTimerInterrupt+0x40>)
 80089fa:	3b01      	subs	r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089fe:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <vPortSetupTimerInterrupt+0x30>)
 8008a00:	2207      	movs	r2, #7
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr
 8008a0c:	e000e010 	.word	0xe000e010
 8008a10:	e000e018 	.word	0xe000e018
 8008a14:	20000000 	.word	0x20000000
 8008a18:	10624dd3 	.word	0x10624dd3
 8008a1c:	e000e014 	.word	0xe000e014

08008a20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a26:	f3ef 8305 	mrs	r3, IPSR
 8008a2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d914      	bls.n	8008a5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a32:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <vPortValidateInterruptPriority+0x6c>)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4413      	add	r3, r2
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <vPortValidateInterruptPriority+0x70>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	7afa      	ldrb	r2, [r7, #11]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d20a      	bcs.n	8008a5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	607b      	str	r3, [r7, #4]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <vPortValidateInterruptPriority+0x74>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a64:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <vPortValidateInterruptPriority+0x78>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d90a      	bls.n	8008a82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	603b      	str	r3, [r7, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <vPortValidateInterruptPriority+0x60>
	}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	e000e3f0 	.word	0xe000e3f0
 8008a90:	20000e88 	.word	0x20000e88
 8008a94:	e000ed0c 	.word	0xe000ed0c
 8008a98:	20000e8c 	.word	0x20000e8c

08008a9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008aa8:	f7fe fe2e 	bl	8007708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aac:	4b58      	ldr	r3, [pc, #352]	; (8008c10 <pvPortMalloc+0x174>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ab4:	f000 f910 	bl	8008cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ab8:	4b56      	ldr	r3, [pc, #344]	; (8008c14 <pvPortMalloc+0x178>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 808e 	bne.w	8008be2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01d      	beq.n	8008b08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008acc:	2208      	movs	r2, #8
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d014      	beq.n	8008b08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f023 0307 	bic.w	r3, r3, #7
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <pvPortMalloc+0x6c>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d069      	beq.n	8008be2 <pvPortMalloc+0x146>
 8008b0e:	4b42      	ldr	r3, [pc, #264]	; (8008c18 <pvPortMalloc+0x17c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d864      	bhi.n	8008be2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b18:	4b40      	ldr	r3, [pc, #256]	; (8008c1c <pvPortMalloc+0x180>)
 8008b1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b1c:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <pvPortMalloc+0x180>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b22:	e004      	b.n	8008b2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d903      	bls.n	8008b40 <pvPortMalloc+0xa4>
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f1      	bne.n	8008b24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b40:	4b33      	ldr	r3, [pc, #204]	; (8008c10 <pvPortMalloc+0x174>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d04b      	beq.n	8008be2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2208      	movs	r2, #8
 8008b50:	4413      	add	r3, r2
 8008b52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	1ad2      	subs	r2, r2, r3
 8008b64:	2308      	movs	r3, #8
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d91f      	bls.n	8008bac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <pvPortMalloc+0xf8>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	613b      	str	r3, [r7, #16]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	1ad2      	subs	r2, r2, r3
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ba6:	69b8      	ldr	r0, [r7, #24]
 8008ba8:	f000 f8f8 	bl	8008d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bac:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <pvPortMalloc+0x17c>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <pvPortMalloc+0x17c>)
 8008bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bba:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <pvPortMalloc+0x17c>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b18      	ldr	r3, [pc, #96]	; (8008c20 <pvPortMalloc+0x184>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d203      	bcs.n	8008bce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <pvPortMalloc+0x17c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a15      	ldr	r2, [pc, #84]	; (8008c20 <pvPortMalloc+0x184>)
 8008bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <pvPortMalloc+0x178>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008be2:	f7fe fd9f 	bl	8007724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <pvPortMalloc+0x16a>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	60fb      	str	r3, [r7, #12]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <pvPortMalloc+0x168>
	return pvReturn;
 8008c06:	69fb      	ldr	r3, [r7, #28]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3728      	adds	r7, #40	; 0x28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20001a98 	.word	0x20001a98
 8008c14:	20001aa4 	.word	0x20001aa4
 8008c18:	20001a9c 	.word	0x20001a9c
 8008c1c:	20001a90 	.word	0x20001a90
 8008c20:	20001aa0 	.word	0x20001aa0

08008c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d048      	beq.n	8008cc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c36:	2308      	movs	r3, #8
 8008c38:	425b      	negs	r3, r3
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <vPortFree+0xac>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortFree+0x44>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <vPortFree+0x62>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60bb      	str	r3, [r7, #8]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <vPortFree+0xac>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d019      	beq.n	8008cc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d115      	bne.n	8008cc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortFree+0xac>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cac:	f7fe fd2c 	bl	8007708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <vPortFree+0xb0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4413      	add	r3, r2
 8008cba:	4a06      	ldr	r2, [pc, #24]	; (8008cd4 <vPortFree+0xb0>)
 8008cbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cbe:	6938      	ldr	r0, [r7, #16]
 8008cc0:	f000 f86c 	bl	8008d9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008cc4:	f7fe fd2e 	bl	8007724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20001aa4 	.word	0x20001aa4
 8008cd4:	20001a9c 	.word	0x20001a9c

08008cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ce4:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <prvHeapInit+0xac>)
 8008ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00c      	beq.n	8008d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	4a1f      	ldr	r2, [pc, #124]	; (8008d84 <prvHeapInit+0xac>)
 8008d08:	4413      	add	r3, r2
 8008d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d10:	4a1d      	ldr	r2, [pc, #116]	; (8008d88 <prvHeapInit+0xb0>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d16:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <prvHeapInit+0xb0>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4413      	add	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d24:	2208      	movs	r2, #8
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0307 	bic.w	r3, r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <prvHeapInit+0xb4>)
 8008d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d3a:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <prvHeapInit+0xb4>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <prvHeapInit+0xb4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <prvHeapInit+0xb4>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <prvHeapInit+0xb8>)
 8008d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <prvHeapInit+0xbc>)
 8008d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <prvHeapInit+0xc0>)
 8008d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d76:	601a      	str	r2, [r3, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000e90 	.word	0x20000e90
 8008d88:	20001a90 	.word	0x20001a90
 8008d8c:	20001a98 	.word	0x20001a98
 8008d90:	20001aa0 	.word	0x20001aa0
 8008d94:	20001a9c 	.word	0x20001a9c
 8008d98:	20001aa4 	.word	0x20001aa4

08008d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <prvInsertBlockIntoFreeList+0xa8>)
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e002      	b.n	8008db0 <prvInsertBlockIntoFreeList+0x14>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d8f7      	bhi.n	8008daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d108      	bne.n	8008dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	441a      	add	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d118      	bne.n	8008e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <prvInsertBlockIntoFreeList+0xac>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d00d      	beq.n	8008e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	441a      	add	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e008      	b.n	8008e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	; (8008e48 <prvInsertBlockIntoFreeList+0xac>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e003      	b.n	8008e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d002      	beq.n	8008e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr
 8008e44:	20001a90 	.word	0x20001a90
 8008e48:	20001a98 	.word	0x20001a98

08008e4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e50:	2200      	movs	r2, #0
 8008e52:	4912      	ldr	r1, [pc, #72]	; (8008e9c <MX_USB_DEVICE_Init+0x50>)
 8008e54:	4812      	ldr	r0, [pc, #72]	; (8008ea0 <MX_USB_DEVICE_Init+0x54>)
 8008e56:	f7fc fae9 	bl	800542c <USBD_Init>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e60:	f7f7 fa27 	bl	80002b2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e64:	490f      	ldr	r1, [pc, #60]	; (8008ea4 <MX_USB_DEVICE_Init+0x58>)
 8008e66:	480e      	ldr	r0, [pc, #56]	; (8008ea0 <MX_USB_DEVICE_Init+0x54>)
 8008e68:	f7fc fb0b 	bl	8005482 <USBD_RegisterClass>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e72:	f7f7 fa1e 	bl	80002b2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e76:	490c      	ldr	r1, [pc, #48]	; (8008ea8 <MX_USB_DEVICE_Init+0x5c>)
 8008e78:	4809      	ldr	r0, [pc, #36]	; (8008ea0 <MX_USB_DEVICE_Init+0x54>)
 8008e7a:	f7fc fa6b 	bl	8005354 <USBD_CDC_RegisterInterface>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e84:	f7f7 fa15 	bl	80002b2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e88:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <MX_USB_DEVICE_Init+0x54>)
 8008e8a:	f7fc fb13 	bl	80054b4 <USBD_Start>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e94:	f7f7 fa0d 	bl	80002b2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20000130 	.word	0x20000130
 8008ea0:	20001d10 	.word	0x20001d10
 8008ea4:	20000018 	.word	0x20000018
 8008ea8:	20000120 	.word	0x20000120

08008eac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4905      	ldr	r1, [pc, #20]	; (8008ec8 <CDC_Init_FS+0x1c>)
 8008eb4:	4805      	ldr	r0, [pc, #20]	; (8008ecc <CDC_Init_FS+0x20>)
 8008eb6:	f7fc fa63 	bl	8005380 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008eba:	4905      	ldr	r1, [pc, #20]	; (8008ed0 <CDC_Init_FS+0x24>)
 8008ebc:	4803      	ldr	r0, [pc, #12]	; (8008ecc <CDC_Init_FS+0x20>)
 8008ebe:	f7fc fa78 	bl	80053b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ec2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200023bc 	.word	0x200023bc
 8008ecc:	20001d10 	.word	0x20001d10
 8008ed0:	20001fd4 	.word	0x20001fd4

08008ed4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ed8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr
	...

08008ee4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	71fb      	strb	r3, [r7, #7]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b23      	cmp	r3, #35	; 0x23
 8008ef8:	d84a      	bhi.n	8008f90 <CDC_Control_FS+0xac>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <CDC_Control_FS+0x1c>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f91 	.word	0x08008f91
 8008f04:	08008f91 	.word	0x08008f91
 8008f08:	08008f91 	.word	0x08008f91
 8008f0c:	08008f91 	.word	0x08008f91
 8008f10:	08008f91 	.word	0x08008f91
 8008f14:	08008f91 	.word	0x08008f91
 8008f18:	08008f91 	.word	0x08008f91
 8008f1c:	08008f91 	.word	0x08008f91
 8008f20:	08008f91 	.word	0x08008f91
 8008f24:	08008f91 	.word	0x08008f91
 8008f28:	08008f91 	.word	0x08008f91
 8008f2c:	08008f91 	.word	0x08008f91
 8008f30:	08008f91 	.word	0x08008f91
 8008f34:	08008f91 	.word	0x08008f91
 8008f38:	08008f91 	.word	0x08008f91
 8008f3c:	08008f91 	.word	0x08008f91
 8008f40:	08008f91 	.word	0x08008f91
 8008f44:	08008f91 	.word	0x08008f91
 8008f48:	08008f91 	.word	0x08008f91
 8008f4c:	08008f91 	.word	0x08008f91
 8008f50:	08008f91 	.word	0x08008f91
 8008f54:	08008f91 	.word	0x08008f91
 8008f58:	08008f91 	.word	0x08008f91
 8008f5c:	08008f91 	.word	0x08008f91
 8008f60:	08008f91 	.word	0x08008f91
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	08008f91 	.word	0x08008f91
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08008f91 	.word	0x08008f91
 8008f78:	08008f91 	.word	0x08008f91
 8008f7c:	08008f91 	.word	0x08008f91
 8008f80:	08008f91 	.word	0x08008f91
 8008f84:	08008f91 	.word	0x08008f91
 8008f88:	08008f91 	.word	0x08008f91
 8008f8c:	08008f91 	.word	0x08008f91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f90:	bf00      	nop
  }

  return (USBD_OK);
 8008f92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <CDC_Receive_FS+0x24>)
 8008fae:	f7fc fa00 	bl	80053b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fb2:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <CDC_Receive_FS+0x24>)
 8008fb4:	f7fc fa10 	bl	80053d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20001d10 	.word	0x20001d10

08008fc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2212      	movs	r2, #18
 8008fd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	2000014c 	.word	0x2000014c

08008fec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2204      	movs	r2, #4
 8008ffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ffe:	4b03      	ldr	r3, [pc, #12]	; (800900c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	20000160 	.word	0x20000160

08009010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d105      	bne.n	800902e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4907      	ldr	r1, [pc, #28]	; (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
 8009026:	4808      	ldr	r0, [pc, #32]	; (8009048 <USBD_FS_ProductStrDescriptor+0x38>)
 8009028:	f7fd f9bc 	bl	80063a4 <USBD_GetString>
 800902c:	e004      	b.n	8009038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
 8009032:	4805      	ldr	r0, [pc, #20]	; (8009048 <USBD_FS_ProductStrDescriptor+0x38>)
 8009034:	f7fd f9b6 	bl	80063a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200027a4 	.word	0x200027a4
 8009048:	080097f8 	.word	0x080097f8

0800904c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	4904      	ldr	r1, [pc, #16]	; (800906c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800905c:	4804      	ldr	r0, [pc, #16]	; (8009070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800905e:	f7fd f9a1 	bl	80063a4 <USBD_GetString>
  return USBD_StrDesc;
 8009062:	4b02      	ldr	r3, [pc, #8]	; (800906c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200027a4 	.word	0x200027a4
 8009070:	08009810 	.word	0x08009810

08009074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	221a      	movs	r2, #26
 8009084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009086:	f000 f843 	bl	8009110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800908a:	4b02      	ldr	r3, [pc, #8]	; (8009094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000164 	.word	0x20000164

08009098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4907      	ldr	r1, [pc, #28]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ae:	4808      	ldr	r0, [pc, #32]	; (80090d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b0:	f7fd f978 	bl	80063a4 <USBD_GetString>
 80090b4:	e004      	b.n	80090c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4904      	ldr	r1, [pc, #16]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090bc:	f7fd f972 	bl	80063a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	200027a4 	.word	0x200027a4
 80090d0:	08009824 	.word	0x08009824

080090d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	4907      	ldr	r1, [pc, #28]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ea:	4808      	ldr	r0, [pc, #32]	; (800910c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090ec:	f7fd f95a 	bl	80063a4 <USBD_GetString>
 80090f0:	e004      	b.n	80090fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	4904      	ldr	r1, [pc, #16]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f6:	4805      	ldr	r0, [pc, #20]	; (800910c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f8:	f7fd f954 	bl	80063a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200027a4 	.word	0x200027a4
 800910c:	08009830 	.word	0x08009830

08009110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <Get_SerialNum+0x44>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800911c:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <Get_SerialNum+0x48>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <Get_SerialNum+0x4c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009136:	2208      	movs	r2, #8
 8009138:	4909      	ldr	r1, [pc, #36]	; (8009160 <Get_SerialNum+0x50>)
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f814 	bl	8009168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009140:	2204      	movs	r2, #4
 8009142:	4908      	ldr	r1, [pc, #32]	; (8009164 <Get_SerialNum+0x54>)
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	f000 f80f 	bl	8009168 <IntToUnicode>
  }
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	1ffff7e8 	.word	0x1ffff7e8
 8009158:	1ffff7ec 	.word	0x1ffff7ec
 800915c:	1ffff7f0 	.word	0x1ffff7f0
 8009160:	20000166 	.word	0x20000166
 8009164:	20000176 	.word	0x20000176

08009168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]
 800917e:	e027      	b.n	80091d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	0f1b      	lsrs	r3, r3, #28
 8009184:	2b09      	cmp	r3, #9
 8009186:	d80b      	bhi.n	80091a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	0f1b      	lsrs	r3, r3, #28
 800918c:	b2da      	uxtb	r2, r3
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4619      	mov	r1, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	440b      	add	r3, r1
 8009198:	3230      	adds	r2, #48	; 0x30
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	e00a      	b.n	80091b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0f1b      	lsrs	r3, r3, #28
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4619      	mov	r1, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	440b      	add	r3, r1
 80091b0:	3237      	adds	r2, #55	; 0x37
 80091b2:	b2d2      	uxtb	r2, r2
 80091b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	3301      	adds	r3, #1
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	3301      	adds	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
 80091d0:	7dfa      	ldrb	r2, [r7, #23]
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d3d3      	bcc.n	8009180 <IntToUnicode+0x18>
  }
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr

080091e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a0d      	ldr	r2, [pc, #52]	; (8009228 <HAL_PCD_MspInit+0x44>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d113      	bne.n	800921e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <HAL_PCD_MspInit+0x48>)
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <HAL_PCD_MspInit+0x48>)
 80091fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009200:	61d3      	str	r3, [r2, #28]
 8009202:	4b0a      	ldr	r3, [pc, #40]	; (800922c <HAL_PCD_MspInit+0x48>)
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800920e:	2200      	movs	r2, #0
 8009210:	2105      	movs	r1, #5
 8009212:	2014      	movs	r0, #20
 8009214:	f7f7 fa3f 	bl	8000696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009218:	2014      	movs	r0, #20
 800921a:	f7f7 fa58 	bl	80006ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	40005c00 	.word	0x40005c00
 800922c:	40021000 	.word	0x40021000

08009230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7fc f97c 	bl	8005544 <USBD_LL_SetupStage>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	4619      	mov	r1, r3
 800927e:	f7fc f9ae 	bl	80055de <USBD_LL_DataOutStage>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	440b      	add	r3, r1
 80092aa:	333c      	adds	r3, #60	; 0x3c
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	4619      	mov	r1, r3
 80092b2:	f7fc fa05 	bl	80056c0 <USBD_LL_DataInStage>
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fc fb15 	bl	80058fc <USBD_LL_SOF>
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092e2:	2301      	movs	r3, #1
 80092e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d001      	beq.n	80092f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ee:	f7f6 ffe0 	bl	80002b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092f8:	7bfa      	ldrb	r2, [r7, #15]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fc fac5 	bl	800588c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009308:	4618      	mov	r0, r3
 800930a:	f7fc fa7e 	bl	800580a <USBD_LL_Reset>
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009326:	4618      	mov	r0, r3
 8009328:	f7fc fabf 	bl	80058aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <HAL_PCD_SuspendCallback+0x30>)
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	4a03      	ldr	r2, [pc, #12]	; (8009348 <HAL_PCD_SuspendCallback+0x30>)
 800933a:	f043 0306 	orr.w	r3, r3, #6
 800933e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	e000ed00 	.word	0xe000ed00

0800934c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800935a:	4618      	mov	r0, r3
 800935c:	f7fc fab9 	bl	80058d2 <USBD_LL_Resume>
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009370:	4a28      	ldr	r2, [pc, #160]	; (8009414 <USBD_LL_Init+0xac>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a26      	ldr	r2, [pc, #152]	; (8009414 <USBD_LL_Init+0xac>)
 800937c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009380:	4b24      	ldr	r3, [pc, #144]	; (8009414 <USBD_LL_Init+0xac>)
 8009382:	4a25      	ldr	r2, [pc, #148]	; (8009418 <USBD_LL_Init+0xb0>)
 8009384:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009386:	4b23      	ldr	r3, [pc, #140]	; (8009414 <USBD_LL_Init+0xac>)
 8009388:	2208      	movs	r2, #8
 800938a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800938c:	4b21      	ldr	r3, [pc, #132]	; (8009414 <USBD_LL_Init+0xac>)
 800938e:	2202      	movs	r2, #2
 8009390:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009392:	4b20      	ldr	r3, [pc, #128]	; (8009414 <USBD_LL_Init+0xac>)
 8009394:	2200      	movs	r2, #0
 8009396:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009398:	4b1e      	ldr	r3, [pc, #120]	; (8009414 <USBD_LL_Init+0xac>)
 800939a:	2200      	movs	r2, #0
 800939c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <USBD_LL_Init+0xac>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093a4:	481b      	ldr	r0, [pc, #108]	; (8009414 <USBD_LL_Init+0xac>)
 80093a6:	f7f7 f9ac 	bl	8000702 <HAL_PCD_Init>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80093b0:	f7f6 ff7f 	bl	80002b2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ba:	2318      	movs	r3, #24
 80093bc:	2200      	movs	r2, #0
 80093be:	2100      	movs	r1, #0
 80093c0:	f7f8 fe22 	bl	8002008 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ca:	2358      	movs	r3, #88	; 0x58
 80093cc:	2200      	movs	r2, #0
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	f7f8 fe1a 	bl	8002008 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093da:	23c0      	movs	r3, #192	; 0xc0
 80093dc:	2200      	movs	r2, #0
 80093de:	2181      	movs	r1, #129	; 0x81
 80093e0:	f7f8 fe12 	bl	8002008 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093ee:	2200      	movs	r2, #0
 80093f0:	2101      	movs	r1, #1
 80093f2:	f7f8 fe09 	bl	8002008 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009400:	2200      	movs	r2, #0
 8009402:	2182      	movs	r1, #130	; 0x82
 8009404:	f7f8 fe00 	bl	8002008 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	200029a4 	.word	0x200029a4
 8009418:	40005c00 	.word	0x40005c00

0800941c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009432:	4618      	mov	r0, r3
 8009434:	f7f7 fa70 	bl	8000918 <HAL_PCD_Start>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f94e 	bl	80096e0 <USBD_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009448:	7bbb      	ldrb	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	4608      	mov	r0, r1
 800945c:	4611      	mov	r1, r2
 800945e:	461a      	mov	r2, r3
 8009460:	4603      	mov	r3, r0
 8009462:	70fb      	strb	r3, [r7, #3]
 8009464:	460b      	mov	r3, r1
 8009466:	70bb      	strb	r3, [r7, #2]
 8009468:	4613      	mov	r3, r2
 800946a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800947a:	78bb      	ldrb	r3, [r7, #2]
 800947c:	883a      	ldrh	r2, [r7, #0]
 800947e:	78f9      	ldrb	r1, [r7, #3]
 8009480:	f7f7 fbea 	bl	8000c58 <HAL_PCD_EP_Open>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f928 	bl	80096e0 <USBD_Get_USB_Status>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009494:	7bbb      	ldrb	r3, [r7, #14]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f7 fc31 	bl	8000d24 <HAL_PCD_EP_Close>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f909 	bl	80096e0 <USBD_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f7 fcf1 	bl	8000ee2 <HAL_PCD_EP_SetStall>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f8ea 	bl	80096e0 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009534:	78fa      	ldrb	r2, [r7, #3]
 8009536:	4611      	mov	r1, r2
 8009538:	4618      	mov	r0, r3
 800953a:	f7f7 fd32 	bl	8000fa2 <HAL_PCD_EP_ClrStall>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f8cb 	bl	80096e0 <USBD_Get_USB_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800956a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800956c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da0c      	bge.n	800958e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	440b      	add	r3, r1
 8009588:	3302      	adds	r3, #2
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	e00b      	b.n	80095a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009594:	68f9      	ldr	r1, [r7, #12]
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	440b      	add	r3, r1
 80095a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr

080095b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f7 fb1d 	bl	8000c0e <HAL_PCD_SetAddress>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f880 	bl	80096e0 <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b086      	sub	sp, #24
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	461a      	mov	r2, r3
 80095fa:	460b      	mov	r3, r1
 80095fc:	72fb      	strb	r3, [r7, #11]
 80095fe:	4613      	mov	r3, r2
 8009600:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009610:	893b      	ldrh	r3, [r7, #8]
 8009612:	7af9      	ldrb	r1, [r7, #11]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	f7f7 fc21 	bl	8000e5c <HAL_PCD_EP_Transmit>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f85d 	bl	80096e0 <USBD_Get_USB_Status>
 8009626:	4603      	mov	r3, r0
 8009628:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800962a:	7dbb      	ldrb	r3, [r7, #22]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	607a      	str	r2, [r7, #4]
 800963e:	461a      	mov	r2, r3
 8009640:	460b      	mov	r3, r1
 8009642:	72fb      	strb	r3, [r7, #11]
 8009644:	4613      	mov	r3, r2
 8009646:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009656:	893b      	ldrh	r3, [r7, #8]
 8009658:	7af9      	ldrb	r1, [r7, #11]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	f7f7 fbaa 	bl	8000db4 <HAL_PCD_EP_Receive>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f83a 	bl	80096e0 <USBD_Get_USB_Status>
 800966c:	4603      	mov	r3, r0
 800966e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009670:	7dbb      	ldrb	r3, [r7, #22]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7f7 fbcc 	bl	8000e2e <HAL_PCD_EP_GetRxCount>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096a8:	4b02      	ldr	r3, [pc, #8]	; (80096b4 <USBD_static_malloc+0x14>)
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr
 80096b4:	20001aa8 	.word	0x20001aa8

080096b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bc80      	pop	{r7}
 80096c8:	4770      	bx	lr

080096ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d817      	bhi.n	8009724 <USBD_Get_USB_Status+0x44>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <USBD_Get_USB_Status+0x1c>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	08009713 	.word	0x08009713
 8009704:	08009719 	.word	0x08009719
 8009708:	0800971f 	.word	0x0800971f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
    break;
 8009710:	e00b      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009712:	2302      	movs	r3, #2
 8009714:	73fb      	strb	r3, [r7, #15]
    break;
 8009716:	e008      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009718:	2301      	movs	r3, #1
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	e005      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800971e:	2302      	movs	r3, #2
 8009720:	73fb      	strb	r3, [r7, #15]
    break;
 8009722:	e002      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009724:	2302      	movs	r3, #2
 8009726:	73fb      	strb	r3, [r7, #15]
    break;
 8009728:	bf00      	nop
  }
  return usb_status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop

08009738 <__libc_init_array>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	2600      	movs	r6, #0
 800973c:	4d0c      	ldr	r5, [pc, #48]	; (8009770 <__libc_init_array+0x38>)
 800973e:	4c0d      	ldr	r4, [pc, #52]	; (8009774 <__libc_init_array+0x3c>)
 8009740:	1b64      	subs	r4, r4, r5
 8009742:	10a4      	asrs	r4, r4, #2
 8009744:	42a6      	cmp	r6, r4
 8009746:	d109      	bne.n	800975c <__libc_init_array+0x24>
 8009748:	f000 f830 	bl	80097ac <_init>
 800974c:	2600      	movs	r6, #0
 800974e:	4d0a      	ldr	r5, [pc, #40]	; (8009778 <__libc_init_array+0x40>)
 8009750:	4c0a      	ldr	r4, [pc, #40]	; (800977c <__libc_init_array+0x44>)
 8009752:	1b64      	subs	r4, r4, r5
 8009754:	10a4      	asrs	r4, r4, #2
 8009756:	42a6      	cmp	r6, r4
 8009758:	d105      	bne.n	8009766 <__libc_init_array+0x2e>
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009760:	4798      	blx	r3
 8009762:	3601      	adds	r6, #1
 8009764:	e7ee      	b.n	8009744 <__libc_init_array+0xc>
 8009766:	f855 3b04 	ldr.w	r3, [r5], #4
 800976a:	4798      	blx	r3
 800976c:	3601      	adds	r6, #1
 800976e:	e7f2      	b.n	8009756 <__libc_init_array+0x1e>
 8009770:	08009874 	.word	0x08009874
 8009774:	08009874 	.word	0x08009874
 8009778:	08009874 	.word	0x08009874
 800977c:	08009878 	.word	0x08009878

08009780 <memcpy>:
 8009780:	440a      	add	r2, r1
 8009782:	4291      	cmp	r1, r2
 8009784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009788:	d100      	bne.n	800978c <memcpy+0xc>
 800978a:	4770      	bx	lr
 800978c:	b510      	push	{r4, lr}
 800978e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009792:	4291      	cmp	r1, r2
 8009794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009798:	d1f9      	bne.n	800978e <memcpy+0xe>
 800979a:	bd10      	pop	{r4, pc}

0800979c <memset>:
 800979c:	4603      	mov	r3, r0
 800979e:	4402      	add	r2, r0
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d100      	bne.n	80097a6 <memset+0xa>
 80097a4:	4770      	bx	lr
 80097a6:	f803 1b01 	strb.w	r1, [r3], #1
 80097aa:	e7f9      	b.n	80097a0 <memset+0x4>

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
