
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f4  080098f4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080098f4  080098f4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098f4  080098f4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098f4  080098f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080098fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b10  20000180  08009a7c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c90  08009a7c  00022c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2c0  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004023  00000000  00000000  0003d469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000425f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000592c  00000000  00000000  000435a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001516d  00000000  00000000  00048ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e59d  00000000  00000000  0005e041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  000ec634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800982c 	.word	0x0800982c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800982c 	.word	0x0800982c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f942 	bl	80003dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f870 	bl	8000240 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f006 f9da 	bl	8006518 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f006 fa3b 	bl	80065e4 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f006 fa02 	bl	800657c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	080098c0 	.word	0x080098c0
 8000180:	0800029d 	.word	0x0800029d
 8000184:	20001cc8 	.word	0x20001cc8

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	; 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f009 fb40 	bl	800981c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 ff30 	bl	8002044 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ea:	f000 f861 	bl	80002b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f99a 	bl	8002544 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000216:	f000 f84b 	bl	80002b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800021a:	2310      	movs	r3, #16
 800021c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800021e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000222:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4618      	mov	r0, r3
 8000228:	f002 faf4 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000232:	f000 f83d 	bl	80002b0 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3750      	adds	r7, #80	; 0x50
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_GPIO_Init+0x58>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a13      	ldr	r2, [pc, #76]	; (8000298 <MX_GPIO_Init+0x58>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_GPIO_Init+0x58>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0310 	and.w	r3, r3, #16
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_GPIO_Init+0x58>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <MX_GPIO_Init+0x58>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	6193      	str	r3, [r2, #24]
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_GPIO_Init+0x58>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a07      	ldr	r2, [pc, #28]	; (8000298 <MX_GPIO_Init+0x58>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002a4:	f008 fe12 	bl	8008ecc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f006 fa45 	bl	8006738 <osDelay>
 80002ae:	e7fb      	b.n	80002a8 <StartDefaultTask+0xc>

080002b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b4:	b672      	cpsid	i
}
 80002b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <Error_Handler+0x8>
	...

080002bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <HAL_MspInit+0x68>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <HAL_MspInit+0x68>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <HAL_MspInit+0x68>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_MspInit+0x68>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <HAL_MspInit+0x68>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e4:	61d3      	str	r3, [r2, #28]
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <HAL_MspInit+0x68>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	210f      	movs	r1, #15
 80002f6:	f06f 0001 	mvn.w	r0, #1
 80002fa:	f000 f9a8 	bl	800064e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_MspInit+0x6c>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_MspInit+0x6c>)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40010000 	.word	0x40010000

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <NMI_Handler+0x4>

08000332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>

0800033e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <UsageFault_Handler+0x4>

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035a:	f000 f885 	bl	8000468 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800035e:	f007 fdf7 	bl	8007f50 <xTaskGetSchedulerState>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	d001      	beq.n	800036c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000368:	f008 fb56 	bl	8008a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000376:	f000 fad1 	bl	800091c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200029a4 	.word	0x200029a4

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b6:	f7ff ffe5 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ba:	f009 f9fd 	bl	80097b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff fec7 	bl	8000150 <main>
  bx lr
 80003c2:	4770      	bx	lr
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80003cc:	080098fc 	.word	0x080098fc
  ldr r2, =_sbss
 80003d0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80003d4:	20002c90 	.word	0x20002c90

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <HAL_Init+0x28>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_Init+0x28>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 f923 	bl	8000638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f2:	200f      	movs	r0, #15
 80003f4:	f000 f808 	bl	8000408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003f8:	f7ff ff60 	bl	80002bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_InitTick+0x54>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_InitTick+0x58>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000422:	fbb2 f3f3 	udiv	r3, r2, r3
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f93b 	bl	80006a2 <HAL_SYSTICK_Config>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000432:	2301      	movs	r3, #1
 8000434:	e00e      	b.n	8000454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d80a      	bhi.n	8000452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800043c:	2200      	movs	r2, #0
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000444:	f000 f903 	bl	800064e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000448:	4a06      	ldr	r2, [pc, #24]	; (8000464 <HAL_InitTick+0x5c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000000 	.word	0x20000000
 8000460:	20000008 	.word	0x20000008
 8000464:	20000004 	.word	0x20000004

08000468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x1c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x20>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a03      	ldr	r2, [pc, #12]	; (8000488 <HAL_IncTick+0x20>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000008 	.word	0x20000008
 8000488:	20001ccc 	.word	0x20001ccc

0800048c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return uwTick;
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <HAL_GetTick+0x10>)
 8000492:	681b      	ldr	r3, [r3, #0]
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20001ccc 	.word	0x20001ccc

080004a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	60d3      	str	r3, [r2, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <__NVIC_GetPriorityGrouping+0x18>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	f003 0307 	and.w	r3, r3, #7
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	db0b      	blt.n	800052e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 021f 	and.w	r2, r3, #31
 800051c:	4906      	ldr	r1, [pc, #24]	; (8000538 <__NVIC_EnableIRQ+0x34>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	095b      	lsrs	r3, r3, #5
 8000524:	2001      	movs	r0, #1
 8000526:	fa00 f202 	lsl.w	r2, r0, r2
 800052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f1c3 0307 	rsb	r3, r3, #7
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	bf28      	it	cs
 80005ae:	2304      	movcs	r3, #4
 80005b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3304      	adds	r3, #4
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d902      	bls.n	80005c0 <NVIC_EncodePriority+0x30>
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3b03      	subs	r3, #3
 80005be:	e000      	b.n	80005c2 <NVIC_EncodePriority+0x32>
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43da      	mvns	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	401a      	ands	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43d9      	mvns	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	4313      	orrs	r3, r2
         );
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000604:	d301      	bcc.n	800060a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000606:	2301      	movs	r3, #1
 8000608:	e00f      	b.n	800062a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <SysTick_Config+0x40>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000612:	210f      	movs	r1, #15
 8000614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000618:	f7ff ff90 	bl	800053c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SysTick_Config+0x40>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <SysTick_Config+0x40>)
 8000624:	2207      	movs	r2, #7
 8000626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff2d 	bl	80004a0 <__NVIC_SetPriorityGrouping>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000660:	f7ff ff42 	bl	80004e8 <__NVIC_GetPriorityGrouping>
 8000664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	6978      	ldr	r0, [r7, #20]
 800066c:	f7ff ff90 	bl	8000590 <NVIC_EncodePriority>
 8000670:	4602      	mov	r2, r0
 8000672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff5f 	bl	800053c <__NVIC_SetPriority>
}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	4603      	mov	r3, r0
 800068e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff35 	bl	8000504 <__NVIC_EnableIRQ>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ffa2 	bl	80005f4 <SysTick_Config>
 80006b0:	4603      	mov	r3, r0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006bc:	b08b      	sub	sp, #44	; 0x2c
 80006be:	af06      	add	r7, sp, #24
 80006c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e0fd      	b.n	80008c8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d106      	bne.n	80006e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f008 fdbf 	bl	8009264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2203      	movs	r2, #3
 80006ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f96a 	bl	80029cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	687e      	ldr	r6, [r7, #4]
 8000700:	466d      	mov	r5, sp
 8000702:	f106 0410 	add.w	r4, r6, #16
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	602b      	str	r3, [r5, #0]
 800070e:	1d33      	adds	r3, r6, #4
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	6838      	ldr	r0, [r7, #0]
 8000714:	f002 f934 	bl	8002980 <USB_CoreInit>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2202      	movs	r2, #2
 8000722:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e0ce      	b.n	80008c8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f965 	bl	8002a00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e04c      	b.n	80007d6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3301      	adds	r3, #1
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	7bfa      	ldrb	r2, [r7, #15]
 8000764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000766:	7bfa      	ldrb	r2, [r7, #15]
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	b298      	uxth	r0, r3
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	3336      	adds	r3, #54	; 0x36
 800077a:	4602      	mov	r2, r0
 800077c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	440b      	add	r3, r1
 800078e:	3303      	adds	r3, #3
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000794:	7bfa      	ldrb	r2, [r7, #15]
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	440b      	add	r3, r1
 80007a2:	3338      	adds	r3, #56	; 0x38
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007a8:	7bfa      	ldrb	r2, [r7, #15]
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	333c      	adds	r3, #60	; 0x3c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3340      	adds	r3, #64	; 0x40
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	3301      	adds	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3ad      	bcc.n	800073c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e044      	b.n	8000870 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	440b      	add	r3, r1
 80007f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000828:	7bfa      	ldrb	r2, [r7, #15]
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	440b      	add	r3, r1
 8000836:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	3301      	adds	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3b5      	bcc.n	80007e6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	687e      	ldr	r6, [r7, #4]
 8000882:	466d      	mov	r5, sp
 8000884:	f106 0410 	add.w	r4, r6, #16
 8000888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	602b      	str	r3, [r5, #0]
 8000890:	1d33      	adds	r3, r6, #4
 8000892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f002 f8bf 	bl	8002a18 <USB_DevInit>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2202      	movs	r2, #2
 80008a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00d      	b.n	80008c8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fa30 	bl	8004d26 <USB_DevDisconnect>

  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <HAL_PCD_Start+0x16>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e016      	b.n	8000914 <HAL_PCD_Start+0x44>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 f854 	bl	80029a0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008f8:	2101      	movs	r1, #1
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f008 ff25 	bl	800974a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f004 fa04 	bl	8004d12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fa06 	bl	8004d3a <USB_ReadInterrupts>
 800092e:	4603      	mov	r3, r0
 8000930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000938:	d102      	bne.n	8000940 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fb61 	bl	8001002 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f004 f9f8 	bl	8004d3a <USB_ReadInterrupts>
 800094a:	4603      	mov	r3, r0
 800094c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000954:	d112      	bne.n	800097c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800095e:	b29a      	uxth	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000968:	b292      	uxth	r2, r2
 800096a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f008 fcf3 	bl	800935a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000974:	2100      	movs	r1, #0
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f925 	bl	8000bc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f004 f9da 	bl	8004d3a <USB_ReadInterrupts>
 8000986:	4603      	mov	r3, r0
 8000988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000990:	d10b      	bne.n	80009aa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800099a:	b29a      	uxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009a4:	b292      	uxth	r2, r2
 80009a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f9c3 	bl	8004d3a <USB_ReadInterrupts>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009be:	d10b      	bne.n	80009d8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009d2:	b292      	uxth	r2, r2
 80009d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 f9ac 	bl	8004d3a <USB_ReadInterrupts>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009ec:	d126      	bne.n	8000a3c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0204 	bic.w	r2, r2, #4
 8000a00:	b292      	uxth	r2, r2
 8000a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0208 	bic.w	r2, r2, #8
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f008 fcd4 	bl	80093cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a36:	b292      	uxth	r2, r2
 8000a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f97a 	bl	8004d3a <USB_ReadInterrupts>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a50:	f040 8084 	bne.w	8000b5c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	77fb      	strb	r3, [r7, #31]
 8000a58:	e011      	b.n	8000a7e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	7ffb      	ldrb	r3, [r7, #31]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	441a      	add	r2, r3
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	8812      	ldrh	r2, [r2, #0]
 8000a6a:	b292      	uxth	r2, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	f107 0120 	add.w	r1, r7, #32
 8000a72:	440b      	add	r3, r1
 8000a74:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000a78:	7ffb      	ldrb	r3, [r7, #31]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	77fb      	strb	r3, [r7, #31]
 8000a7e:	7ffb      	ldrb	r3, [r7, #31]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d9ea      	bls.n	8000a5a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	b292      	uxth	r2, r2
 8000a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ab4:	bf00      	nop
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f6      	beq.n	8000ab6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ada:	b292      	uxth	r2, r2
 8000adc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	77fb      	strb	r3, [r7, #31]
 8000ae4:	e010      	b.n	8000b08 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ae6:	7ffb      	ldrb	r3, [r7, #31]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	4611      	mov	r1, r2
 8000aee:	7ffa      	ldrb	r2, [r7, #31]
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	440a      	add	r2, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	f107 0120 	add.w	r1, r7, #32
 8000afa:	440b      	add	r3, r1
 8000afc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b00:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	3301      	adds	r3, #1
 8000b06:	77fb      	strb	r3, [r7, #31]
 8000b08:	7ffb      	ldrb	r3, [r7, #31]
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d9eb      	bls.n	8000ae6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f042 0208 	orr.w	r2, r2, #8
 8000b20:	b292      	uxth	r2, r2
 8000b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b38:	b292      	uxth	r2, r2
 8000b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0204 	orr.w	r2, r2, #4
 8000b50:	b292      	uxth	r2, r2
 8000b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f008 fc1e 	bl	8009398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 f8ea 	bl	8004d3a <USB_ReadInterrupts>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b70:	d10e      	bne.n	8000b90 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b84:	b292      	uxth	r2, r2
 8000b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f008 fbd7 	bl	800933e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 f8d0 	bl	8004d3a <USB_ReadInterrupts>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba4:	d10b      	bne.n	8000bbe <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bb8:	b292      	uxth	r2, r2
 8000bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_PCD_SetAddress+0x1a>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e013      	b.n	8000c08 <HAL_PCD_SetAddress+0x42>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	78fa      	ldrb	r2, [r7, #3]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 f877 	bl	8004cec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	70fb      	strb	r3, [r7, #3]
 8000c22:	460b      	mov	r3, r1
 8000c24:	803b      	strh	r3, [r7, #0]
 8000c26:	4613      	mov	r3, r2
 8000c28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da0e      	bge.n	8000c54 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	705a      	strb	r2, [r3, #1]
 8000c52:	e00e      	b.n	8000c72 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 0207 	and.w	r2, r3, #7
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c7e:	883a      	ldrh	r2, [r7, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	78ba      	ldrb	r2, [r7, #2]
 8000c88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	785b      	ldrb	r3, [r3, #1]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d004      	beq.n	8000c9c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c9c:	78bb      	ldrb	r3, [r7, #2]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d102      	bne.n	8000ca8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <HAL_PCD_EP_Open+0xa6>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e00e      	b.n	8000cd4 <HAL_PCD_EP_Open+0xc4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68f9      	ldr	r1, [r7, #12]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fec7 	bl	8002a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da0e      	bge.n	8000d0e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	705a      	strb	r2, [r3, #1]
 8000d0c:	e00e      	b.n	8000d2c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	f003 0207 	and.w	r2, r3, #7
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_PCD_EP_Close+0x6a>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e00e      	b.n	8000d64 <HAL_PCD_EP_Close+0x88>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68f9      	ldr	r1, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f9e9 	bl	800312c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	f003 0207 	and.w	r2, r3, #7
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2200      	movs	r2, #0
 8000daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d106      	bne.n	8000dd0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6979      	ldr	r1, [r7, #20]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fb9b 	bl	8003504 <USB_EPStartXfer>
 8000dce:	e005      	b.n	8000ddc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6979      	ldr	r1, [r7, #20]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fb94 	bl	8003504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	f003 0207 	and.w	r2, r3, #7
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e08:	681b      	ldr	r3, [r3, #0]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	460b      	mov	r3, r1
 8000e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d106      	bne.n	8000e84 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6979      	ldr	r1, [r7, #20]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fb41 	bl	8003504 <USB_EPStartXfer>
 8000e82:	e005      	b.n	8000e90 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6979      	ldr	r1, [r7, #20]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fb3a 	bl	8003504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	f003 0207 	and.w	r2, r3, #7
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d901      	bls.n	8000eb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e04c      	b.n	8000f52 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da0e      	bge.n	8000ede <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	705a      	strb	r2, [r3, #1]
 8000edc:	e00c      	b.n	8000ef8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2201      	movs	r2, #1
 8000efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_PCD_EP_SetStall+0x7e>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e01c      	b.n	8000f52 <HAL_PCD_EP_SetStall+0xb8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68f9      	ldr	r1, [r7, #12]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fde3 	bl	8004af2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d108      	bne.n	8000f48 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f003 ff08 	bl	8004d58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	f003 020f 	and.w	r2, r3, #15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d901      	bls.n	8000f78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e040      	b.n	8000ffa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da0e      	bge.n	8000f9e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	705a      	strb	r2, [r3, #1]
 8000f9c:	e00e      	b.n	8000fbc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	f003 0207 	and.w	r2, r3, #7
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_PCD_EP_ClrStall+0x82>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e00e      	b.n	8000ffa <HAL_PCD_EP_ClrStall+0xa0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fdd1 	bl	8004b92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b08e      	sub	sp, #56	; 0x38
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800100a:	e2ec      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001014:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001022:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 8161 	bne.w	80012ee <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800102c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d152      	bne.n	80010dc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001056:	b29b      	uxth	r3, r3
 8001058:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3328      	adds	r3, #40	; 0x28
 800105e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001068:	b29b      	uxth	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	3302      	adds	r3, #2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	4413      	add	r3, r2
 800107e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	441a      	add	r2, r3
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f008 f934 	bl	800930a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 829b 	beq.w	80015e6 <PCD_EP_ISR_Handler+0x5e4>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f040 8296 	bne.w	80015e6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010da:	e284      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80010ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d034      	beq.n	8001160 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	3306      	adds	r3, #6
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4413      	add	r3, r2
 8001114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001134:	b29b      	uxth	r3, r3
 8001136:	f003 fe5f 	bl	8004df8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
 8001142:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001146:	4013      	ands	r3, r2
 8001148:	823b      	strh	r3, [r7, #16]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	8a3a      	ldrh	r2, [r7, #16]
 8001150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001154:	b292      	uxth	r2, r2
 8001156:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f008 f8a9 	bl	80092b0 <HAL_PCD_SetupStageCallback>
 800115e:	e242      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001160:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001164:	2b00      	cmp	r3, #0
 8001166:	f280 823e 	bge.w	80015e6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001176:	4013      	ands	r3, r2
 8001178:	83bb      	strh	r3, [r7, #28]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	8bba      	ldrh	r2, [r7, #28]
 8001180:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001184:	b292      	uxth	r2, r2
 8001186:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	3306      	adds	r3, #6
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <PCD_EP_ISR_Handler+0x1ee>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d015      	beq.n	80011f0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	6959      	ldr	r1, [r3, #20]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f003 fe0f 	bl	8004df8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	441a      	add	r2, r3
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f008 f872 	bl	80092d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 81f2 	bne.w	80015e6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001210:	b29b      	uxth	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4413      	add	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d112      	bne.n	8001250 <PCD_EP_ISR_Handler+0x24e>
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001234:	b29a      	uxth	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001248:	b29a      	uxth	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	e02f      	b.n	80012b0 <PCD_EP_ISR_Handler+0x2ae>
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b3e      	cmp	r3, #62	; 0x3e
 8001256:	d813      	bhi.n	8001280 <PCD_EP_ISR_Handler+0x27e>
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <PCD_EP_ISR_Handler+0x270>
 800126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126e:	3301      	adds	r3, #1
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
 8001272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001274:	b29b      	uxth	r3, r3
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	b29a      	uxth	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	e017      	b.n	80012b0 <PCD_EP_ISR_Handler+0x2ae>
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <PCD_EP_ISR_Handler+0x298>
 8001294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001296:	3b01      	subs	r3, #1
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	b29b      	uxth	r3, r3
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012c0:	827b      	strh	r3, [r7, #18]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012c8:	827b      	strh	r3, [r7, #18]
 80012ca:	8a7b      	ldrh	r3, [r7, #18]
 80012cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012d0:	827b      	strh	r3, [r7, #18]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	8a7b      	ldrh	r3, [r7, #18]
 80012d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	8013      	strh	r3, [r2, #0]
 80012ec:	e17b      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001300:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001304:	2b00      	cmp	r3, #0
 8001306:	f280 80ea 	bge.w	80014de <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29a      	uxth	r2, r3
 800131c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001320:	4013      	ands	r3, r2
 8001322:	853b      	strh	r3, [r7, #40]	; 0x28
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001338:	b292      	uxth	r2, r2
 800133a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800133c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	7b1b      	ldrb	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d122      	bne.n	80013a0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	3306      	adds	r3, #6
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	4413      	add	r3, r2
 8001378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001382:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	6959      	ldr	r1, [r3, #20]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	88da      	ldrh	r2, [r3, #6]
 8001398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800139a:	f003 fd2d 	bl	8004df8 <USB_ReadPMA>
 800139e:	e07c      	b.n	800149a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d108      	bne.n	80013ba <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013aa:	461a      	mov	r2, r3
 80013ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f927 	bl	8001602 <HAL_PCD_EP_DB_Receive>
 80013b4:	4603      	mov	r3, r0
 80013b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013b8:	e06f      	b.n	800149a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	441a      	add	r2, r3
 80013e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d021      	beq.n	8001458 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	3302      	adds	r3, #2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800143e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02a      	beq.n	800149a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	6959      	ldr	r1, [r3, #20]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	891a      	ldrh	r2, [r3, #8]
 8001450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001452:	f003 fcd1 	bl	8004df8 <USB_ReadPMA>
 8001456:	e020      	b.n	800149a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001460:	b29b      	uxth	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	3306      	adds	r3, #6
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001480:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	6959      	ldr	r1, [r3, #20]
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	895a      	ldrh	r2, [r3, #10]
 8001494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001496:	f003 fcaf 	bl	8004df8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014a0:	441a      	add	r2, r3
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ac:	441a      	add	r2, r3
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <PCD_EP_ISR_Handler+0x4c2>
 80014ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d206      	bcs.n	80014d2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f007 ff02 	bl	80092d4 <HAL_PCD_DataOutStageCallback>
 80014d0:	e005      	b.n	80014de <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f813 	bl	8003504 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d07e      	beq.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001516:	843b      	strh	r3, [r7, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	441a      	add	r2, r3
 8001526:	8c3b      	ldrh	r3, [r7, #32]
 8001528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800152c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001530:	b29b      	uxth	r3, r3
 8001532:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d00c      	beq.n	8001556 <PCD_EP_ISR_Handler+0x554>
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001548:	2b02      	cmp	r3, #2
 800154a:	d146      	bne.n	80015da <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800154c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d141      	bne.n	80015da <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	3302      	adds	r3, #2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800157e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	8bfb      	ldrh	r3, [r7, #30]
 8001586:	429a      	cmp	r2, r3
 8001588:	d906      	bls.n	8001598 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	8bfb      	ldrh	r3, [r7, #30]
 8001590:	1ad2      	subs	r2, r2, r3
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	619a      	str	r2, [r3, #24]
 8001596:	e002      	b.n	800159e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f007 feac 	bl	800930a <HAL_PCD_DataInStageCallback>
 80015b2:	e018      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	8bfb      	ldrh	r3, [r7, #30]
 80015ba:	441a      	add	r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	8bfb      	ldrh	r3, [r7, #30]
 80015c6:	441a      	add	r2, r3
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 ff96 	bl	8003504 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80015d8:	e005      	b.n	80015e6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80015da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015dc:	461a      	mov	r2, r3
 80015de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f91b 	bl	800181c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f6ff ad0a 	blt.w	800100c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b088      	sub	sp, #32
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	4613      	mov	r3, r2
 800160e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d07e      	beq.n	8001718 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	3302      	adds	r3, #2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001642:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	8b7b      	ldrh	r3, [r7, #26]
 800164a:	429a      	cmp	r2, r3
 800164c:	d306      	bcc.n	800165c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	8b7b      	ldrh	r3, [r7, #26]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e002      	b.n	8001662 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d123      	bne.n	80016b2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001684:	833b      	strh	r3, [r7, #24]
 8001686:	8b3b      	ldrh	r3, [r7, #24]
 8001688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800168c:	833b      	strh	r3, [r7, #24]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	8b3b      	ldrh	r3, [r7, #24]
 800169e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01f      	beq.n	80016fc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	82fb      	strh	r3, [r7, #22]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	441a      	add	r2, r3
 80016e6:	8afb      	ldrh	r3, [r7, #22]
 80016e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80016fc:	8b7b      	ldrh	r3, [r7, #26]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8087 	beq.w	8001812 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	6959      	ldr	r1, [r3, #20]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	891a      	ldrh	r2, [r3, #8]
 8001710:	8b7b      	ldrh	r3, [r7, #26]
 8001712:	f003 fb71 	bl	8004df8 <USB_ReadPMA>
 8001716:	e07c      	b.n	8001812 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	3306      	adds	r3, #6
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001740:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	8b7b      	ldrh	r3, [r7, #26]
 8001748:	429a      	cmp	r2, r3
 800174a:	d306      	bcc.n	800175a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	8b7b      	ldrh	r3, [r7, #26]
 8001752:	1ad2      	subs	r2, r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	e002      	b.n	8001760 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d123      	bne.n	80017b0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	83fb      	strh	r3, [r7, #30]
 8001784:	8bfb      	ldrh	r3, [r7, #30]
 8001786:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800178a:	83fb      	strh	r3, [r7, #30]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	441a      	add	r2, r3
 800179a:	8bfb      	ldrh	r3, [r7, #30]
 800179c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11f      	bne.n	80017fa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d4:	83bb      	strh	r3, [r7, #28]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	441a      	add	r2, r3
 80017e4:	8bbb      	ldrh	r3, [r7, #28]
 80017e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017fa:	8b7b      	ldrh	r3, [r7, #26]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	6959      	ldr	r1, [r3, #20]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	895a      	ldrh	r2, [r3, #10]
 800180c:	8b7b      	ldrh	r3, [r7, #26]
 800180e:	f003 faf3 	bl	8004df8 <USB_ReadPMA>
    }
  }

  return count;
 8001812:	8b7b      	ldrh	r3, [r7, #26]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0a2      	sub	sp, #136	; 0x88
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 81c7 	beq.w	8001bc4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	3302      	adds	r3, #2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800185e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800186a:	429a      	cmp	r2, r3
 800186c:	d907      	bls.n	800187e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	e002      	b.n	8001884 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 80b9 	bne.w	8001a00 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	4413      	add	r3, r2
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	011a      	lsls	r2, r3, #4
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	4413      	add	r3, r2
 80018b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018dc:	b29a      	uxth	r2, r3
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	e01a      	b.n	800191a <HAL_PCD_EP_DB_Transmit+0xfe>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d116      	bne.n	800191a <HAL_PCD_EP_DB_Transmit+0xfe>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001900:	4413      	add	r3, r2
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	011a      	lsls	r2, r3, #4
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	4413      	add	r3, r2
 800190e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d126      	bne.n	8001976 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4413      	add	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	011a      	lsls	r2, r3, #4
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4413      	add	r3, r2
 800194a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800195a:	b29a      	uxth	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196e:	b29a      	uxth	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e017      	b.n	80019a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d113      	bne.n	80019a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	4413      	add	r3, r2
 800198e:	623b      	str	r3, [r7, #32]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	011a      	lsls	r2, r3, #4
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	4413      	add	r3, r2
 800199a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f007 fcac 	bl	800930a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 82d4 	beq.w	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d8:	827b      	strh	r3, [r7, #18]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	441a      	add	r2, r3
 80019e8:	8a7b      	ldrh	r3, [r7, #18]
 80019ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	8013      	strh	r3, [r2, #0]
 80019fe:	e2b2      	b.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d021      	beq.n	8001a4e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f040 8286 	bne.w	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a62:	441a      	add	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a70:	441a      	add	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d309      	bcc.n	8001a96 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	e015      	b.n	8001ac2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aa2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aac:	e009      	b.n	8001ac2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d155      	bne.n	8001b76 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ade:	4413      	add	r3, r2
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	011a      	lsls	r2, r3, #4
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	4413      	add	r3, r2
 8001aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
 8001af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_PCD_EP_DB_Transmit+0x302>
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	801a      	strh	r2, [r3, #0]
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	801a      	strh	r2, [r3, #0]
 8001b1c:	e047      	b.n	8001bae <HAL_PCD_EP_DB_Transmit+0x392>
 8001b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b20:	2b3e      	cmp	r3, #62	; 0x3e
 8001b22:	d811      	bhi.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_PCD_EP_DB_Transmit+0x31e>
 8001b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b36:	3301      	adds	r3, #1
 8001b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	e032      	b.n	8001bae <HAL_PCD_EP_DB_Transmit+0x392>
 8001b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_EP_DB_Transmit+0x342>
 8001b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	801a      	strh	r2, [r3, #0]
 8001b74:	e01b      	b.n	8001bae <HAL_PCD_EP_DB_Transmit+0x392>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d117      	bne.n	8001bae <HAL_PCD_EP_DB_Transmit+0x392>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b92:	4413      	add	r3, r2
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	011a      	lsls	r2, r3, #4
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6959      	ldr	r1, [r3, #20]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	891a      	ldrh	r2, [r3, #8]
 8001bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f003 f8d6 	bl	8004d6e <USB_WritePMA>
 8001bc2:	e1d0      	b.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3306      	adds	r3, #6
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d307      	bcc.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	619a      	str	r2, [r3, #24]
 8001c0a:	e002      	b.n	8001c12 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80c4 	bne.w	8001da4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d126      	bne.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x456>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c38:	4413      	add	r3, r2
 8001c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	011a      	lsls	r2, r3, #4
 8001c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c44:	4413      	add	r3, r2
 8001c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e01a      	b.n	8001ca8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d116      	bne.n	8001ca8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8e:	4413      	add	r3, r2
 8001c90:	677b      	str	r3, [r7, #116]	; 0x74
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	011a      	lsls	r2, r3, #4
 8001c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12f      	bne.n	8001d16 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cce:	4413      	add	r3, r2
 8001cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	011a      	lsls	r2, r3, #4
 8001cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cde:	4413      	add	r3, r2
 8001ce0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	e017      	b.n	8001d46 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d113      	bne.n	8001d46 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d2c:	4413      	add	r3, r2
 8001d2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	011a      	lsls	r2, r3, #4
 8001d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d38:	4413      	add	r3, r2
 8001d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f007 fadc 	bl	800930a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f040 8104 	bne.w	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	8013      	strh	r3, [r2, #0]
 8001da2:	e0e0      	b.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d121      	bne.n	8001df2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f040 80b4 	bne.w	8001f66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e06:	441a      	add	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e14:	441a      	add	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d309      	bcc.n	8001e3a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6a1a      	ldr	r2, [r3, #32]
 8001e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	e015      	b.n	8001e66 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d107      	bne.n	8001e52 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e50:	e009      	b.n	8001e66 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d155      	bne.n	8001f20 <HAL_PCD_EP_DB_Transmit+0x704>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e88:	4413      	add	r3, r2
 8001e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	011a      	lsls	r2, r3, #4
 8001e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d112      	bne.n	8001ec8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	e044      	b.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x736>
 8001ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eca:	2b3e      	cmp	r3, #62	; 0x3e
 8001ecc:	d811      	bhi.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	e02f      	b.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x736>
 8001ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	3b01      	subs	r3, #1
 8001f06:	657b      	str	r3, [r7, #84]	; 0x54
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	029b      	lsls	r3, r3, #10
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e018      	b.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d114      	bne.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f36:	4413      	add	r3, r2
 8001f38:	667b      	str	r3, [r7, #100]	; 0x64
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	011a      	lsls	r2, r3, #4
 8001f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f42:	4413      	add	r3, r2
 8001f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f48:	663b      	str	r3, [r7, #96]	; 0x60
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f50:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6959      	ldr	r1, [r3, #20]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	895a      	ldrh	r2, [r3, #10]
 8001f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f002 ff04 	bl	8004d6e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f80:	823b      	strh	r3, [r7, #16]
 8001f82:	8a3b      	ldrh	r3, [r7, #16]
 8001f84:	f083 0310 	eor.w	r3, r3, #16
 8001f88:	823b      	strh	r3, [r7, #16]
 8001f8a:	8a3b      	ldrh	r3, [r7, #16]
 8001f8c:	f083 0320 	eor.w	r3, r3, #32
 8001f90:	823b      	strh	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	441a      	add	r2, r3
 8001fa0:	8a3b      	ldrh	r3, [r7, #16]
 8001fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3788      	adds	r7, #136	; 0x88
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	817b      	strh	r3, [r7, #10]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e009      	b.n	800200a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff6:	897a      	ldrh	r2, [r7, #10]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2200      	movs	r2, #0
 8002014:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b29a      	uxth	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	80da      	strh	r2, [r3, #6]
 800201e:	e00b      	b.n	8002038 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2201      	movs	r2, #1
 8002024:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	b29a      	uxth	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	b29a      	uxth	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e26c      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002064:	4b92      	ldr	r3, [pc, #584]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b04      	cmp	r3, #4
 800206e:	d00c      	beq.n	800208a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002070:	4b8f      	ldr	r3, [pc, #572]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d112      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
 800207c:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d10b      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06c      	beq.n	8002170 <HAL_RCC_OscConfig+0x12c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d168      	bne.n	8002170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e246      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x76>
 80020ac:	4b80      	ldr	r3, [pc, #512]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a7f      	ldr	r2, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e02e      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x98>
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0xbc>
 80020e6:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a71      	ldr	r2, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6a      	ldr	r2, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a67      	ldr	r2, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7fe f9b4 	bl	800048c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe f9b0 	bl	800048c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1fa      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xe4>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe f9a0 	bl	800048c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe f99c 	bl	800048c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1e6      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x10c>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1ba      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4939      	ldr	r1, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe f955 	bl	800048c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7fe f951 	bl	800048c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e19b      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4927      	ldr	r1, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe f934 	bl	800048c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7fe f930 	bl	800048c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e17a      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03a      	beq.n	80022c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d019      	beq.n	800228e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe f914 	bl	800048c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7fe f910 	bl	800048c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e15a      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 faa6 	bl	80027d8 <RCC_Delay>
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe f8fa 	bl	800048c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229a:	e00f      	b.n	80022bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe f8f6 	bl	800048c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d908      	bls.n	80022bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e140      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	42420000 	.word	0x42420000
 80022b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b9e      	ldr	r3, [pc, #632]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e9      	bne.n	800229c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a6 	beq.w	8002422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b97      	ldr	r3, [pc, #604]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b94      	ldr	r3, [pc, #592]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a93      	ldr	r2, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	4b91      	ldr	r3, [pc, #580]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a8a      	ldr	r2, [pc, #552]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe f8b7 	bl	800048c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe f8b3 	bl	800048c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0fd      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x312>
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a7a      	ldr	r2, [pc, #488]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	e02d      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x334>
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a72      	ldr	r2, [pc, #456]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	e01c      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x356>
 8002380:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6c      	ldr	r2, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 800239a:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe f867 	bl	800048c <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe f863 	bl	800048c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0ab      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ee      	beq.n	80023c2 <HAL_RCC_OscConfig+0x37e>
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe f851 	bl	800048c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe f84d 	bl	800048c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e095      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ee      	bne.n	80023ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8081 	beq.w	800252e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d061      	beq.n	80024fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d146      	bne.n	80024ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe f821 	bl	800048c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe f81d 	bl	800048c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e067      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002476:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	492d      	ldr	r1, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a19      	ldr	r1, [r3, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	430b      	orrs	r3, r1
 800249a:	4927      	ldr	r1, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fd fff1 	bl	800048c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fd ffed 	bl	800048c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e037      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x46a>
 80024cc:	e02f      	b.n	800252e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fd ffda 	bl	800048c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fd ffd6 	bl	800048c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e020      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x498>
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	429a      	cmp	r2, r3
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	42420060 	.word	0x42420060

08002544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4965      	ldr	r1, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fd ff2a 	bl	800048c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fd ff26 	bl	800048c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4922      	ldr	r1, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fe88 	bl	8000408 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	080098e4 	.word	0x080098e4
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b490      	push	{r4, r7}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002720:	1d3c      	adds	r4, r7, #4
 8002722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002728:	f240 2301 	movw	r3, #513	; 0x201
 800272c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x40>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x46>
 8002756:	e02d      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	e02d      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800276a:	4413      	add	r3, r2
 800276c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002770:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c5b      	lsrs	r3, r3, #17
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800278a:	4413      	add	r3, r2
 800278c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002790:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	fb02 f203 	mul.w	r2, r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	e004      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	623b      	str	r3, [r7, #32]
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6a3b      	ldr	r3, [r7, #32]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc90      	pop	{r4, r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	08009850 	.word	0x08009850
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	003d0900 	.word	0x003d0900

080027d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCC_Delay+0x34>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <RCC_Delay+0x38>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a5b      	lsrs	r3, r3, #9
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f4:	bf00      	nop
  }
  while (Delay --);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <RCC_Delay+0x1c>
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000000 	.word	0x20000000
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d07d      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a4b      	ldr	r2, [pc, #300]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
 800284c:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002874:	f7fd fe0a 	bl	800048c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	e008      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fd fe06 	bl	800048c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e06d      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d02e      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d027      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ce:	4a29      	ldr	r2, [pc, #164]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fd fdd5 	bl	800048c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fd fdd1 	bl	800048c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e036      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ee      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4917      	ldr	r1, [pc, #92]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	4313      	orrs	r3, r2
 8002918:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	490b      	ldr	r1, [pc, #44]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4904      	ldr	r1, [pc, #16]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	40007000 	.word	0x40007000
 800297c:	42420440 	.word	0x42420440

08002980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002980:	b084      	sub	sp, #16
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	f107 0014 	add.w	r0, r7, #20
 800298e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	b004      	add	sp, #16
 800299e:	4770      	bx	lr

080029a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a18:	b084      	sub	sp, #16
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	f107 0014 	add.w	r0, r7, #20
 8002a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	b004      	add	sp, #16
 8002a56:	4770      	bx	lr

08002a58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b09b      	sub	sp, #108	; 0x6c
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d81f      	bhi.n	8002aca <USB_ActivateEndpoint+0x72>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <USB_ActivateEndpoint+0x38>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002abd 	.word	0x08002abd
 8002a98:	08002ad3 	.word	0x08002ad3
 8002a9c:	08002aaf 	.word	0x08002aaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002aa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002aac:	e012      	b.n	8002ad4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002aae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ab2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ab6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002aba:	e00b      	b.n	8002ad4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002abc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ac8:	e004      	b.n	8002ad4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ad0:	e000      	b.n	8002ad4 <USB_ActivateEndpoint+0x7c>
      break;
 8002ad2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 8149 	bne.w	8002dd8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8084 	beq.w	8002c58 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	011a      	lsls	r2, r3, #4
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	88db      	ldrh	r3, [r3, #6]
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	81fb      	strh	r3, [r7, #14]
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <USB_ActivateEndpoint+0x17c>
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	81bb      	strh	r3, [r7, #12]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	89bb      	ldrh	r3, [r7, #12]
 8002bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	78db      	ldrb	r3, [r3, #3]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d020      	beq.n	8002c1e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf2:	813b      	strh	r3, [r7, #8]
 8002bf4:	893b      	ldrh	r3, [r7, #8]
 8002bf6:	f083 0320 	eor.w	r3, r3, #32
 8002bfa:	813b      	strh	r3, [r7, #8]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8013      	strh	r3, [r2, #0]
 8002c1c:	e27f      	b.n	800311e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	897b      	ldrh	r3, [r7, #10]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e262      	b.n	800311e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	4413      	add	r3, r2
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	88db      	ldrh	r3, [r3, #6]
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	4413      	add	r3, r2
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	011a      	lsls	r2, r3, #4
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	4413      	add	r3, r2
 8002caa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d112      	bne.n	8002cde <USB_ActivateEndpoint+0x286>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	801a      	strh	r2, [r3, #0]
 8002cdc:	e02f      	b.n	8002d3e <USB_ActivateEndpoint+0x2e6>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce4:	d813      	bhi.n	8002d0e <USB_ActivateEndpoint+0x2b6>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	663b      	str	r3, [r7, #96]	; 0x60
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <USB_ActivateEndpoint+0x2a8>
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e017      	b.n	8002d3e <USB_ActivateEndpoint+0x2e6>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <USB_ActivateEndpoint+0x2d0>
 8002d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d24:	3b01      	subs	r3, #1
 8002d26:	663b      	str	r3, [r7, #96]	; 0x60
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	029b      	lsls	r3, r3, #10
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	83fb      	strh	r3, [r7, #30]
 8002d4c:	8bfb      	ldrh	r3, [r7, #30]
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01b      	beq.n	8002d8e <USB_ActivateEndpoint+0x336>
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	83bb      	strh	r3, [r7, #28]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	8bbb      	ldrh	r3, [r7, #28]
 8002d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da4:	837b      	strh	r3, [r7, #26]
 8002da6:	8b7b      	ldrh	r3, [r7, #26]
 8002da8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002dac:	837b      	strh	r3, [r7, #26]
 8002dae:	8b7b      	ldrh	r3, [r7, #26]
 8002db0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002db4:	837b      	strh	r3, [r7, #26]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	441a      	add	r2, r3
 8002dc0:	8b7b      	ldrh	r3, [r7, #26]
 8002dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	8013      	strh	r3, [r2, #0]
 8002dd6:	e1a2      	b.n	800311e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e24:	4413      	add	r3, r2
 8002e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	011a      	lsls	r2, r3, #4
 8002e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	891b      	ldrh	r3, [r3, #8]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e58:	4413      	add	r3, r2
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	011a      	lsls	r2, r3, #4
 8002e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	895b      	ldrh	r3, [r3, #10]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 8091 	bne.w	8002fa8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01b      	beq.n	8002ed6 <USB_ActivateEndpoint+0x47e>
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	873b      	strh	r3, [r7, #56]	; 0x38
 8002ee4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01b      	beq.n	8002f26 <USB_ActivateEndpoint+0x4ce>
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	441a      	add	r2, r3
 8002f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	441a      	add	r2, r3
 8002f90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	8013      	strh	r3, [r2, #0]
 8002fa6:	e0ba      	b.n	800311e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002fb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01d      	beq.n	8003000 <USB_ActivateEndpoint+0x5a8>
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	441a      	add	r2, r3
 8002fe8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003010:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01d      	beq.n	8003058 <USB_ActivateEndpoint+0x600>
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003054:	b29b      	uxth	r3, r3
 8003056:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	78db      	ldrb	r3, [r3, #3]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d024      	beq.n	80030aa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003076:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800307a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800307e:	f083 0320 	eor.w	r3, r3, #32
 8003082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	8013      	strh	r3, [r2, #0]
 80030a8:	e01d      	b.n	80030e6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800311e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003122:	4618      	mov	r0, r3
 8003124:	376c      	adds	r7, #108	; 0x6c
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800312c:	b480      	push	{r7}
 800312e:	b08d      	sub	sp, #52	; 0x34
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b1b      	ldrb	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 808e 	bne.w	800325c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d044      	beq.n	80031d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	81bb      	strh	r3, [r7, #12]
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <USB_DeactivateEndpoint+0x6c>
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ae:	813b      	strh	r3, [r7, #8]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]
 80031d0:	e192      	b.n	80034f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	827b      	strh	r3, [r7, #18]
 80031e0:	8a7b      	ldrh	r3, [r7, #18]
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01b      	beq.n	8003222 <USB_DeactivateEndpoint+0xf6>
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	823b      	strh	r3, [r7, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	8a3b      	ldrh	r3, [r7, #16]
 800320e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	81fb      	strh	r3, [r7, #14]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	89fb      	ldrh	r3, [r7, #14]
 8003246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003256:	b29b      	uxth	r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
 800325a:	e14d      	b.n	80034f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 80a5 	bne.w	80033b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	843b      	strh	r3, [r7, #32]
 8003274:	8c3b      	ldrh	r3, [r7, #32]
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01b      	beq.n	80032b6 <USB_DeactivateEndpoint+0x18a>
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	83fb      	strh	r3, [r7, #30]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	8bfb      	ldrh	r3, [r7, #30]
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	83bb      	strh	r3, [r7, #28]
 80032c4:	8bbb      	ldrh	r3, [r7, #28]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01b      	beq.n	8003306 <USB_DeactivateEndpoint+0x1da>
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e4:	837b      	strh	r3, [r7, #26]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331c:	833b      	strh	r3, [r7, #24]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	8b3b      	ldrh	r3, [r7, #24]
 800332a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800333a:	b29b      	uxth	r3, r3
 800333c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	82fb      	strh	r3, [r7, #22]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	8afb      	ldrh	r3, [r7, #22]
 8003362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338c:	82bb      	strh	r3, [r7, #20]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8abb      	ldrh	r3, [r7, #20]
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
 80033ae:	e0a3      	b.n	80034f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80033be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <USB_DeactivateEndpoint+0x2d4>
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800340e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <USB_DeactivateEndpoint+0x324>
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800343c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003448:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800344c:	b29b      	uxth	r3, r3
 800344e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	b29b      	uxth	r3, r3
 8003486:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	441a      	add	r2, r3
 80034aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034bc:	b29b      	uxth	r3, r3
 80034be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3734      	adds	r7, #52	; 0x34
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0cc      	sub	sp, #304	; 0x130
 8003508:	af00      	add	r7, sp, #0
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	6018      	str	r0, [r3, #0]
 800350e:	463b      	mov	r3, r7
 8003510:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003512:	463b      	mov	r3, r7
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	785b      	ldrb	r3, [r3, #1]
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 872e 	bne.w	800437a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800351e:	463b      	mov	r3, r7
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	463b      	mov	r3, r7
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d905      	bls.n	800353a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800352e:	463b      	mov	r3, r7
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003538:	e004      	b.n	8003544 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800353a:	463b      	mov	r3, r7
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003544:	463b      	mov	r3, r7
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	7b1b      	ldrb	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d134      	bne.n	80035b8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800354e:	463b      	mov	r3, r7
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6959      	ldr	r1, [r3, #20]
 8003554:	463b      	mov	r3, r7
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	88da      	ldrh	r2, [r3, #6]
 800355a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800355e:	b29b      	uxth	r3, r3
 8003560:	1d38      	adds	r0, r7, #4
 8003562:	6800      	ldr	r0, [r0, #0]
 8003564:	f001 fc03 	bl	8004d6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	1d3a      	adds	r2, r7, #4
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	f107 0310 	add.w	r3, r7, #16
 8003582:	f107 0210 	add.w	r2, r7, #16
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	440a      	add	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	463b      	mov	r3, r7
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	011a      	lsls	r2, r3, #4
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80035a0:	f107 030c 	add.w	r3, r7, #12
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	f000 beac 	b.w	8004310 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80035b8:	463b      	mov	r3, r7
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	f040 838c 	bne.w	8003cdc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80035c4:	463b      	mov	r3, r7
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	463b      	mov	r3, r7
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f240 8330 	bls.w	8003c36 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	463b      	mov	r3, r7
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	463b      	mov	r3, r7
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	441a      	add	r2, r3
 8003602:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800361a:	463b      	mov	r3, r7
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003624:	1ad2      	subs	r2, r2, r3
 8003626:	463b      	mov	r3, r7
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	463b      	mov	r3, r7
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 819e 	beq.w	8003984 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800364c:	1d3a      	adds	r2, r7, #4
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	463b      	mov	r3, r7
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d17a      	bne.n	8003752 <USB_EPStartXfer+0x24e>
 800365c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003660:	1d3a      	adds	r2, r7, #4
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003676:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	440a      	add	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	463b      	mov	r3, r7
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	011a      	lsls	r2, r3, #4
 8003688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11a      	bne.n	80036d8 <USB_EPStartXfer+0x1d4>
 80036a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	e062      	b.n	800379e <USB_EPStartXfer+0x29a>
 80036d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036dc:	2b3e      	cmp	r3, #62	; 0x3e
 80036de:	d819      	bhi.n	8003714 <USB_EPStartXfer+0x210>
 80036e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <USB_EPStartXfer+0x1fc>
 80036f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036fa:	3301      	adds	r3, #1
 80036fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003704:	b29b      	uxth	r3, r3
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	b29a      	uxth	r2, r3
 800370a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e044      	b.n	800379e <USB_EPStartXfer+0x29a>
 8003714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800371e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <USB_EPStartXfer+0x230>
 800372a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800372e:	3b01      	subs	r3, #1
 8003730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003738:	b29b      	uxth	r3, r3
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	b29b      	uxth	r3, r3
 800373e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003746:	b29a      	uxth	r2, r3
 8003748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e025      	b.n	800379e <USB_EPStartXfer+0x29a>
 8003752:	463b      	mov	r3, r7
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d120      	bne.n	800379e <USB_EPStartXfer+0x29a>
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	4619      	mov	r1, r3
 8003768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800376c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	440a      	add	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	463b      	mov	r3, r7
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	011a      	lsls	r2, r3, #4
 800377e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4413      	add	r3, r2
 8003786:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800378a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003794:	b29a      	uxth	r2, r3
 8003796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800379e:	463b      	mov	r3, r7
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	895b      	ldrh	r3, [r3, #10]
 80037a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037a8:	463b      	mov	r3, r7
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6959      	ldr	r1, [r3, #20]
 80037ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80037b8:	1d38      	adds	r0, r7, #4
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	f001 fad7 	bl	8004d6e <USB_WritePMA>
            ep->xfer_buff += len;
 80037c0:	463b      	mov	r3, r7
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ca:	441a      	add	r2, r3
 80037cc:	463b      	mov	r3, r7
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80037d2:	463b      	mov	r3, r7
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	463b      	mov	r3, r7
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d909      	bls.n	80037f6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80037e2:	463b      	mov	r3, r7
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ec:	1ad2      	subs	r2, r2, r3
 80037ee:	463b      	mov	r3, r7
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	621a      	str	r2, [r3, #32]
 80037f4:	e008      	b.n	8003808 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80037f6:	463b      	mov	r3, r7
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003800:	463b      	mov	r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003808:	463b      	mov	r3, r7
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d17a      	bne.n	8003908 <USB_EPStartXfer+0x404>
 8003812:	f107 0318 	add.w	r3, r7, #24
 8003816:	1d3a      	adds	r2, r7, #4
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003824:	b29b      	uxth	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	f107 0218 	add.w	r2, r7, #24
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	440a      	add	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	463b      	mov	r3, r7
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	011a      	lsls	r2, r3, #4
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11a      	bne.n	800388e <USB_EPStartXfer+0x38a>
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003866:	b29a      	uxth	r2, r3
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e067      	b.n	800395e <USB_EPStartXfer+0x45a>
 800388e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003892:	2b3e      	cmp	r3, #62	; 0x3e
 8003894:	d819      	bhi.n	80038ca <USB_EPStartXfer+0x3c6>
 8003896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <USB_EPStartXfer+0x3b2>
 80038ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038b0:	3301      	adds	r3, #1
 80038b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	b29a      	uxth	r2, r3
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	e049      	b.n	800395e <USB_EPStartXfer+0x45a>
 80038ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <USB_EPStartXfer+0x3e6>
 80038e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038e4:	3b01      	subs	r3, #1
 80038e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	029b      	lsls	r3, r3, #10
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	e02a      	b.n	800395e <USB_EPStartXfer+0x45a>
 8003908:	463b      	mov	r3, r7
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d125      	bne.n	800395e <USB_EPStartXfer+0x45a>
 8003912:	f107 0320 	add.w	r3, r7, #32
 8003916:	1d3a      	adds	r2, r7, #4
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003924:	b29b      	uxth	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	f107 0320 	add.w	r3, r7, #32
 800392c:	f107 0220 	add.w	r2, r7, #32
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	440a      	add	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	011a      	lsls	r2, r3, #4
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4413      	add	r3, r2
 8003946:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003954:	b29a      	uxth	r2, r3
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	891b      	ldrh	r3, [r3, #8]
 8003964:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6959      	ldr	r1, [r3, #20]
 800396e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003972:	b29b      	uxth	r3, r3
 8003974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003978:	1d38      	adds	r0, r7, #4
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f001 f9f7 	bl	8004d6e <USB_WritePMA>
 8003980:	f000 bcc6 	b.w	8004310 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d164      	bne.n	8003a58 <USB_EPStartXfer+0x554>
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a2:	4413      	add	r3, r2
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a6:	463b      	mov	r3, r7
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	011a      	lsls	r2, r3, #4
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b0:	4413      	add	r3, r2
 80039b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
 80039b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d112      	bne.n	80039e6 <USB_EPStartXfer+0x4e2>
 80039c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e057      	b.n	8003a96 <USB_EPStartXfer+0x592>
 80039e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ea:	2b3e      	cmp	r3, #62	; 0x3e
 80039ec:	d817      	bhi.n	8003a1e <USB_EPStartXfer+0x51a>
 80039ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <USB_EPStartXfer+0x50a>
 8003a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	e03b      	b.n	8003a96 <USB_EPStartXfer+0x592>
 8003a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <USB_EPStartXfer+0x53a>
 8003a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	e01e      	b.n	8003a96 <USB_EPStartXfer+0x592>
 8003a58:	463b      	mov	r3, r7
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d119      	bne.n	8003a96 <USB_EPStartXfer+0x592>
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a76:	4413      	add	r3, r2
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a96:	463b      	mov	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	891b      	ldrh	r3, [r3, #8]
 8003a9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ab0:	1d38      	adds	r0, r7, #4
 8003ab2:	6800      	ldr	r0, [r0, #0]
 8003ab4:	f001 f95b 	bl	8004d6e <USB_WritePMA>
            ep->xfer_buff += len;
 8003ab8:	463b      	mov	r3, r7
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac2:	441a      	add	r2, r3
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003aca:	463b      	mov	r3, r7
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1a      	ldr	r2, [r3, #32]
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d909      	bls.n	8003aee <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003ada:	463b      	mov	r3, r7
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	621a      	str	r2, [r3, #32]
 8003aec:	e008      	b.n	8003b00 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003aee:	463b      	mov	r3, r7
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003af8:	463b      	mov	r3, r7
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2200      	movs	r2, #0
 8003afe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
 8003b06:	463b      	mov	r3, r7
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d164      	bne.n	8003bda <USB_EPStartXfer+0x6d6>
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	4413      	add	r3, r2
 8003b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b28:	463b      	mov	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	011a      	lsls	r2, r3, #4
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	4413      	add	r3, r2
 8003b34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d112      	bne.n	8003b68 <USB_EPStartXfer+0x664>
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e054      	b.n	8003c12 <USB_EPStartXfer+0x70e>
 8003b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b6e:	d817      	bhi.n	8003ba0 <USB_EPStartXfer+0x69c>
 8003b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <USB_EPStartXfer+0x68c>
 8003b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e038      	b.n	8003c12 <USB_EPStartXfer+0x70e>
 8003ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <USB_EPStartXfer+0x6bc>
 8003bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	e01b      	b.n	8003c12 <USB_EPStartXfer+0x70e>
 8003bda:	463b      	mov	r3, r7
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d116      	bne.n	8003c12 <USB_EPStartXfer+0x70e>
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	4413      	add	r3, r2
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	011a      	lsls	r2, r3, #4
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c12:	463b      	mov	r3, r7
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	895b      	ldrh	r3, [r3, #10]
 8003c18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6959      	ldr	r1, [r3, #20]
 8003c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c2c:	1d38      	adds	r0, r7, #4
 8003c2e:	6800      	ldr	r0, [r0, #0]
 8003c30:	f001 f89d 	bl	8004d6e <USB_WritePMA>
 8003c34:	e36c      	b.n	8004310 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003c36:	463b      	mov	r3, r7
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	463b      	mov	r3, r7
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	463b      	mov	r3, r7
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	441a      	add	r2, r3
 8003c6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	4413      	add	r3, r2
 8003c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	011a      	lsls	r2, r3, #4
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003cb8:	463b      	mov	r3, r7
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	891b      	ldrh	r3, [r3, #8]
 8003cbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6959      	ldr	r1, [r3, #20]
 8003cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003cd2:	1d38      	adds	r0, r7, #4
 8003cd4:	6800      	ldr	r0, [r0, #0]
 8003cd6:	f001 f84a 	bl	8004d6e <USB_WritePMA>
 8003cda:	e319      	b.n	8004310 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	463b      	mov	r3, r7
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d20:	463b      	mov	r3, r7
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	463b      	mov	r3, r7
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8162 	beq.w	8004012 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d56:	463b      	mov	r3, r7
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d164      	bne.n	8003e2a <USB_EPStartXfer+0x926>
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d74:	4413      	add	r3, r2
 8003d76:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d78:	463b      	mov	r3, r7
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	011a      	lsls	r2, r3, #4
 8003d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d88:	677b      	str	r3, [r7, #116]	; 0x74
 8003d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d112      	bne.n	8003db8 <USB_EPStartXfer+0x8b4>
 8003d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e057      	b.n	8003e68 <USB_EPStartXfer+0x964>
 8003db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8003dbe:	d817      	bhi.n	8003df0 <USB_EPStartXfer+0x8ec>
 8003dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <USB_EPStartXfer+0x8dc>
 8003dd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003de0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	e03b      	b.n	8003e68 <USB_EPStartXfer+0x964>
 8003df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <USB_EPStartXfer+0x90c>
 8003e06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e01e      	b.n	8003e68 <USB_EPStartXfer+0x964>
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <USB_EPStartXfer+0x964>
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e44:	4413      	add	r3, r2
 8003e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e56:	4413      	add	r3, r2
 8003e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003e68:	463b      	mov	r3, r7
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	895b      	ldrh	r3, [r3, #10]
 8003e6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e72:	463b      	mov	r3, r7
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6959      	ldr	r1, [r3, #20]
 8003e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e82:	1d38      	adds	r0, r7, #4
 8003e84:	6800      	ldr	r0, [r0, #0]
 8003e86:	f000 ff72 	bl	8004d6e <USB_WritePMA>
          ep->xfer_buff += len;
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e94:	441a      	add	r2, r3
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d909      	bls.n	8003ec0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003eac:	463b      	mov	r3, r7
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb6:	1ad2      	subs	r2, r2, r3
 8003eb8:	463b      	mov	r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	621a      	str	r2, [r3, #32]
 8003ebe:	e008      	b.n	8003ed2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003eca:	463b      	mov	r3, r7
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 821a 	beq.w	8004310 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003edc:	463b      	mov	r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d164      	bne.n	8003fb0 <USB_EPStartXfer+0xaac>
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efa:	4413      	add	r3, r2
 8003efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003efe:	463b      	mov	r3, r7
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f08:	4413      	add	r3, r2
 8003f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d112      	bne.n	8003f3e <USB_EPStartXfer+0xa3a>
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e057      	b.n	8003fee <USB_EPStartXfer+0xaea>
 8003f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f42:	2b3e      	cmp	r3, #62	; 0x3e
 8003f44:	d817      	bhi.n	8003f76 <USB_EPStartXfer+0xa72>
 8003f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <USB_EPStartXfer+0xa62>
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	3301      	adds	r3, #1
 8003f62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	e03b      	b.n	8003fee <USB_EPStartXfer+0xaea>
 8003f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <USB_EPStartXfer+0xa92>
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	3b01      	subs	r3, #1
 8003f92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	029b      	lsls	r3, r3, #10
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e01e      	b.n	8003fee <USB_EPStartXfer+0xaea>
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d119      	bne.n	8003fee <USB_EPStartXfer+0xaea>
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fce:	4413      	add	r3, r2
 8003fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fdc:	4413      	add	r3, r2
 8003fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003fee:	463b      	mov	r3, r7
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	891b      	ldrh	r3, [r3, #8]
 8003ff4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6959      	ldr	r1, [r3, #20]
 8003ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004002:	b29b      	uxth	r3, r3
 8004004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004008:	1d38      	adds	r0, r7, #4
 800400a:	6800      	ldr	r0, [r0, #0]
 800400c:	f000 feaf 	bl	8004d6e <USB_WritePMA>
 8004010:	e17e      	b.n	8004310 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004012:	463b      	mov	r3, r7
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d16f      	bne.n	80040fc <USB_EPStartXfer+0xbf8>
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004034:	4413      	add	r3, r2
 8004036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800403a:	463b      	mov	r3, r7
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	011a      	lsls	r2, r3, #4
 8004042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004046:	4413      	add	r3, r2
 8004048:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d116      	bne.n	8004086 <USB_EPStartXfer+0xb82>
 8004058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004064:	b29a      	uxth	r2, r3
 8004066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407c:	b29a      	uxth	r2, r3
 800407e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e05f      	b.n	8004146 <USB_EPStartXfer+0xc42>
 8004086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800408a:	2b3e      	cmp	r3, #62	; 0x3e
 800408c:	d818      	bhi.n	80040c0 <USB_EPStartXfer+0xbbc>
 800408e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <USB_EPStartXfer+0xbaa>
 80040a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040a8:	3301      	adds	r3, #1
 80040aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e042      	b.n	8004146 <USB_EPStartXfer+0xc42>
 80040c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <USB_EPStartXfer+0xbdc>
 80040d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040da:	3b01      	subs	r3, #1
 80040dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e024      	b.n	8004146 <USB_EPStartXfer+0xc42>
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d11f      	bne.n	8004146 <USB_EPStartXfer+0xc42>
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800411e:	4413      	add	r3, r2
 8004120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004124:	463b      	mov	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004130:	4413      	add	r3, r2
 8004132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800413a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800413e:	b29a      	uxth	r2, r3
 8004140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004144:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004146:	463b      	mov	r3, r7
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	891b      	ldrh	r3, [r3, #8]
 800414c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415a:	b29b      	uxth	r3, r3
 800415c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004160:	1d38      	adds	r0, r7, #4
 8004162:	6800      	ldr	r0, [r0, #0]
 8004164:	f000 fe03 	bl	8004d6e <USB_WritePMA>
          ep->xfer_buff += len;
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004172:	441a      	add	r2, r3
 8004174:	463b      	mov	r3, r7
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	463b      	mov	r3, r7
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d909      	bls.n	800419e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004194:	1ad2      	subs	r2, r2, r3
 8004196:	463b      	mov	r3, r7
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	621a      	str	r2, [r3, #32]
 800419c:	e008      	b.n	80041b0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80041a8:	463b      	mov	r3, r7
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80041b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80ab 	beq.w	8004310 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d16f      	bne.n	80042ac <USB_EPStartXfer+0xda8>
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041dc:	b29b      	uxth	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e4:	4413      	add	r3, r2
 80041e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041ea:	463b      	mov	r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f6:	4413      	add	r3, r2
 80041f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <USB_EPStartXfer+0xd32>
 8004208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004214:	b29a      	uxth	r2, r3
 8004216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422c:	b29a      	uxth	r2, r3
 800422e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e05b      	b.n	80042ee <USB_EPStartXfer+0xdea>
 8004236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800423a:	2b3e      	cmp	r3, #62	; 0x3e
 800423c:	d818      	bhi.n	8004270 <USB_EPStartXfer+0xd6c>
 800423e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <USB_EPStartXfer+0xd5a>
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004258:	3301      	adds	r3, #1
 800425a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	b29b      	uxth	r3, r3
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	b29a      	uxth	r2, r3
 8004268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	e03e      	b.n	80042ee <USB_EPStartXfer+0xdea>
 8004270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800427a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <USB_EPStartXfer+0xd8c>
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428a:	3b01      	subs	r3, #1
 800428c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004294:	b29b      	uxth	r3, r3
 8004296:	029b      	lsls	r3, r3, #10
 8004298:	b29b      	uxth	r3, r3
 800429a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	e020      	b.n	80042ee <USB_EPStartXfer+0xdea>
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d11b      	bne.n	80042ee <USB_EPStartXfer+0xdea>
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c6:	4413      	add	r3, r2
 80042c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042cc:	463b      	mov	r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d8:	4413      	add	r3, r2
 80042da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	895b      	ldrh	r3, [r3, #10]
 80042f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6959      	ldr	r1, [r3, #20]
 80042fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004302:	b29b      	uxth	r3, r3
 8004304:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004308:	1d38      	adds	r0, r7, #4
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	f000 fd2f 	bl	8004d6e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f107 020a 	add.w	r2, r7, #10
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432e:	8013      	strh	r3, [r2, #0]
 8004330:	f107 030a 	add.w	r3, r7, #10
 8004334:	f107 020a 	add.w	r2, r7, #10
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	f082 0210 	eor.w	r2, r2, #16
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	f107 030a 	add.w	r3, r7, #10
 8004344:	f107 020a 	add.w	r2, r7, #10
 8004348:	8812      	ldrh	r2, [r2, #0]
 800434a:	f082 0220 	eor.w	r2, r2, #32
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	463b      	mov	r3, r7
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	f107 030a 	add.w	r3, r7, #10
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]
 8004378:	e3b5      	b.n	8004ae6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800437a:	463b      	mov	r3, r7
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	7b1b      	ldrb	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 8090 	bne.w	80044a6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004386:	463b      	mov	r3, r7
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	463b      	mov	r3, r7
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d90e      	bls.n	80043b4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004396:	463b      	mov	r3, r7
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80043a0:	463b      	mov	r3, r7
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	463b      	mov	r3, r7
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	619a      	str	r2, [r3, #24]
 80043b2:	e008      	b.n	80043c6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80043b4:	463b      	mov	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80043be:	463b      	mov	r3, r7
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043de:	4413      	add	r3, r2
 80043e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e4:	463b      	mov	r3, r7
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	011a      	lsls	r2, r3, #4
 80043ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043f0:	4413      	add	r3, r2
 80043f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <USB_EPStartXfer+0xf2c>
 8004402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004426:	b29a      	uxth	r2, r3
 8004428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	e32c      	b.n	8004a8a <USB_EPStartXfer+0x1586>
 8004430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004434:	2b3e      	cmp	r3, #62	; 0x3e
 8004436:	d818      	bhi.n	800446a <USB_EPStartXfer+0xf66>
 8004438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <USB_EPStartXfer+0xf54>
 800444e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004452:	3301      	adds	r3, #1
 8004454:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800445c:	b29b      	uxth	r3, r3
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	b29a      	uxth	r2, r3
 8004462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	e30f      	b.n	8004a8a <USB_EPStartXfer+0x1586>
 800446a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <USB_EPStartXfer+0xf86>
 8004480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004484:	3b01      	subs	r3, #1
 8004486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800448a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800448e:	b29b      	uxth	r3, r3
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	b29b      	uxth	r3, r3
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29a      	uxth	r2, r3
 800449e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e2f1      	b.n	8004a8a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	78db      	ldrb	r3, [r3, #3]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	f040 818f 	bne.w	80047d0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d175      	bne.n	80045a8 <USB_EPStartXfer+0x10a4>
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044d4:	4413      	add	r3, r2
 80044d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044da:	463b      	mov	r3, r7
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	011a      	lsls	r2, r3, #4
 80044e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044e6:	4413      	add	r3, r2
 80044e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f0:	463b      	mov	r3, r7
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <USB_EPStartXfer+0x1024>
 80044fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004506:	b29a      	uxth	r2, r3
 8004508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451e:	b29a      	uxth	r2, r3
 8004520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e065      	b.n	80045f4 <USB_EPStartXfer+0x10f0>
 8004528:	463b      	mov	r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b3e      	cmp	r3, #62	; 0x3e
 8004530:	d81a      	bhi.n	8004568 <USB_EPStartXfer+0x1064>
 8004532:	463b      	mov	r3, r7
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <USB_EPStartXfer+0x1052>
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004550:	3301      	adds	r3, #1
 8004552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455a:	b29b      	uxth	r3, r3
 800455c:	029b      	lsls	r3, r3, #10
 800455e:	b29a      	uxth	r2, r3
 8004560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e045      	b.n	80045f4 <USB_EPStartXfer+0x10f0>
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <USB_EPStartXfer+0x1088>
 8004582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004586:	3b01      	subs	r3, #1
 8004588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800458c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004590:	b29b      	uxth	r3, r3
 8004592:	029b      	lsls	r3, r3, #10
 8004594:	b29b      	uxth	r3, r3
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e025      	b.n	80045f4 <USB_EPStartXfer+0x10f0>
 80045a8:	463b      	mov	r3, r7
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d120      	bne.n	80045f4 <USB_EPStartXfer+0x10f0>
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ca:	4413      	add	r3, r2
 80045cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045d0:	463b      	mov	r3, r7
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	011a      	lsls	r2, r3, #4
 80045d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045dc:	4413      	add	r3, r2
 80045de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045e6:	463b      	mov	r3, r7
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045fc:	463b      	mov	r3, r7
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d175      	bne.n	80046f2 <USB_EPStartXfer+0x11ee>
 8004606:	1d3b      	adds	r3, r7, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800461e:	4413      	add	r3, r2
 8004620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	011a      	lsls	r2, r3, #4
 800462c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004630:	4413      	add	r3, r2
 8004632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <USB_EPStartXfer+0x116e>
 8004644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004650:	b29a      	uxth	r2, r3
 8004652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004668:	b29a      	uxth	r2, r3
 800466a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	e061      	b.n	8004736 <USB_EPStartXfer+0x1232>
 8004672:	463b      	mov	r3, r7
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b3e      	cmp	r3, #62	; 0x3e
 800467a:	d81a      	bhi.n	80046b2 <USB_EPStartXfer+0x11ae>
 800467c:	463b      	mov	r3, r7
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004688:	463b      	mov	r3, r7
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <USB_EPStartXfer+0x119c>
 8004696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800469a:	3301      	adds	r3, #1
 800469c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	029b      	lsls	r3, r3, #10
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	e041      	b.n	8004736 <USB_EPStartXfer+0x1232>
 80046b2:	463b      	mov	r3, r7
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <USB_EPStartXfer+0x11d2>
 80046cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046d0:	3b01      	subs	r3, #1
 80046d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e021      	b.n	8004736 <USB_EPStartXfer+0x1232>
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d11c      	bne.n	8004736 <USB_EPStartXfer+0x1232>
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004704:	b29b      	uxth	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800470c:	4413      	add	r3, r2
 800470e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004712:	463b      	mov	r3, r7
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	011a      	lsls	r2, r3, #4
 800471a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800471e:	4413      	add	r3, r2
 8004720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004728:	463b      	mov	r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	b29a      	uxth	r2, r3
 8004730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004734:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 81a4 	beq.w	8004a8a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004756:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800475a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <USB_EPStartXfer+0x126a>
 8004762:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800476e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8187 	bne.w	8004a8a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800477c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 8180 	bne.w	8004a8a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	463b      	mov	r3, r7
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
 80047ce:	e15c      	b.n	8004a8a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80047d0:	463b      	mov	r3, r7
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	78db      	ldrb	r3, [r3, #3]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	f040 8155 	bne.w	8004a86 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	463b      	mov	r3, r7
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d90e      	bls.n	800480a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80047ec:	463b      	mov	r3, r7
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004800:	1ad2      	subs	r2, r2, r3
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	e008      	b.n	800481c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d16f      	bne.n	8004906 <USB_EPStartXfer+0x1402>
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800483e:	4413      	add	r3, r2
 8004840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	011a      	lsls	r2, r3, #4
 800484c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004850:	4413      	add	r3, r2
 8004852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800485a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <USB_EPStartXfer+0x138c>
 8004862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486e:	b29a      	uxth	r2, r3
 8004870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004886:	b29a      	uxth	r2, r3
 8004888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e05f      	b.n	8004950 <USB_EPStartXfer+0x144c>
 8004890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004894:	2b3e      	cmp	r3, #62	; 0x3e
 8004896:	d818      	bhi.n	80048ca <USB_EPStartXfer+0x13c6>
 8004898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <USB_EPStartXfer+0x13b4>
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	3301      	adds	r3, #1
 80048b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048bc:	b29b      	uxth	r3, r3
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	e042      	b.n	8004950 <USB_EPStartXfer+0x144c>
 80048ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <USB_EPStartXfer+0x13e6>
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e4:	3b01      	subs	r3, #1
 80048e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e024      	b.n	8004950 <USB_EPStartXfer+0x144c>
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d11f      	bne.n	8004950 <USB_EPStartXfer+0x144c>
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	4413      	add	r3, r2
 800492a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800492e:	463b      	mov	r3, r7
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	011a      	lsls	r2, r3, #4
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	4413      	add	r3, r2
 800493c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004940:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004948:	b29a      	uxth	r2, r3
 800494a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d16f      	bne.n	8004a42 <USB_EPStartXfer+0x153e>
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	4413      	add	r3, r2
 800497c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	011a      	lsls	r2, r3, #4
 8004988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498c:	4413      	add	r3, r2
 800498e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <USB_EPStartXfer+0x14c8>
 800499e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e05e      	b.n	8004a8a <USB_EPStartXfer+0x1586>
 80049cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d0:	2b3e      	cmp	r3, #62	; 0x3e
 80049d2:	d818      	bhi.n	8004a06 <USB_EPStartXfer+0x1502>
 80049d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <USB_EPStartXfer+0x14f0>
 80049ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ee:	3301      	adds	r3, #1
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e041      	b.n	8004a8a <USB_EPStartXfer+0x1586>
 8004a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <USB_EPStartXfer+0x1522>
 8004a1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e023      	b.n	8004a8a <USB_EPStartXfer+0x1586>
 8004a42:	463b      	mov	r3, r7
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <USB_EPStartXfer+0x1586>
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	4413      	add	r3, r2
 8004a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e001      	b.n	8004a8a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e02e      	b.n	8004ae8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004aa8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004aac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ab0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ab4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004abc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d020      	beq.n	8004b46 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1a:	81bb      	strh	r3, [r7, #12]
 8004b1c:	89bb      	ldrh	r3, [r7, #12]
 8004b1e:	f083 0310 	eor.w	r3, r3, #16
 8004b22:	81bb      	strh	r3, [r7, #12]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	89bb      	ldrh	r3, [r7, #12]
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
 8004b44:	e01f      	b.n	8004b86 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	81fb      	strh	r3, [r7, #14]
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b64:	81fb      	strh	r3, [r7, #14]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	89fb      	ldrh	r3, [r7, #14]
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 809d 	bne.w	8004ce0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04c      	beq.n	8004c48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	823b      	strh	r3, [r7, #16]
 8004bbc:	8a3b      	ldrh	r3, [r7, #16]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <USB_EPClearStall+0x6c>
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bdc:	81fb      	strh	r3, [r7, #14]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d06c      	beq.n	8004ce0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1c:	81bb      	strh	r3, [r7, #12]
 8004c1e:	89bb      	ldrh	r3, [r7, #12]
 8004c20:	f083 0320 	eor.w	r3, r3, #32
 8004c24:	81bb      	strh	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	89bb      	ldrh	r3, [r7, #12]
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
 8004c46:	e04b      	b.n	8004ce0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	82fb      	strh	r3, [r7, #22]
 8004c56:	8afb      	ldrh	r3, [r7, #22]
 8004c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <USB_EPClearStall+0x106>
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	82bb      	strh	r3, [r7, #20]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8abb      	ldrh	r3, [r7, #20]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	827b      	strh	r3, [r7, #18]
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cb6:	827b      	strh	r3, [r7, #18]
 8004cb8:	8a7b      	ldrh	r3, [r7, #18]
 8004cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cbe:	827b      	strh	r3, [r7, #18]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	8a7b      	ldrh	r3, [r7, #18]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2280      	movs	r2, #128	; 0x80
 8004d02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b08d      	sub	sp, #52	; 0x34
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	80fb      	strh	r3, [r7, #6]
 8004d80:	4613      	mov	r3, r2
 8004d82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d84:	88bb      	ldrh	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	005a      	lsls	r2, r3, #1
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da6:	e01e      	b.n	8004de6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	3301      	adds	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3301      	adds	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	3b01      	subs	r3, #1
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1dd      	bne.n	8004da8 <USB_WritePMA+0x3a>
  }
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3734      	adds	r7, #52	; 0x34
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	460b      	mov	r3, r1
 8004e08:	80fb      	strh	r3, [r7, #6]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e0e:	88bb      	ldrh	r3, [r7, #4]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e2a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e01b      	b.n	8004e6a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	3302      	adds	r3, #2
 8004e62:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	3b01      	subs	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e0      	bne.n	8004e32 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004e70:	88bb      	ldrh	r3, [r7, #4]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	701a      	strb	r2, [r3, #0]
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	372c      	adds	r7, #44	; 0x2c
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7c1b      	ldrb	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d115      	bne.n	8004eda <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	2181      	movs	r1, #129	; 0x81
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f004 fb0b 	bl	80094d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	2101      	movs	r1, #1
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f004 fb01 	bl	80094d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004ed8:	e012      	b.n	8004f00 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2202      	movs	r2, #2
 8004ede:	2181      	movs	r1, #129	; 0x81
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f004 faf6 	bl	80094d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	2202      	movs	r2, #2
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f004 faed 	bl	80094d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f00:	2308      	movs	r3, #8
 8004f02:	2203      	movs	r2, #3
 8004f04:	2182      	movs	r1, #130	; 0x82
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f004 fae3 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f12:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f16:	f004 fc03 	bl	8009720 <USBD_static_malloc>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e026      	b.n	8004f80 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7c1b      	ldrb	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f66:	2101      	movs	r1, #1
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f004 fba3 	bl	80096b4 <USBD_LL_PrepareReceive>
 8004f6e:	e007      	b.n	8004f80 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f76:	2340      	movs	r3, #64	; 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f004 fb9a 	bl	80096b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f9a:	2181      	movs	r1, #129	; 0x81
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f004 fabe 	bl	800951e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f004 fab7 	bl	800951e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fb8:	2182      	movs	r1, #130	; 0x82
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f004 faaf 	bl	800951e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 fba9 	bl	8009738 <USBD_static_free>
    pdev->pClassData = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005008:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800501e:	2b00      	cmp	r3, #0
 8005020:	d039      	beq.n	8005096 <USBD_CDC_Setup+0x9e>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d17f      	bne.n	8005126 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	88db      	ldrh	r3, [r3, #6]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d029      	beq.n	8005082 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b25b      	sxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	da11      	bge.n	800505c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005044:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	88d2      	ldrh	r2, [r2, #6]
 800504a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800504c:	6939      	ldr	r1, [r7, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	88db      	ldrh	r3, [r3, #6]
 8005052:	461a      	mov	r2, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f001 f9da 	bl	800640e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800505a:	e06b      	b.n	8005134 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	785a      	ldrb	r2, [r3, #1]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	88db      	ldrh	r3, [r3, #6]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005072:	6939      	ldr	r1, [r7, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	88db      	ldrh	r3, [r3, #6]
 8005078:	461a      	mov	r2, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 f9f5 	bl	800646a <USBD_CtlPrepareRx>
      break;
 8005080:	e058      	b.n	8005134 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	7850      	ldrb	r0, [r2, #1]
 800508e:	2200      	movs	r2, #0
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	4798      	blx	r3
      break;
 8005094:	e04e      	b.n	8005134 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b0b      	cmp	r3, #11
 800509c:	d02e      	beq.n	80050fc <USBD_CDC_Setup+0x104>
 800509e:	2b0b      	cmp	r3, #11
 80050a0:	dc38      	bgt.n	8005114 <USBD_CDC_Setup+0x11c>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <USBD_CDC_Setup+0xb4>
 80050a6:	2b0a      	cmp	r3, #10
 80050a8:	d014      	beq.n	80050d4 <USBD_CDC_Setup+0xdc>
 80050aa:	e033      	b.n	8005114 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d107      	bne.n	80050c6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	2202      	movs	r2, #2
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 f9a5 	bl	800640e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050c4:	e02e      	b.n	8005124 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 f936 	bl	800633a <USBD_CtlError>
            ret = USBD_FAIL;
 80050ce:	2302      	movs	r3, #2
 80050d0:	75fb      	strb	r3, [r7, #23]
          break;
 80050d2:	e027      	b.n	8005124 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80050de:	f107 030f 	add.w	r3, r7, #15
 80050e2:	2201      	movs	r2, #1
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 f991 	bl	800640e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050ec:	e01a      	b.n	8005124 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f001 f922 	bl	800633a <USBD_CtlError>
            ret = USBD_FAIL;
 80050f6:	2302      	movs	r3, #2
 80050f8:	75fb      	strb	r3, [r7, #23]
          break;
 80050fa:	e013      	b.n	8005124 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005102:	2b03      	cmp	r3, #3
 8005104:	d00d      	beq.n	8005122 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 f916 	bl	800633a <USBD_CtlError>
            ret = USBD_FAIL;
 800510e:	2302      	movs	r3, #2
 8005110:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005112:	e006      	b.n	8005122 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 f90f 	bl	800633a <USBD_CtlError>
          ret = USBD_FAIL;
 800511c:	2302      	movs	r3, #2
 800511e:	75fb      	strb	r3, [r7, #23]
          break;
 8005120:	e000      	b.n	8005124 <USBD_CDC_Setup+0x12c>
          break;
 8005122:	bf00      	nop
      }
      break;
 8005124:	e006      	b.n	8005134 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 f906 	bl	800633a <USBD_CtlError>
      ret = USBD_FAIL;
 800512e:	2302      	movs	r3, #2
 8005130:	75fb      	strb	r3, [r7, #23]
      break;
 8005132:	bf00      	nop
  }

  return ret;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005150:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005158:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d03a      	beq.n	80051da <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	331c      	adds	r3, #28
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d029      	beq.n	80051ce <USBD_CDC_DataIn+0x90>
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	331c      	adds	r3, #28
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	78f9      	ldrb	r1, [r7, #3]
 800518e:	68b8      	ldr	r0, [r7, #8]
 8005190:	460b      	mov	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4403      	add	r3, r0
 800519a:	3338      	adds	r3, #56	; 0x38
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	fbb2 f1f3 	udiv	r1, r2, r3
 80051a2:	fb03 f301 	mul.w	r3, r3, r1
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d110      	bne.n	80051ce <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	331c      	adds	r3, #28
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051c0:	78f9      	ldrb	r1, [r7, #3]
 80051c2:	2300      	movs	r3, #0
 80051c4:	2200      	movs	r2, #0
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f004 fa51 	bl	800966e <USBD_LL_Transmit>
 80051cc:	e003      	b.n	80051d6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f004 fa7c 	bl	80096fa <USBD_LL_GetRxDataSize>
 8005202:	4602      	mov	r2, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005228:	4611      	mov	r1, r2
 800522a:	4798      	blx	r3

    return USBD_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <USBD_CDC_EP0_RxReady+0x46>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800525a:	2bff      	cmp	r3, #255	; 0xff
 800525c:	d010      	beq.n	8005280 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800526c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005274:	b292      	uxth	r2, r2
 8005276:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	22ff      	movs	r2, #255	; 0xff
 800527c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2243      	movs	r2, #67	; 0x43
 8005298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800529a:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000094 	.word	0x20000094

080052ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2243      	movs	r2, #67	; 0x43
 80052b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000050 	.word	0x20000050

080052cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2243      	movs	r2, #67	; 0x43
 80052d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80052da:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	200000d8 	.word	0x200000d8

080052ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	220a      	movs	r2, #10
 80052f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80052fa:	4b03      	ldr	r3, [pc, #12]	; (8005308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	2000000c 	.word	0x2000000c

0800530c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005316:	2302      	movs	r3, #2
 8005318:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	7c1b      	ldrb	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053bc:	2101      	movs	r1, #1
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f004 f978 	bl	80096b4 <USBD_LL_PrepareReceive>
 80053c4:	e007      	b.n	80053d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	2101      	movs	r1, #1
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f004 f96f 	bl	80096b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053f8:	2302      	movs	r3, #2
 80053fa:	e01a      	b.n	8005432 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	79fa      	ldrb	r2, [r7, #7]
 8005428:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f003 ffdc 	bl	80093e8 <USBD_LL_Init>

  return USBD_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
 800545a:	e001      	b.n	8005460 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800545c:	2302      	movs	r3, #2
 800545e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f004 f811 	bl	800949c <USBD_LL_Start>

  return USBD_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054a4:	2302      	movs	r3, #2
 80054a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	4611      	mov	r1, r2
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4611      	mov	r1, r2
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3

  return USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fed7 	bl	80062c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2b02      	cmp	r3, #2
 8005536:	d016      	beq.n	8005566 <USBD_LL_SetupStage+0x6a>
 8005538:	2b02      	cmp	r3, #2
 800553a:	d81c      	bhi.n	8005576 <USBD_LL_SetupStage+0x7a>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <USBD_LL_SetupStage+0x4a>
 8005540:	2b01      	cmp	r3, #1
 8005542:	d008      	beq.n	8005556 <USBD_LL_SetupStage+0x5a>
 8005544:	e017      	b.n	8005576 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9ca 	bl	80058e8 <USBD_StdDevReq>
      break;
 8005554:	e01a      	b.n	800558c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa2c 	bl	80059bc <USBD_StdItfReq>
      break;
 8005564:	e012      	b.n	800558c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa6c 	bl	8005a4c <USBD_StdEPReq>
      break;
 8005574:	e00a      	b.n	800558c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800557c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f003 ffe9 	bl	800955c <USBD_LL_StallEP>
      break;
 800558a:	bf00      	nop
  }

  return USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	460b      	mov	r3, r1
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055a4:	7afb      	ldrb	r3, [r7, #11]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14b      	bne.n	8005642 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d134      	bne.n	8005626 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d919      	bls.n	80055fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	1ad2      	subs	r2, r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055de:	429a      	cmp	r2, r3
 80055e0:	d203      	bcs.n	80055ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	e002      	b.n	80055f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 ff56 	bl	80064a6 <USBD_CtlContinueRx>
 80055fa:	e038      	b.n	800566e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800560e:	2b03      	cmp	r3, #3
 8005610:	d105      	bne.n	800561e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 ff53 	bl	80064ca <USBD_CtlSendStatus>
 8005624:	e023      	b.n	800566e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800562c:	2b05      	cmp	r3, #5
 800562e:	d11e      	bne.n	800566e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005638:	2100      	movs	r1, #0
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f003 ff8e 	bl	800955c <USBD_LL_StallEP>
 8005640:	e015      	b.n	800566e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005654:	2b03      	cmp	r3, #3
 8005656:	d108      	bne.n	800566a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	7afa      	ldrb	r2, [r7, #11]
 8005662:	4611      	mov	r1, r2
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	4798      	blx	r3
 8005668:	e001      	b.n	800566e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800566a:	2302      	movs	r3, #2
 800566c:	e000      	b.n	8005670 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	460b      	mov	r3, r1
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005686:	7afb      	ldrb	r3, [r7, #11]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d17f      	bne.n	800578c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3314      	adds	r3, #20
 8005690:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005698:	2b02      	cmp	r3, #2
 800569a:	d15c      	bne.n	8005756 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d915      	bls.n	80056d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fec0 	bl	8006446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c6:	2300      	movs	r3, #0
 80056c8:	2200      	movs	r2, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f003 fff1 	bl	80096b4 <USBD_LL_PrepareReceive>
 80056d2:	e04e      	b.n	8005772 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	6912      	ldr	r2, [r2, #16]
 80056dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e0:	fb02 f201 	mul.w	r2, r2, r1
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11c      	bne.n	8005724 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d316      	bcc.n	8005724 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005700:	429a      	cmp	r2, r3
 8005702:	d20f      	bcs.n	8005724 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fe9c 	bl	8006446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005716:	2300      	movs	r3, #0
 8005718:	2200      	movs	r2, #0
 800571a:	2100      	movs	r1, #0
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f003 ffc9 	bl	80096b4 <USBD_LL_PrepareReceive>
 8005722:	e026      	b.n	8005772 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005736:	2b03      	cmp	r3, #3
 8005738:	d105      	bne.n	8005746 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f003 ff07 	bl	800955c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fece 	bl	80064f0 <USBD_CtlReceiveStatus>
 8005754:	e00d      	b.n	8005772 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800575c:	2b04      	cmp	r3, #4
 800575e:	d004      	beq.n	800576a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f003 fef5 	bl	800955c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d11d      	bne.n	80057b8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fe81 	bl	8005484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800578a:	e015      	b.n	80057b8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d108      	bne.n	80057b4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	7afa      	ldrb	r2, [r7, #11]
 80057ac:	4611      	mov	r1, r2
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	4798      	blx	r3
 80057b2:	e001      	b.n	80057b8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057b4:	2302      	movs	r3, #2
 80057b6:	e000      	b.n	80057ba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	2200      	movs	r2, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f003 fe7e 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2240      	movs	r2, #64	; 0x40
 80057e2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057e6:	2340      	movs	r3, #64	; 0x40
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f003 fe70 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	4611      	mov	r1, r2
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
  }

  return USBD_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2204      	movs	r2, #4
 800587a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005898:	2b04      	cmp	r3, #4
 800589a:	d105      	bne.n	80058a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d10b      	bne.n	80058de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d005      	beq.n	800590e <USBD_StdDevReq+0x26>
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d84f      	bhi.n	80059a6 <USBD_StdDevReq+0xbe>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <USBD_StdDevReq+0x36>
 800590a:	2b20      	cmp	r3, #32
 800590c:	d14b      	bne.n	80059a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
      break;
 800591c:	e048      	b.n	80059b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	2b09      	cmp	r3, #9
 8005924:	d839      	bhi.n	800599a <USBD_StdDevReq+0xb2>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <USBD_StdDevReq+0x44>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	0800597d 	.word	0x0800597d
 8005930:	08005991 	.word	0x08005991
 8005934:	0800599b 	.word	0x0800599b
 8005938:	08005987 	.word	0x08005987
 800593c:	0800599b 	.word	0x0800599b
 8005940:	0800595f 	.word	0x0800595f
 8005944:	08005955 	.word	0x08005955
 8005948:	0800599b 	.word	0x0800599b
 800594c:	08005973 	.word	0x08005973
 8005950:	08005969 	.word	0x08005969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9dc 	bl	8005d14 <USBD_GetDescriptor>
          break;
 800595c:	e022      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fb3f 	bl	8005fe4 <USBD_SetAddress>
          break;
 8005966:	e01d      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fb7e 	bl	800606c <USBD_SetConfig>
          break;
 8005970:	e018      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fc07 	bl	8006188 <USBD_GetConfig>
          break;
 800597a:	e013      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fc37 	bl	80061f2 <USBD_GetStatus>
          break;
 8005984:	e00e      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fc65 	bl	8006258 <USBD_SetFeature>
          break;
 800598e:	e009      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc74 	bl	8006280 <USBD_ClrFeature>
          break;
 8005998:	e004      	b.n	80059a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fccc 	bl	800633a <USBD_CtlError>
          break;
 80059a2:	bf00      	nop
      }
      break;
 80059a4:	e004      	b.n	80059b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fcc6 	bl	800633a <USBD_CtlError>
      break;
 80059ae:	bf00      	nop
  }

  return ret;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop

080059bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d005      	beq.n	80059e2 <USBD_StdItfReq+0x26>
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d82e      	bhi.n	8005a38 <USBD_StdItfReq+0x7c>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <USBD_StdItfReq+0x26>
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d12a      	bne.n	8005a38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e8:	3b01      	subs	r3, #1
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d81d      	bhi.n	8005a2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	889b      	ldrh	r3, [r3, #4]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d813      	bhi.n	8005a20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d110      	bne.n	8005a34 <USBD_StdItfReq+0x78>
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fd56 	bl	80064ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a1e:	e009      	b.n	8005a34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fc89 	bl	800633a <USBD_CtlError>
          break;
 8005a28:	e004      	b.n	8005a34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fc84 	bl	800633a <USBD_CtlError>
          break;
 8005a32:	e000      	b.n	8005a36 <USBD_StdItfReq+0x7a>
          break;
 8005a34:	bf00      	nop
      }
      break;
 8005a36:	e004      	b.n	8005a42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fc7d 	bl	800633a <USBD_CtlError>
      break;
 8005a40:	bf00      	nop
  }

  return USBD_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	889b      	ldrh	r3, [r3, #4]
 8005a5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d007      	beq.n	8005a7c <USBD_StdEPReq+0x30>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	f200 8146 	bhi.w	8005cfe <USBD_StdEPReq+0x2b2>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <USBD_StdEPReq+0x40>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f040 8141 	bne.w	8005cfe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
      break;
 8005a8a:	e13d      	b.n	8005d08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d10a      	bne.n	8005aae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	e12d      	b.n	8005d0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d007      	beq.n	8005ac6 <USBD_StdEPReq+0x7a>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f300 811b 	bgt.w	8005cf2 <USBD_StdEPReq+0x2a6>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d072      	beq.n	8005ba6 <USBD_StdEPReq+0x15a>
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d03a      	beq.n	8005b3a <USBD_StdEPReq+0xee>
 8005ac4:	e115      	b.n	8005cf2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d002      	beq.n	8005ad6 <USBD_StdEPReq+0x8a>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d015      	beq.n	8005b00 <USBD_StdEPReq+0xb4>
 8005ad4:	e02b      	b.n	8005b2e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <USBD_StdEPReq+0xaa>
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d009      	beq.n	8005af6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f003 fd38 	bl	800955c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f003 fd34 	bl	800955c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005af4:	e020      	b.n	8005b38 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fc1e 	bl	800633a <USBD_CtlError>
              break;
 8005afe:	e01b      	b.n	8005b38 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	885b      	ldrh	r3, [r3, #2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10e      	bne.n	8005b26 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005b08:	7bbb      	ldrb	r3, [r7, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <USBD_StdEPReq+0xda>
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d008      	beq.n	8005b26 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f003 fd1b 	bl	800955c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fccf 	bl	80064ca <USBD_CtlSendStatus>

              break;
 8005b2c:	e004      	b.n	8005b38 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fc02 	bl	800633a <USBD_CtlError>
              break;
 8005b36:	bf00      	nop
          }
          break;
 8005b38:	e0e0      	b.n	8005cfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d002      	beq.n	8005b4a <USBD_StdEPReq+0xfe>
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d015      	beq.n	8005b74 <USBD_StdEPReq+0x128>
 8005b48:	e026      	b.n	8005b98 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <USBD_StdEPReq+0x11e>
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d009      	beq.n	8005b6a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f003 fcfe 	bl	800955c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b60:	2180      	movs	r1, #128	; 0x80
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f003 fcfa 	bl	800955c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b68:	e01c      	b.n	8005ba4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fbe4 	bl	800633a <USBD_CtlError>
              break;
 8005b72:	e017      	b.n	8005ba4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	885b      	ldrh	r3, [r3, #2]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d112      	bne.n	8005ba2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f003 fd05 	bl	800959a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fc9a 	bl	80064ca <USBD_CtlSendStatus>
              }
              break;
 8005b96:	e004      	b.n	8005ba2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fbcd 	bl	800633a <USBD_CtlError>
              break;
 8005ba0:	e000      	b.n	8005ba4 <USBD_StdEPReq+0x158>
              break;
 8005ba2:	bf00      	nop
          }
          break;
 8005ba4:	e0aa      	b.n	8005cfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d002      	beq.n	8005bb6 <USBD_StdEPReq+0x16a>
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d032      	beq.n	8005c1a <USBD_StdEPReq+0x1ce>
 8005bb4:	e097      	b.n	8005ce6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <USBD_StdEPReq+0x180>
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d004      	beq.n	8005bcc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fbb8 	bl	800633a <USBD_CtlError>
                break;
 8005bca:	e091      	b.n	8005cf0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da0b      	bge.n	8005bec <USBD_StdEPReq+0x1a0>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	3310      	adds	r3, #16
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	3304      	adds	r3, #4
 8005bea:	e00b      	b.n	8005c04 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fbfb 	bl	800640e <USBD_CtlSendData>
              break;
 8005c18:	e06a      	b.n	8005cf0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da11      	bge.n	8005c46 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	f003 020f 	and.w	r2, r3, #15
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3318      	adds	r3, #24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d117      	bne.n	8005c6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb7b 	bl	800633a <USBD_CtlError>
                  break;
 8005c44:	e054      	b.n	8005cf0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fb68 	bl	800633a <USBD_CtlError>
                  break;
 8005c6a:	e041      	b.n	8005cf0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	da0b      	bge.n	8005c8c <USBD_StdEPReq+0x240>
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	3310      	adds	r3, #16
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	e00b      	b.n	8005ca4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <USBD_StdEPReq+0x266>
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d103      	bne.n	8005cba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e00e      	b.n	8005cd8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f003 fc8a 	bl	80095d8 <USBD_LL_IsStallEP>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e002      	b.n	8005cd8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb95 	bl	800640e <USBD_CtlSendData>
              break;
 8005ce4:	e004      	b.n	8005cf0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb26 	bl	800633a <USBD_CtlError>
              break;
 8005cee:	bf00      	nop
          }
          break;
 8005cf0:	e004      	b.n	8005cfc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb20 	bl	800633a <USBD_CtlError>
          break;
 8005cfa:	bf00      	nop
      }
      break;
 8005cfc:	e004      	b.n	8005d08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb1a 	bl	800633a <USBD_CtlError>
      break;
 8005d06:	bf00      	nop
  }

  return ret;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	885b      	ldrh	r3, [r3, #2]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b06      	cmp	r3, #6
 8005d36:	f200 8128 	bhi.w	8005f8a <USBD_GetDescriptor+0x276>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <USBD_GetDescriptor+0x2c>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	08005d75 	.word	0x08005d75
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005f8b 	.word	0x08005f8b
 8005d50:	08005f8b 	.word	0x08005f8b
 8005d54:	08005f2b 	.word	0x08005f2b
 8005d58:	08005f57 	.word	0x08005f57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	7c12      	ldrb	r2, [r2, #16]
 8005d68:	f107 0108 	add.w	r1, r7, #8
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	60f8      	str	r0, [r7, #12]
      break;
 8005d72:	e112      	b.n	8005f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7c1b      	ldrb	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10d      	bne.n	8005d98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	f107 0208 	add.w	r2, r7, #8
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	2202      	movs	r2, #2
 8005d94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d96:	e100      	b.n	8005f9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f107 0208 	add.w	r2, r7, #8
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	2202      	movs	r2, #2
 8005db0:	701a      	strb	r2, [r3, #0]
      break;
 8005db2:	e0f2      	b.n	8005f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	885b      	ldrh	r3, [r3, #2]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	f200 80ac 	bhi.w	8005f18 <USBD_GetDescriptor+0x204>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <USBD_GetDescriptor+0xb4>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e7d 	.word	0x08005e7d
 8005dd8:	08005eb1 	.word	0x08005eb1
 8005ddc:	08005ee5 	.word	0x08005ee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e091      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa97 	bl	800633a <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e089      	b.n	8005f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e36:	e077      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa7d 	bl	800633a <USBD_CtlError>
            err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
          break;
 8005e46:	e06f      	b.n	8005f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	7c12      	ldrb	r2, [r2, #16]
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6a:	e05d      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa63 	bl	800633a <USBD_CtlError>
            err++;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	3301      	adds	r3, #1
 8005e78:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7a:	e055      	b.n	8005f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	7c12      	ldrb	r2, [r2, #16]
 8005e94:	f107 0108 	add.w	r1, r7, #8
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
 8005e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e9e:	e043      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa49 	bl	800633a <USBD_CtlError>
            err++;
 8005ea8:	7afb      	ldrb	r3, [r7, #11]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	72fb      	strb	r3, [r7, #11]
          break;
 8005eae:	e03b      	b.n	8005f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	7c12      	ldrb	r2, [r2, #16]
 8005ec8:	f107 0108 	add.w	r1, r7, #8
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
 8005ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ed2:	e029      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa2f 	bl	800633a <USBD_CtlError>
            err++;
 8005edc:	7afb      	ldrb	r3, [r7, #11]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ee2:	e021      	b.n	8005f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	7c12      	ldrb	r2, [r2, #16]
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f06:	e00f      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa15 	bl	800633a <USBD_CtlError>
            err++;
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	3301      	adds	r3, #1
 8005f14:	72fb      	strb	r3, [r7, #11]
          break;
 8005f16:	e007      	b.n	8005f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa0d 	bl	800633a <USBD_CtlError>
          err++;
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	3301      	adds	r3, #1
 8005f24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005f26:	e038      	b.n	8005f9a <USBD_GetDescriptor+0x286>
 8005f28:	e037      	b.n	8005f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7c1b      	ldrb	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	f107 0208 	add.w	r2, r7, #8
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4798      	blx	r3
 8005f42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f44:	e029      	b.n	8005f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9f6 	bl	800633a <USBD_CtlError>
        err++;
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	3301      	adds	r3, #1
 8005f52:	72fb      	strb	r3, [r7, #11]
      break;
 8005f54:	e021      	b.n	8005f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7c1b      	ldrb	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	f107 0208 	add.w	r2, r7, #8
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4798      	blx	r3
 8005f6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	2207      	movs	r2, #7
 8005f76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f78:	e00f      	b.n	8005f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9dc 	bl	800633a <USBD_CtlError>
        err++;
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	3301      	adds	r3, #1
 8005f86:	72fb      	strb	r3, [r7, #11]
      break;
 8005f88:	e007      	b.n	8005f9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9d4 	bl	800633a <USBD_CtlError>
      err++;
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	3301      	adds	r3, #1
 8005f96:	72fb      	strb	r3, [r7, #11]
      break;
 8005f98:	bf00      	nop
  }

  if (err != 0U)
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11c      	bne.n	8005fda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005fa0:	893b      	ldrh	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d011      	beq.n	8005fca <USBD_GetDescriptor+0x2b6>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	88db      	ldrh	r3, [r3, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	88da      	ldrh	r2, [r3, #6]
 8005fb2:	893b      	ldrh	r3, [r7, #8]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bf28      	it	cs
 8005fb8:	4613      	movcs	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa22 	bl	800640e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa79 	bl	80064ca <USBD_CtlSendStatus>
 8005fd8:	e000      	b.n	8005fdc <USBD_GetDescriptor+0x2c8>
    return;
 8005fda:	bf00      	nop
    }
  }
}
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	889b      	ldrh	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d130      	bne.n	8006058 <USBD_SetAddress+0x74>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d12c      	bne.n	8006058 <USBD_SetAddress+0x74>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	885b      	ldrh	r3, [r3, #2]
 8006002:	2b7f      	cmp	r3, #127	; 0x7f
 8006004:	d828      	bhi.n	8006058 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	885b      	ldrh	r3, [r3, #2]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	2b03      	cmp	r3, #3
 800601a:	d104      	bne.n	8006026 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f98b 	bl	800633a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006024:	e01d      	b.n	8006062 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f003 fafc 	bl	8009630 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa46 	bl	80064ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604c:	e009      	b.n	8006062 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006056:	e004      	b.n	8006062 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f96d 	bl	800633a <USBD_CtlError>
  }
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	885b      	ldrh	r3, [r3, #2]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b41      	ldr	r3, [pc, #260]	; (8006184 <USBD_SetConfig+0x118>)
 800607e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006080:	4b40      	ldr	r3, [pc, #256]	; (8006184 <USBD_SetConfig+0x118>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d904      	bls.n	8006092 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f955 	bl	800633a <USBD_CtlError>
 8006090:	e075      	b.n	800617e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006098:	2b02      	cmp	r3, #2
 800609a:	d002      	beq.n	80060a2 <USBD_SetConfig+0x36>
 800609c:	2b03      	cmp	r3, #3
 800609e:	d023      	beq.n	80060e8 <USBD_SetConfig+0x7c>
 80060a0:	e062      	b.n	8006168 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <USBD_SetConfig+0x118>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01a      	beq.n	80060e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80060aa:	4b36      	ldr	r3, [pc, #216]	; (8006184 <USBD_SetConfig+0x118>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2203      	movs	r2, #3
 80060b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <USBD_SetConfig+0x118>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff f9e8 	bl	8005498 <USBD_SetClassConfig>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d104      	bne.n	80060d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f932 	bl	800633a <USBD_CtlError>
            return;
 80060d6:	e052      	b.n	800617e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f9f6 	bl	80064ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80060de:	e04e      	b.n	800617e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f9f2 	bl	80064ca <USBD_CtlSendStatus>
        break;
 80060e6:	e04a      	b.n	800617e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80060e8:	4b26      	ldr	r3, [pc, #152]	; (8006184 <USBD_SetConfig+0x118>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d112      	bne.n	8006116 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <USBD_SetConfig+0x118>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <USBD_SetConfig+0x118>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff f9e4 	bl	80054d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9db 	bl	80064ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006114:	e033      	b.n	800617e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <USBD_SetConfig+0x118>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d01d      	beq.n	8006160 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff f9d2 	bl	80054d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <USBD_SetConfig+0x118>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <USBD_SetConfig+0x118>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff f9a8 	bl	8005498 <USBD_SetClassConfig>
 8006148:	4603      	mov	r3, r0
 800614a:	2b02      	cmp	r3, #2
 800614c:	d104      	bne.n	8006158 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8f2 	bl	800633a <USBD_CtlError>
            return;
 8006156:	e012      	b.n	800617e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9b6 	bl	80064ca <USBD_CtlSendStatus>
        break;
 800615e:	e00e      	b.n	800617e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f9b2 	bl	80064ca <USBD_CtlSendStatus>
        break;
 8006166:	e00a      	b.n	800617e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8e5 	bl	800633a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <USBD_SetConfig+0x118>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff f9ad 	bl	80054d6 <USBD_ClrClassConfig>
        break;
 800617c:	bf00      	nop
    }
  }
}
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	2000019c 	.word	0x2000019c

08006188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	88db      	ldrh	r3, [r3, #6]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d004      	beq.n	80061a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8cc 	bl	800633a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80061a2:	e022      	b.n	80061ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	dc02      	bgt.n	80061b4 <USBD_GetConfig+0x2c>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dc03      	bgt.n	80061ba <USBD_GetConfig+0x32>
 80061b2:	e015      	b.n	80061e0 <USBD_GetConfig+0x58>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d00b      	beq.n	80061d0 <USBD_GetConfig+0x48>
 80061b8:	e012      	b.n	80061e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3308      	adds	r3, #8
 80061c4:	2201      	movs	r2, #1
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f920 	bl	800640e <USBD_CtlSendData>
        break;
 80061ce:	e00c      	b.n	80061ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	2201      	movs	r2, #1
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f918 	bl	800640e <USBD_CtlSendData>
        break;
 80061de:	e004      	b.n	80061ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8a9 	bl	800633a <USBD_CtlError>
        break;
 80061e8:	bf00      	nop
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006202:	3b01      	subs	r3, #1
 8006204:	2b02      	cmp	r3, #2
 8006206:	d81e      	bhi.n	8006246 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d004      	beq.n	800621a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f891 	bl	800633a <USBD_CtlError>
        break;
 8006218:	e01a      	b.n	8006250 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	330c      	adds	r3, #12
 800623a:	2202      	movs	r2, #2
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8e5 	bl	800640e <USBD_CtlSendData>
      break;
 8006244:	e004      	b.n	8006250 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f876 	bl	800633a <USBD_CtlError>
      break;
 800624e:	bf00      	nop
  }
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	885b      	ldrh	r3, [r3, #2]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d106      	bne.n	8006278 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f929 	bl	80064ca <USBD_CtlSendStatus>
  }
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006290:	3b01      	subs	r3, #1
 8006292:	2b02      	cmp	r3, #2
 8006294:	d80b      	bhi.n	80062ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10c      	bne.n	80062b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f90f 	bl	80064ca <USBD_CtlSendStatus>
      }
      break;
 80062ac:	e004      	b.n	80062b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f842 	bl	800633a <USBD_CtlError>
      break;
 80062b6:	e000      	b.n	80062ba <USBD_ClrFeature+0x3a>
      break;
 80062b8:	bf00      	nop
  }
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	785a      	ldrb	r2, [r3, #1]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	3302      	adds	r3, #2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	3303      	adds	r3, #3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3304      	adds	r3, #4
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	3305      	adds	r3, #5
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	b29b      	uxth	r3, r3
 800630c:	4413      	add	r3, r2
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	3306      	adds	r3, #6
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b29a      	uxth	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	3307      	adds	r3, #7
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	b29b      	uxth	r3, r3
 8006328:	4413      	add	r3, r2
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	80da      	strh	r2, [r3, #6]

}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr

0800633a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f003 f908 	bl	800955c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800634c:	2100      	movs	r1, #0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f003 f904 	bl	800955c <USBD_LL_StallEP>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d032      	beq.n	80063d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f834 	bl	80063e0 <USBD_GetLen>
 8006378:	4603      	mov	r3, r0
 800637a:	3301      	adds	r3, #1
 800637c:	b29b      	uxth	r3, r3
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	75fa      	strb	r2, [r7, #23]
 800638c:	461a      	mov	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4413      	add	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	75fa      	strb	r2, [r7, #23]
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4413      	add	r3, r2
 80063a4:	2203      	movs	r2, #3
 80063a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80063a8:	e012      	b.n	80063d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	60fa      	str	r2, [r7, #12]
 80063b0:	7dfa      	ldrb	r2, [r7, #23]
 80063b2:	1c51      	adds	r1, r2, #1
 80063b4:	75f9      	strb	r1, [r7, #23]
 80063b6:	4611      	mov	r1, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	440a      	add	r2, r1
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	75fa      	strb	r2, [r7, #23]
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4413      	add	r3, r2
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e8      	bne.n	80063aa <USBD_GetString+0x4e>
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80063ec:	e005      	b.n	80063fa <USBD_GetLen+0x1a>
  {
    len++;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	3301      	adds	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f5      	bne.n	80063ee <USBD_GetLen+0xe>
  }

  return len;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	4613      	mov	r3, r2
 800641a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2202      	movs	r2, #2
 8006420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	2100      	movs	r1, #0
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f003 f919 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	2100      	movs	r1, #0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f003 f907 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2203      	movs	r2, #3
 800647c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	2100      	movs	r1, #0
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f003 f90c 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	2100      	movs	r1, #0
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f003 f8fa 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064da:	2300      	movs	r3, #0
 80064dc:	2200      	movs	r2, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f003 f8c4 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2205      	movs	r2, #5
 80064fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006500:	2300      	movs	r3, #0
 8006502:	2200      	movs	r2, #0
 8006504:	2100      	movs	r1, #0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f003 f8d4 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	60bb      	str	r3, [r7, #8]
  return(result);
 8006524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10f      	bne.n	800654a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652a:	f3ef 8310 	mrs	r3, PRIMASK
 800652e:	607b      	str	r3, [r7, #4]
  return(result);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <osKernelInitialize+0x32>
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <osKernelInitialize+0x60>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d109      	bne.n	8006552 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	603b      	str	r3, [r7, #0]
  return(result);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800654a:	f06f 0305 	mvn.w	r3, #5
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e00c      	b.n	800656c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <osKernelInitialize+0x60>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <osKernelInitialize+0x60>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e002      	b.n	800656c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800656a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr
 8006578:	200001a0 	.word	0x200001a0

0800657c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006582:	f3ef 8305 	mrs	r3, IPSR
 8006586:	60bb      	str	r3, [r7, #8]
  return(result);
 8006588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658e:	f3ef 8310 	mrs	r3, PRIMASK
 8006592:	607b      	str	r3, [r7, #4]
  return(result);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <osKernelStart+0x32>
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <osKernelStart+0x64>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d109      	bne.n	80065b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065a2:	f3ef 8311 	mrs	r3, BASEPRI
 80065a6:	603b      	str	r3, [r7, #0]
  return(result);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80065ae:	f06f 0305 	mvn.w	r3, #5
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e00e      	b.n	80065d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <osKernelStart+0x64>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d107      	bne.n	80065ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80065be:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <osKernelStart+0x64>)
 80065c0:	2202      	movs	r2, #2
 80065c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80065c4:	f001 f878 	bl	80076b8 <vTaskStartScheduler>
      stat = osOK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e002      	b.n	80065d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200001a0 	.word	0x200001a0

080065e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b092      	sub	sp, #72	; 0x48
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f4:	f3ef 8305 	mrs	r3, IPSR
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 8094 	bne.w	800672a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006602:	f3ef 8310 	mrs	r3, PRIMASK
 8006606:	623b      	str	r3, [r7, #32]
  return(result);
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 808d 	bne.w	800672a <osThreadNew+0x146>
 8006610:	4b48      	ldr	r3, [pc, #288]	; (8006734 <osThreadNew+0x150>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d106      	bne.n	8006626 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006618:	f3ef 8311 	mrs	r3, BASEPRI
 800661c:	61fb      	str	r3, [r7, #28]
  return(result);
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8082 	bne.w	800672a <osThreadNew+0x146>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d07e      	beq.n	800672a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006630:	2318      	movs	r3, #24
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006634:	2300      	movs	r3, #0
 8006636:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006638:	f107 031b 	add.w	r3, r7, #27
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d045      	beq.n	80066d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <osThreadNew+0x74>
        name = attr->name;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <osThreadNew+0x9a>
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	2b38      	cmp	r3, #56	; 0x38
 8006670:	d805      	bhi.n	800667e <osThreadNew+0x9a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <osThreadNew+0x9e>
        return (NULL);
 800667e:	2300      	movs	r3, #0
 8006680:	e054      	b.n	800672c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <osThreadNew+0xd4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b5b      	cmp	r3, #91	; 0x5b
 80066a0:	d90a      	bls.n	80066b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <osThreadNew+0xd4>
        mem = 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b6:	e010      	b.n	80066da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10c      	bne.n	80066da <osThreadNew+0xf6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <osThreadNew+0xf6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <osThreadNew+0xf6>
          mem = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d4:	e001      	b.n	80066da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d110      	bne.n	8006702 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066e8:	9202      	str	r2, [sp, #8]
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fe12 	bl	8007320 <xTaskCreateStatic>
 80066fc:	4603      	mov	r3, r0
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e013      	b.n	800672a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	b29a      	uxth	r2, r3
 800670c:	f107 0314 	add.w	r3, r7, #20
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fe5c 	bl	80073d8 <xTaskCreate>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d001      	beq.n	800672a <osThreadNew+0x146>
          hTask = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800672a:	697b      	ldr	r3, [r7, #20]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3738      	adds	r7, #56	; 0x38
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200001a0 	.word	0x200001a0

08006738 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006740:	f3ef 8305 	mrs	r3, IPSR
 8006744:	613b      	str	r3, [r7, #16]
  return(result);
 8006746:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10f      	bne.n	800676c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	60fb      	str	r3, [r7, #12]
  return(result);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <osDelay+0x34>
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <osDelay+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d109      	bne.n	8006774 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006760:	f3ef 8311 	mrs	r3, BASEPRI
 8006764:	60bb      	str	r3, [r7, #8]
  return(result);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <osDelay+0x3c>
    stat = osErrorISR;
 800676c:	f06f 0305 	mvn.w	r3, #5
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e007      	b.n	8006784 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <osDelay+0x4c>
      vTaskDelay(ticks);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 ff66 	bl	8007650 <vTaskDelay>
    }
  }

  return (stat);
 8006784:	697b      	ldr	r3, [r7, #20]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200001a0 	.word	0x200001a0

08006794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a06      	ldr	r2, [pc, #24]	; (80067bc <vApplicationGetIdleTaskMemory+0x28>)
 80067a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4a05      	ldr	r2, [pc, #20]	; (80067c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80067aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr
 80067bc:	200001a4 	.word	0x200001a4
 80067c0:	20000200 	.word	0x20000200

080067c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80067d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a06      	ldr	r2, [pc, #24]	; (80067f4 <vApplicationGetTimerTaskMemory+0x30>)
 80067da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000400 	.word	0x20000400
 80067f4:	2000045c 	.word	0x2000045c

080067f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 0208 	add.w	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f103 0208 	add.w	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f103 0208 	add.w	r2, r3, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068aa:	d103      	bne.n	80068b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e00c      	b.n	80068ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3308      	adds	r3, #8
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e002      	b.n	80068c2 <vListInsert+0x2e>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d2f6      	bcs.n	80068bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6892      	ldr	r2, [r2, #8]
 800691a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d103      	bne.n	8006938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	1e5a      	subs	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr
	...

08006958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006982:	f001 ffcb 	bl	800891c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	441a      	add	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	3b01      	subs	r3, #1
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	441a      	add	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	22ff      	movs	r2, #255	; 0xff
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d114      	bne.n	8006a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f8f1 	bl	8007bcc <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <xQueueGenericReset+0xcc>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	e009      	b.n	8006a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3310      	adds	r3, #16
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fef6 	bl	80067f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3324      	adds	r3, #36	; 0x24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fef1 	bl	80067f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a16:	f001 ffb1 	bl	800897c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a1a:	2301      	movs	r3, #1
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	; 0x38
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <xQueueGenericCreateStatic+0x52>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <xQueueGenericCreateStatic+0x56>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericCreateStatic+0x58>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <xQueueGenericCreateStatic+0x7e>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <xQueueGenericCreateStatic+0x82>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xQueueGenericCreateStatic+0x84>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	61fb      	str	r3, [r7, #28]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ac6:	2350      	movs	r3, #80	; 0x50
 8006ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b50      	cmp	r3, #80	; 0x50
 8006ace:	d00a      	beq.n	8006ae6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	61bb      	str	r3, [r7, #24]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00d      	beq.n	8006b0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006af8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f805 	bl	8006b16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	; 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e002      	b.n	8006b38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b44:	2101      	movs	r1, #1
 8006b46:	69b8      	ldr	r0, [r7, #24]
 8006b48:	f7ff ff06 	bl	8006958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	; 0x38
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueGenericSend+0x32>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSend+0x40>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueGenericSend+0x44>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueGenericSend+0x46>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <xQueueGenericSend+0x60>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSend+0x6e>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSend+0x72>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSend+0x74>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericSend+0x8e>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bea:	f001 f9b1 	bl	8007f50 <xTaskGetSchedulerState>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <xQueueGenericSend+0x9e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <xQueueGenericSend+0xa2>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <xQueueGenericSend+0xa4>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xQueueGenericSend+0xbe>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	61fb      	str	r3, [r7, #28]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c1a:	f001 fe7f 	bl	800891c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <xQueueGenericSend+0xd4>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d129      	bne.n	8006c84 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c36:	f000 fa07 	bl	8007048 <prvCopyDataToQueue>
 8006c3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d010      	beq.n	8006c66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 ffbf 	bl	8007bcc <xTaskRemoveFromEventList>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d013      	beq.n	8006c7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c54:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <xQueueGenericSend+0x1f8>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	e00a      	b.n	8006c7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c6c:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <xQueueGenericSend+0x1f8>)
 8006c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c7c:	f001 fe7e 	bl	800897c <vPortExitCritical>
				return pdPASS;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e063      	b.n	8006d4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d103      	bne.n	8006c92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c8a:	f001 fe77 	bl	800897c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e05c      	b.n	8006d4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fff9 	bl	8007c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ca6:	f001 fe69 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006caa:	f000 fd6b 	bl	8007784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cae:	f001 fe35 	bl	800891c <vPortEnterCritical>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb8:	b25b      	sxtb	r3, r3
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbe:	d103      	bne.n	8006cc8 <xQueueGenericSend+0x16c>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd4:	d103      	bne.n	8006cde <xQueueGenericSend+0x182>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cde:	f001 fe4d 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ce2:	1d3a      	adds	r2, r7, #4
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ffe8 	bl	8007cc0 <xTaskCheckForTimeOut>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d124      	bne.n	8006d40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf8:	f000 fa9e 	bl	8007238 <prvIsQueueFull>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d018      	beq.n	8006d34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	3310      	adds	r3, #16
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 ff0e 	bl	8007b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d12:	f000 fa29 	bl	8007168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d16:	f000 fd43 	bl	80077a0 <xTaskResumeAll>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f af7c 	bne.w	8006c1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d22:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <xQueueGenericSend+0x1f8>)
 8006d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	e772      	b.n	8006c1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d36:	f000 fa17 	bl	8007168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d3a:	f000 fd31 	bl	80077a0 <xTaskResumeAll>
 8006d3e:	e76c      	b.n	8006c1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d42:	f000 fa11 	bl	8007168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d46:	f000 fd2b 	bl	80077a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d4a:	2300      	movs	r3, #0
		}
	}
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3738      	adds	r7, #56	; 0x38
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	; 0x38
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <xQueueGenericSendFromISR+0x3c>
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <xQueueGenericSendFromISR+0x40>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <xQueueGenericSendFromISR+0x42>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	623b      	str	r3, [r7, #32]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d103      	bne.n	8006dc2 <xQueueGenericSendFromISR+0x6a>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <xQueueGenericSendFromISR+0x6e>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <xQueueGenericSendFromISR+0x70>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	61fb      	str	r3, [r7, #28]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006de2:	f001 fe5d 	bl	8008aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006de6:	f3ef 8211 	mrs	r2, BASEPRI
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61ba      	str	r2, [r7, #24]
 8006dfc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <xQueueGenericSendFromISR+0xbc>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d12c      	bne.n	8006e6e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e24:	f000 f910 	bl	8007048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e28:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e30:	d112      	bne.n	8006e58 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	3324      	adds	r3, #36	; 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fec4 	bl	8007bcc <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e007      	b.n	8006e68 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b25a      	sxtb	r2, r3
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e6c:	e001      	b.n	8006e72 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3738      	adds	r7, #56	; 0x38
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08c      	sub	sp, #48	; 0x30
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <xQueueReceive+0x30>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	623b      	str	r3, [r7, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <xQueueReceive+0x3e>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xQueueReceive+0x42>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueReceive+0x44>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xQueueReceive+0x5e>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	61fb      	str	r3, [r7, #28]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ee6:	f001 f833 	bl	8007f50 <xTaskGetSchedulerState>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <xQueueReceive+0x6e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueReceive+0x72>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueReceive+0x74>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xQueueReceive+0x8e>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61bb      	str	r3, [r7, #24]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f16:	f001 fd01 	bl	800891c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01f      	beq.n	8006f66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2a:	f000 f8f7 	bl	800711c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	3310      	adds	r3, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fe42 	bl	8007bcc <xTaskRemoveFromEventList>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f4e:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <xQueueReceive+0x1bc>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f5e:	f001 fd0d 	bl	800897c <vPortExitCritical>
				return pdPASS;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e069      	b.n	800703a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d103      	bne.n	8006f74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f6c:	f001 fd06 	bl	800897c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e062      	b.n	800703a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f7a:	f107 0310 	add.w	r3, r7, #16
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fe88 	bl	8007c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f84:	2301      	movs	r3, #1
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f88:	f001 fcf8 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f8c:	f000 fbfa 	bl	8007784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f90:	f001 fcc4 	bl	800891c <vPortEnterCritical>
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa0:	d103      	bne.n	8006faa <xQueueReceive+0x122>
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb6:	d103      	bne.n	8006fc0 <xQueueReceive+0x138>
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc0:	f001 fcdc 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fc4:	1d3a      	adds	r2, r7, #4
 8006fc6:	f107 0310 	add.w	r3, r7, #16
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fe77 	bl	8007cc0 <xTaskCheckForTimeOut>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d123      	bne.n	8007020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fda:	f000 f917 	bl	800720c <prvIsQueueEmpty>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d017      	beq.n	8007014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	3324      	adds	r3, #36	; 0x24
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fd9d 	bl	8007b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff4:	f000 f8b8 	bl	8007168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ff8:	f000 fbd2 	bl	80077a0 <xTaskResumeAll>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d189      	bne.n	8006f16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <xQueueReceive+0x1bc>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	e780      	b.n	8006f16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007016:	f000 f8a7 	bl	8007168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800701a:	f000 fbc1 	bl	80077a0 <xTaskResumeAll>
 800701e:	e77a      	b.n	8006f16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007022:	f000 f8a1 	bl	8007168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007026:	f000 fbbb 	bl	80077a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800702a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800702c:	f000 f8ee 	bl	800720c <prvIsQueueEmpty>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	f43f af6f 	beq.w	8006f16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800703a:	4618      	mov	r0, r3
 800703c:	3730      	adds	r7, #48	; 0x30
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d14d      	bne.n	800710a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 ff8a 	bl	8007f8c <xTaskPriorityDisinherit>
 8007078:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	605a      	str	r2, [r3, #4]
 8007080:	e043      	b.n	800710a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d119      	bne.n	80070bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6898      	ldr	r0, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	461a      	mov	r2, r3
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	f002 fbb4 	bl	8009800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	441a      	add	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d32b      	bcc.n	800710a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	609a      	str	r2, [r3, #8]
 80070ba:	e026      	b.n	800710a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68d8      	ldr	r0, [r3, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	461a      	mov	r2, r3
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	f002 fb9a 	bl	8009800 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	425b      	negs	r3, r3
 80070d6:	441a      	add	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d207      	bcs.n	80070f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	425b      	negs	r3, r3
 80070f2:	441a      	add	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d105      	bne.n	800710a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3b01      	subs	r3, #1
 8007108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d018      	beq.n	8007160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	441a      	add	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d303      	bcc.n	8007150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68d9      	ldr	r1, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	461a      	mov	r2, r3
 800715a:	6838      	ldr	r0, [r7, #0]
 800715c:	f002 fb50 	bl	8009800 <memcpy>
	}
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007170:	f001 fbd4 	bl	800891c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800717c:	e011      	b.n	80071a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	d012      	beq.n	80071ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fd1e 	bl	8007bcc <xTaskRemoveFromEventList>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007196:	f000 fdf5 	bl	8007d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	3b01      	subs	r3, #1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dce9      	bgt.n	800717e <prvUnlockQueue+0x16>
 80071aa:	e000      	b.n	80071ae <prvUnlockQueue+0x46>
					break;
 80071ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	22ff      	movs	r2, #255	; 0xff
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071b6:	f001 fbe1 	bl	800897c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071ba:	f001 fbaf 	bl	800891c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071c6:	e011      	b.n	80071ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d012      	beq.n	80071f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3310      	adds	r3, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fcf9 	bl	8007bcc <xTaskRemoveFromEventList>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071e0:	f000 fdd0 	bl	8007d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dce9      	bgt.n	80071c8 <prvUnlockQueue+0x60>
 80071f4:	e000      	b.n	80071f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	22ff      	movs	r2, #255	; 0xff
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007200:	f001 fbbc 	bl	800897c <vPortExitCritical>
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007214:	f001 fb82 	bl	800891c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007220:	2301      	movs	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e001      	b.n	800722a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800722a:	f001 fba7 	bl	800897c <vPortExitCritical>

	return xReturn;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007240:	f001 fb6c 	bl	800891c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	429a      	cmp	r2, r3
 800724e:	d102      	bne.n	8007256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e001      	b.n	800725a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800725a:	f001 fb8f 	bl	800897c <vPortExitCritical>

	return xReturn;
 800725e:	68fb      	ldr	r3, [r7, #12]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e014      	b.n	80072a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007278:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <vQueueAddToRegistry+0x4c>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007284:	490b      	ldr	r1, [pc, #44]	; (80072b4 <vQueueAddToRegistry+0x4c>)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <vQueueAddToRegistry+0x4c>)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800729a:	e006      	b.n	80072aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3301      	adds	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b07      	cmp	r3, #7
 80072a6:	d9e7      	bls.n	8007278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr
 80072b4:	20001cd0 	.word	0x20001cd0

080072b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072c8:	f001 fb28 	bl	800891c <vPortEnterCritical>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d8:	d103      	bne.n	80072e2 <vQueueWaitForMessageRestricted+0x2a>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072e8:	b25b      	sxtb	r3, r3
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ee:	d103      	bne.n	80072f8 <vQueueWaitForMessageRestricted+0x40>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f8:	f001 fb40 	bl	800897c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fc31 	bl	8007b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007312:	6978      	ldr	r0, [r7, #20]
 8007314:	f7ff ff28 	bl	8007168 <prvUnlockQueue>
	}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08e      	sub	sp, #56	; 0x38
 8007324:	af04      	add	r7, sp, #16
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	623b      	str	r3, [r7, #32]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <xTaskCreateStatic+0x46>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	61fb      	str	r3, [r7, #28]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007366:	235c      	movs	r3, #92	; 0x5c
 8007368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b5c      	cmp	r3, #92	; 0x5c
 800736e:	d00a      	beq.n	8007386 <xTaskCreateStatic+0x66>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	61bb      	str	r3, [r7, #24]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <xTaskCreateStatic+0xaa>
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01b      	beq.n	80073ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800739a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073a4:	2300      	movs	r3, #0
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f850 	bl	8007462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c4:	f000 f8d4 	bl	8007570 <prvAddNewTaskToReadyList>
 80073c8:	e001      	b.n	80073ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073ce:	697b      	ldr	r3, [r7, #20]
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3728      	adds	r7, #40	; 0x28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af04      	add	r7, sp, #16
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fb95 	bl	8008b1c <pvPortMalloc>
 80073f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00e      	beq.n	8007418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073fa:	205c      	movs	r0, #92	; 0x5c
 80073fc:	f001 fb8e 	bl	8008b1c <pvPortMalloc>
 8007400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
 800740e:	e005      	b.n	800741c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007410:	6978      	ldr	r0, [r7, #20]
 8007412:	f001 fc47 	bl	8008ca4 <vPortFree>
 8007416:	e001      	b.n	800741c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d017      	beq.n	8007452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	2300      	movs	r3, #0
 800742e:	9303      	str	r3, [sp, #12]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f80e 	bl	8007462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007446:	69f8      	ldr	r0, [r7, #28]
 8007448:	f000 f892 	bl	8007570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800744c:	2301      	movs	r3, #1
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	e002      	b.n	8007458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007458:	69bb      	ldr	r3, [r7, #24]
	}
 800745a:	4618      	mov	r0, r3
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b088      	sub	sp, #32
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	461a      	mov	r2, r3
 800747a:	21a5      	movs	r1, #165	; 0xa5
 800747c:	f002 f9ce 	bl	800981c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800748a:	3b01      	subs	r3, #1
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	f023 0307 	bic.w	r3, r3, #7
 8007498:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <prvInitialiseNewTask+0x58>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	617b      	str	r3, [r7, #20]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ba:	2300      	movs	r3, #0
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	e012      	b.n	80074e6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	7819      	ldrb	r1, [r3, #0]
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	3334      	adds	r3, #52	; 0x34
 80074d0:	460a      	mov	r2, r1
 80074d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b0f      	cmp	r3, #15
 80074ea:	d9e9      	bls.n	80074c0 <prvInitialiseNewTask+0x5e>
 80074ec:	e000      	b.n	80074f0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80074ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2b37      	cmp	r3, #55	; 0x37
 80074fc:	d901      	bls.n	8007502 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074fe:	2337      	movs	r3, #55	; 0x37
 8007500:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800750c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff f98c 	bl	8006836 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	3318      	adds	r3, #24
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff f987 	bl	8006836 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2200      	movs	r2, #0
 8007542:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	69b8      	ldr	r0, [r7, #24]
 8007552:	f001 f8ef 	bl	8008734 <pxPortInitialiseStack>
 8007556:	4602      	mov	r2, r0
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007568:	bf00      	nop
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007578:	f001 f9d0 	bl	800891c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800757c:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 8007584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007586:	4b2c      	ldr	r3, [pc, #176]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758e:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007594:	4b27      	ldr	r3, [pc, #156]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d110      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800759c:	f000 fc16 	bl	8007dcc <prvInitialiseTaskLists>
 80075a0:	e00d      	b.n	80075be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075a2:	4b26      	ldr	r3, [pc, #152]	; (800763c <prvAddNewTaskToReadyList+0xcc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075aa:	4b23      	ldr	r3, [pc, #140]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d802      	bhi.n	80075be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <prvAddNewTaskToReadyList+0xd4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d903      	bls.n	80075e4 <prvAddNewTaskToReadyList+0x74>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	4a18      	ldr	r2, [pc, #96]	; (8007644 <prvAddNewTaskToReadyList+0xd4>)
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <prvAddNewTaskToReadyList+0xd8>)
 80075f2:	441a      	add	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4619      	mov	r1, r3
 80075fa:	4610      	mov	r0, r2
 80075fc:	f7ff f927 	bl	800684e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007600:	f001 f9bc 	bl	800897c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007604:	4b0d      	ldr	r3, [pc, #52]	; (800763c <prvAddNewTaskToReadyList+0xcc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00e      	beq.n	800762a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d207      	bcs.n	800762a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <prvAddNewTaskToReadyList+0xdc>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000d30 	.word	0x20000d30
 8007638:	2000085c 	.word	0x2000085c
 800763c:	20000d3c 	.word	0x20000d3c
 8007640:	20000d4c 	.word	0x20000d4c
 8007644:	20000d38 	.word	0x20000d38
 8007648:	20000860 	.word	0x20000860
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d017      	beq.n	8007692 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <vTaskDelay+0x60>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <vTaskDelay+0x30>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	60bb      	str	r3, [r7, #8]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007680:	f000 f880 	bl	8007784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007684:	2100      	movs	r1, #0
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fcee 	bl	8008068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800768c:	f000 f888 	bl	80077a0 <xTaskResumeAll>
 8007690:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007698:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <vTaskDelay+0x64>)
 800769a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000d58 	.word	0x20000d58
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076c6:	463a      	mov	r2, r7
 80076c8:	1d39      	adds	r1, r7, #4
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff f860 	bl	8006794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	9202      	str	r2, [sp, #8]
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	2300      	movs	r3, #0
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	460a      	mov	r2, r1
 80076e6:	4921      	ldr	r1, [pc, #132]	; (800776c <vTaskStartScheduler+0xb4>)
 80076e8:	4821      	ldr	r0, [pc, #132]	; (8007770 <vTaskStartScheduler+0xb8>)
 80076ea:	f7ff fe19 	bl	8007320 <xTaskCreateStatic>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4a20      	ldr	r2, [pc, #128]	; (8007774 <vTaskStartScheduler+0xbc>)
 80076f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076f4:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <vTaskStartScheduler+0xbc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e001      	b.n	8007706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d102      	bne.n	8007712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800770c:	f000 fd00 	bl	8008110 <xTimerCreateTimerTask>
 8007710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d116      	bne.n	8007746 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	613b      	str	r3, [r7, #16]
}
 800772a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800772c:	4b12      	ldr	r3, [pc, #72]	; (8007778 <vTaskStartScheduler+0xc0>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007732:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007734:	4b11      	ldr	r3, [pc, #68]	; (800777c <vTaskStartScheduler+0xc4>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800773a:	4b11      	ldr	r3, [pc, #68]	; (8007780 <vTaskStartScheduler+0xc8>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007740:	f001 f87a 	bl	8008838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007744:	e00e      	b.n	8007764 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774c:	d10a      	bne.n	8007764 <vTaskStartScheduler+0xac>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vTaskStartScheduler+0xaa>
}
 8007764:	bf00      	nop
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	08009860 	.word	0x08009860
 8007770:	08007d9d 	.word	0x08007d9d
 8007774:	20000d54 	.word	0x20000d54
 8007778:	20000d50 	.word	0x20000d50
 800777c:	20000d3c 	.word	0x20000d3c
 8007780:	20000d34 	.word	0x20000d34

08007784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <vTaskSuspendAll+0x18>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	4a03      	ldr	r2, [pc, #12]	; (800779c <vTaskSuspendAll+0x18>)
 8007790:	6013      	str	r3, [r2, #0]
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000d58 	.word	0x20000d58

080077a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <xTaskResumeAll+0x118>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <xTaskResumeAll+0x2c>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	603b      	str	r3, [r7, #0]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077cc:	f001 f8a6 	bl	800891c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077d0:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <xTaskResumeAll+0x118>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	4a38      	ldr	r2, [pc, #224]	; (80078b8 <xTaskResumeAll+0x118>)
 80077d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077da:	4b37      	ldr	r3, [pc, #220]	; (80078b8 <xTaskResumeAll+0x118>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d162      	bne.n	80078a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e2:	4b36      	ldr	r3, [pc, #216]	; (80078bc <xTaskResumeAll+0x11c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d05e      	beq.n	80078a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ea:	e02f      	b.n	800784c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077ec:	4b34      	ldr	r3, [pc, #208]	; (80078c0 <xTaskResumeAll+0x120>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3318      	adds	r3, #24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff f883 	bl	8006904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff f87e 	bl	8006904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <xTaskResumeAll+0x124>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <xTaskResumeAll+0x7c>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <xTaskResumeAll+0x124>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <xTaskResumeAll+0x128>)
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7ff f80b 	bl	800684e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <xTaskResumeAll+0x12c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007846:	4b22      	ldr	r3, [pc, #136]	; (80078d0 <xTaskResumeAll+0x130>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800784c:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <xTaskResumeAll+0x120>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1cb      	bne.n	80077ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800785a:	f000 fb55 	bl	8007f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800785e:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <xTaskResumeAll+0x134>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800786a:	f000 f845 	bl	80078f8 <xTaskIncrementTick>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <xTaskResumeAll+0x130>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3b01      	subs	r3, #1
 800787e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f1      	bne.n	800786a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <xTaskResumeAll+0x134>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <xTaskResumeAll+0x130>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <xTaskResumeAll+0x138>)
 800789a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f001 f868 	bl	800897c <vPortExitCritical>

	return xAlreadyYielded;
 80078ac:	68bb      	ldr	r3, [r7, #8]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000d58 	.word	0x20000d58
 80078bc:	20000d30 	.word	0x20000d30
 80078c0:	20000cf0 	.word	0x20000cf0
 80078c4:	20000d38 	.word	0x20000d38
 80078c8:	20000860 	.word	0x20000860
 80078cc:	2000085c 	.word	0x2000085c
 80078d0:	20000d44 	.word	0x20000d44
 80078d4:	20000d40 	.word	0x20000d40
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078e2:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <xTaskGetTickCount+0x18>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078e8:	687b      	ldr	r3, [r7, #4]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr
 80078f4:	20000d34 	.word	0x20000d34

080078f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007902:	4b51      	ldr	r3, [pc, #324]	; (8007a48 <xTaskIncrementTick+0x150>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 808e 	bne.w	8007a28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800790c:	4b4f      	ldr	r3, [pc, #316]	; (8007a4c <xTaskIncrementTick+0x154>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007914:	4a4d      	ldr	r2, [pc, #308]	; (8007a4c <xTaskIncrementTick+0x154>)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d120      	bne.n	8007962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007920:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <xTaskIncrementTick+0x158>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <xTaskIncrementTick+0x48>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <xTaskIncrementTick+0x46>
 8007940:	4b43      	ldr	r3, [pc, #268]	; (8007a50 <xTaskIncrementTick+0x158>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <xTaskIncrementTick+0x15c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a41      	ldr	r2, [pc, #260]	; (8007a50 <xTaskIncrementTick+0x158>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	4a41      	ldr	r2, [pc, #260]	; (8007a54 <xTaskIncrementTick+0x15c>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <xTaskIncrementTick+0x160>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xTaskIncrementTick+0x160>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	f000 fad3 	bl	8007f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007962:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <xTaskIncrementTick+0x164>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	429a      	cmp	r2, r3
 800796a:	d34e      	bcc.n	8007a0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800796c:	4b38      	ldr	r3, [pc, #224]	; (8007a50 <xTaskIncrementTick+0x158>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <xTaskIncrementTick+0x82>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xTaskIncrementTick+0x84>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007980:	4b36      	ldr	r3, [pc, #216]	; (8007a5c <xTaskIncrementTick+0x164>)
 8007982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007986:	601a      	str	r2, [r3, #0]
					break;
 8007988:	e03f      	b.n	8007a0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <xTaskIncrementTick+0x158>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d203      	bcs.n	80079aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079a2:	4a2e      	ldr	r2, [pc, #184]	; (8007a5c <xTaskIncrementTick+0x164>)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6013      	str	r3, [r2, #0]
						break;
 80079a8:	e02f      	b.n	8007a0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe ffa8 	bl	8006904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe ff9f 	bl	8006904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <xTaskIncrementTick+0x168>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <xTaskIncrementTick+0xe2>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a22      	ldr	r2, [pc, #136]	; (8007a60 <xTaskIncrementTick+0x168>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <xTaskIncrementTick+0x16c>)
 80079e8:	441a      	add	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe ff2c 	bl	800684e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fa:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <xTaskIncrementTick+0x170>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3b3      	bcc.n	800796c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a08:	e7b0      	b.n	800796c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <xTaskIncrementTick+0x170>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4914      	ldr	r1, [pc, #80]	; (8007a64 <xTaskIncrementTick+0x16c>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d907      	bls.n	8007a32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e004      	b.n	8007a32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a28:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <xTaskIncrementTick+0x174>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a0f      	ldr	r2, [pc, #60]	; (8007a6c <xTaskIncrementTick+0x174>)
 8007a30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <xTaskIncrementTick+0x178>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000d58 	.word	0x20000d58
 8007a4c:	20000d34 	.word	0x20000d34
 8007a50:	20000ce8 	.word	0x20000ce8
 8007a54:	20000cec 	.word	0x20000cec
 8007a58:	20000d48 	.word	0x20000d48
 8007a5c:	20000d50 	.word	0x20000d50
 8007a60:	20000d38 	.word	0x20000d38
 8007a64:	20000860 	.word	0x20000860
 8007a68:	2000085c 	.word	0x2000085c
 8007a6c:	20000d40 	.word	0x20000d40
 8007a70:	20000d44 	.word	0x20000d44

08007a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a7a:	4b27      	ldr	r3, [pc, #156]	; (8007b18 <vTaskSwitchContext+0xa4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <vTaskSwitchContext+0xa8>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a88:	e041      	b.n	8007b0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a8a:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <vTaskSwitchContext+0xa8>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a90:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <vTaskSwitchContext+0xac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e010      	b.n	8007aba <vTaskSwitchContext+0x46>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <vTaskSwitchContext+0x3e>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	491a      	ldr	r1, [pc, #104]	; (8007b24 <vTaskSwitchContext+0xb0>)
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0e4      	beq.n	8007a98 <vTaskSwitchContext+0x24>
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a12      	ldr	r2, [pc, #72]	; (8007b24 <vTaskSwitchContext+0xb0>)
 8007ada:	4413      	add	r3, r2
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	605a      	str	r2, [r3, #4]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	3308      	adds	r3, #8
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d104      	bne.n	8007afe <vTaskSwitchContext+0x8a>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <vTaskSwitchContext+0xb4>)
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <vTaskSwitchContext+0xac>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6013      	str	r3, [r2, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	20000d58 	.word	0x20000d58
 8007b1c:	20000d44 	.word	0x20000d44
 8007b20:	20000d38 	.word	0x20000d38
 8007b24:	20000860 	.word	0x20000860
 8007b28:	2000085c 	.word	0x2000085c

08007b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b52:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <vTaskPlaceOnEventList+0x44>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3318      	adds	r3, #24
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fe fe9a 	bl	8006894 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b60:	2101      	movs	r1, #1
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	f000 fa80 	bl	8008068 <prvAddCurrentTaskToDelayedList>
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	2000085c 	.word	0x2000085c

08007b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	617b      	str	r3, [r7, #20]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7fe fe52 	bl	800684e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	68b8      	ldr	r0, [r7, #8]
 8007bba:	f000 fa55 	bl	8008068 <prvAddCurrentTaskToDelayedList>
	}
 8007bbe:	bf00      	nop
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000085c 	.word	0x2000085c

08007bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60fb      	str	r3, [r7, #12]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3318      	adds	r3, #24
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fe81 	bl	8006904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c02:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <xTaskRemoveFromEventList+0xb0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d11d      	bne.n	8007c46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe78 	bl	8006904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <xTaskRemoveFromEventList+0xb4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <xTaskRemoveFromEventList+0x5c>
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a16      	ldr	r2, [pc, #88]	; (8007c80 <xTaskRemoveFromEventList+0xb4>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4a13      	ldr	r2, [pc, #76]	; (8007c84 <xTaskRemoveFromEventList+0xb8>)
 8007c36:	441a      	add	r2, r3
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f7fe fe05 	bl	800684e <vListInsertEnd>
 8007c44:	e005      	b.n	8007c52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	3318      	adds	r3, #24
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	480e      	ldr	r0, [pc, #56]	; (8007c88 <xTaskRemoveFromEventList+0xbc>)
 8007c4e:	f7fe fdfe 	bl	800684e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <xTaskRemoveFromEventList+0xc0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d905      	bls.n	8007c6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c64:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <xTaskRemoveFromEventList+0xc4>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e001      	b.n	8007c70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000d58 	.word	0x20000d58
 8007c80:	20000d38 	.word	0x20000d38
 8007c84:	20000860 	.word	0x20000860
 8007c88:	20000cf0 	.word	0x20000cf0
 8007c8c:	2000085c 	.word	0x2000085c
 8007c90:	20000d44 	.word	0x20000d44

08007c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <vTaskInternalSetTimeOutState+0x24>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <vTaskInternalSetTimeOutState+0x28>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000d48 	.word	0x20000d48
 8007cbc:	20000d34 	.word	0x20000d34

08007cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	613b      	str	r3, [r7, #16]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	60fb      	str	r3, [r7, #12]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d02:	f000 fe0b 	bl	800891c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d06:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <xTaskCheckForTimeOut+0xbc>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1e:	d102      	bne.n	8007d26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e023      	b.n	8007d6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <xTaskCheckForTimeOut+0xc0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d007      	beq.n	8007d42 <xTaskCheckForTimeOut+0x82>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d302      	bcc.n	8007d42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	e015      	b.n	8007d6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d20b      	bcs.n	8007d64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	1ad2      	subs	r2, r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff9b 	bl	8007c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	e004      	b.n	8007d6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d6e:	f000 fe05 	bl	800897c <vPortExitCritical>

	return xReturn;
 8007d72:	69fb      	ldr	r3, [r7, #28]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000d34 	.word	0x20000d34
 8007d80:	20000d48 	.word	0x20000d48

08007d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d88:	4b03      	ldr	r3, [pc, #12]	; (8007d98 <vTaskMissedYield+0x14>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000d44 	.word	0x20000d44

08007d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007da4:	f000 f852 	bl	8007e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <prvIdleTask+0x28>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d9f9      	bls.n	8007da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007db0:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <prvIdleTask+0x2c>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dc0:	e7f0      	b.n	8007da4 <prvIdleTask+0x8>
 8007dc2:	bf00      	nop
 8007dc4:	20000860 	.word	0x20000860
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	e00c      	b.n	8007df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <prvInitialiseTaskLists+0x60>)
 8007de4:	4413      	add	r3, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fd06 	bl	80067f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3301      	adds	r3, #1
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b37      	cmp	r3, #55	; 0x37
 8007df6:	d9ef      	bls.n	8007dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007df8:	480d      	ldr	r0, [pc, #52]	; (8007e30 <prvInitialiseTaskLists+0x64>)
 8007dfa:	f7fe fcfd 	bl	80067f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dfe:	480d      	ldr	r0, [pc, #52]	; (8007e34 <prvInitialiseTaskLists+0x68>)
 8007e00:	f7fe fcfa 	bl	80067f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e04:	480c      	ldr	r0, [pc, #48]	; (8007e38 <prvInitialiseTaskLists+0x6c>)
 8007e06:	f7fe fcf7 	bl	80067f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e0a:	480c      	ldr	r0, [pc, #48]	; (8007e3c <prvInitialiseTaskLists+0x70>)
 8007e0c:	f7fe fcf4 	bl	80067f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e10:	480b      	ldr	r0, [pc, #44]	; (8007e40 <prvInitialiseTaskLists+0x74>)
 8007e12:	f7fe fcf1 	bl	80067f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <prvInitialiseTaskLists+0x78>)
 8007e18:	4a05      	ldr	r2, [pc, #20]	; (8007e30 <prvInitialiseTaskLists+0x64>)
 8007e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <prvInitialiseTaskLists+0x7c>)
 8007e1e:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <prvInitialiseTaskLists+0x68>)
 8007e20:	601a      	str	r2, [r3, #0]
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000860 	.word	0x20000860
 8007e30:	20000cc0 	.word	0x20000cc0
 8007e34:	20000cd4 	.word	0x20000cd4
 8007e38:	20000cf0 	.word	0x20000cf0
 8007e3c:	20000d04 	.word	0x20000d04
 8007e40:	20000d1c 	.word	0x20000d1c
 8007e44:	20000ce8 	.word	0x20000ce8
 8007e48:	20000cec 	.word	0x20000cec

08007e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e52:	e019      	b.n	8007e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e54:	f000 fd62 	bl	800891c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <prvCheckTasksWaitingTermination+0x50>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fd4d 	bl	8006904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <prvCheckTasksWaitingTermination+0x54>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4a0b      	ldr	r2, [pc, #44]	; (8007ea0 <prvCheckTasksWaitingTermination+0x54>)
 8007e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <prvCheckTasksWaitingTermination+0x58>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <prvCheckTasksWaitingTermination+0x58>)
 8007e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e7e:	f000 fd7d 	bl	800897c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f810 	bl	8007ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <prvCheckTasksWaitingTermination+0x58>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e1      	bne.n	8007e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000d04 	.word	0x20000d04
 8007ea0:	20000d30 	.word	0x20000d30
 8007ea4:	20000d18 	.word	0x20000d18

08007ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d108      	bne.n	8007ecc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fef0 	bl	8008ca4 <vPortFree>
				vPortFree( pxTCB );
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 feed 	bl	8008ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eca:	e018      	b.n	8007efe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d103      	bne.n	8007ede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fee4 	bl	8008ca4 <vPortFree>
	}
 8007edc:	e00f      	b.n	8007efe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d00a      	beq.n	8007efe <prvDeleteTCB+0x56>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60fb      	str	r3, [r7, #12]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <prvDeleteTCB+0x54>
	}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <prvResetNextTaskUnblockTime+0x40>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <prvResetNextTaskUnblockTime+0x14>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <prvResetNextTaskUnblockTime+0x16>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <prvResetNextTaskUnblockTime+0x44>)
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f2a:	e008      	b.n	8007f3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f2c:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <prvResetNextTaskUnblockTime+0x40>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <prvResetNextTaskUnblockTime+0x44>)
 8007f3c:	6013      	str	r3, [r2, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr
 8007f48:	20000ce8 	.word	0x20000ce8
 8007f4c:	20000d50 	.word	0x20000d50

08007f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f56:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <xTaskGetSchedulerState+0x34>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	e008      	b.n	8007f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f64:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <xTaskGetSchedulerState+0x38>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e001      	b.n	8007f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f72:	2300      	movs	r3, #0
 8007f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f76:	687b      	ldr	r3, [r7, #4]
	}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000d3c 	.word	0x20000d3c
 8007f88:	20000d58 	.word	0x20000d58

08007f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d056      	beq.n	8008050 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	; (800805c <xTaskPriorityDisinherit+0xd0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d00a      	beq.n	8007fc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe4:	1e5a      	subs	r2, r3, #1
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d02c      	beq.n	8008050 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d128      	bne.n	8008050 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3304      	adds	r3, #4
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fc7e 	bl	8006904 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <xTaskPriorityDisinherit+0xd4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d903      	bls.n	8008030 <xTaskPriorityDisinherit+0xa4>
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <xTaskPriorityDisinherit+0xd4>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4a09      	ldr	r2, [pc, #36]	; (8008064 <xTaskPriorityDisinherit+0xd8>)
 800803e:	441a      	add	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fe fc01 	bl	800684e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800804c:	2301      	movs	r3, #1
 800804e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
	}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	2000085c 	.word	0x2000085c
 8008060:	20000d38 	.word	0x20000d38
 8008064:	20000860 	.word	0x20000860

08008068 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008072:	4b21      	ldr	r3, [pc, #132]	; (80080f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008078:	4b20      	ldr	r3, [pc, #128]	; (80080fc <prvAddCurrentTaskToDelayedList+0x94>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3304      	adds	r3, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fc40 	bl	8006904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800808a:	d10a      	bne.n	80080a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008092:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3304      	adds	r3, #4
 8008098:	4619      	mov	r1, r3
 800809a:	4819      	ldr	r0, [pc, #100]	; (8008100 <prvAddCurrentTaskToDelayedList+0x98>)
 800809c:	f7fe fbd7 	bl	800684e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080a0:	e026      	b.n	80080f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080aa:	4b14      	ldr	r3, [pc, #80]	; (80080fc <prvAddCurrentTaskToDelayedList+0x94>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d209      	bcs.n	80080ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <prvAddCurrentTaskToDelayedList+0x94>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7fe fbe4 	bl	8006894 <vListInsert>
}
 80080cc:	e010      	b.n	80080f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f7fe fbda 	bl	8006894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvAddCurrentTaskToDelayedList+0xa4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d202      	bcs.n	80080f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080ea:	4a08      	ldr	r2, [pc, #32]	; (800810c <prvAddCurrentTaskToDelayedList+0xa4>)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	6013      	str	r3, [r2, #0]
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000d34 	.word	0x20000d34
 80080fc:	2000085c 	.word	0x2000085c
 8008100:	20000d1c 	.word	0x20000d1c
 8008104:	20000cec 	.word	0x20000cec
 8008108:	20000ce8 	.word	0x20000ce8
 800810c:	20000d50 	.word	0x20000d50

08008110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800811a:	f000 facb 	bl	80086b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800811e:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <xTimerCreateTimerTask+0x80>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d021      	beq.n	800816a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800812e:	1d3a      	adds	r2, r7, #4
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	f107 030c 	add.w	r3, r7, #12
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fb43 	bl	80067c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	9202      	str	r2, [sp, #8]
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	2302      	movs	r3, #2
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	460a      	mov	r2, r1
 8008150:	4910      	ldr	r1, [pc, #64]	; (8008194 <xTimerCreateTimerTask+0x84>)
 8008152:	4811      	ldr	r0, [pc, #68]	; (8008198 <xTimerCreateTimerTask+0x88>)
 8008154:	f7ff f8e4 	bl	8007320 <xTaskCreateStatic>
 8008158:	4603      	mov	r3, r0
 800815a:	4a10      	ldr	r2, [pc, #64]	; (800819c <xTimerCreateTimerTask+0x8c>)
 800815c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <xTimerCreateTimerTask+0x8c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008166:	2301      	movs	r3, #1
 8008168:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	613b      	str	r3, [r7, #16]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008186:	697b      	ldr	r3, [r7, #20]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000d8c 	.word	0x20000d8c
 8008194:	08009868 	.word	0x08009868
 8008198:	080082bd 	.word	0x080082bd
 800819c:	20000d90 	.word	0x20000d90

080081a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	623b      	str	r3, [r7, #32]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081ce:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <xTimerGenericCommand+0x98>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02a      	beq.n	800822c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b05      	cmp	r3, #5
 80081e6:	dc18      	bgt.n	800821a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081e8:	f7ff feb2 	bl	8007f50 <xTaskGetSchedulerState>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d109      	bne.n	8008206 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <xTimerGenericCommand+0x98>)
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	f107 0110 	add.w	r1, r7, #16
 80081fa:	2300      	movs	r3, #0
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	f7fe fcad 	bl	8006b5c <xQueueGenericSend>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24
 8008204:	e012      	b.n	800822c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <xTimerGenericCommand+0x98>)
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f107 0110 	add.w	r1, r7, #16
 800820e:	2300      	movs	r3, #0
 8008210:	2200      	movs	r2, #0
 8008212:	f7fe fca3 	bl	8006b5c <xQueueGenericSend>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24
 8008218:	e008      	b.n	800822c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <xTimerGenericCommand+0x98>)
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f107 0110 	add.w	r1, r7, #16
 8008222:	2300      	movs	r3, #0
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	f7fe fd97 	bl	8006d58 <xQueueGenericSendFromISR>
 800822a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800822e:	4618      	mov	r0, r3
 8008230:	3728      	adds	r7, #40	; 0x28
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000d8c 	.word	0x20000d8c

0800823c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008246:	4b1c      	ldr	r3, [pc, #112]	; (80082b8 <prvProcessExpiredTimer+0x7c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fb55 	bl	8006904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d122      	bne.n	80082a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	18d1      	adds	r1, r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	f000 f8c8 	bl	8008404 <prvInsertTimerInActiveList>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d016      	beq.n	80082a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800827a:	2300      	movs	r3, #0
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	2300      	movs	r3, #0
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	2100      	movs	r1, #0
 8008284:	6978      	ldr	r0, [r7, #20]
 8008286:	f7ff ff8b 	bl	80081a0 <xTimerGenericCommand>
 800828a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60fb      	str	r3, [r7, #12]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	6978      	ldr	r0, [r7, #20]
 80082ae:	4798      	blx	r3
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000d84 	.word	0x20000d84

080082bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082c4:	f107 0308 	add.w	r3, r7, #8
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f857 	bl	800837c <prvGetNextExpireTime>
 80082ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4619      	mov	r1, r3
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f803 	bl	80082e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082da:	f000 f8d5 	bl	8008488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082de:	e7f1      	b.n	80082c4 <prvTimerTask+0x8>

080082e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082ea:	f7ff fa4b 	bl	8007784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f866 	bl	80083c4 <prvSampleTimeNow>
 80082f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d130      	bne.n	8008362 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <prvProcessTimerOrBlockTask+0x3c>
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	429a      	cmp	r2, r3
 800830c:	d806      	bhi.n	800831c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800830e:	f7ff fa47 	bl	80077a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff ff91 	bl	800823c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800831a:	e024      	b.n	8008366 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <prvProcessTimerOrBlockTask+0x90>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <prvProcessTimerOrBlockTask+0x94>)
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	f7fe ffb9 	bl	80072b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008346:	f7ff fa2b 	bl	80077a0 <xTaskResumeAll>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <prvProcessTimerOrBlockTask+0x98>)
 8008352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
}
 8008360:	e001      	b.n	8008366 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008362:	f7ff fa1d 	bl	80077a0 <xTaskResumeAll>
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000d88 	.word	0x20000d88
 8008374:	20000d8c 	.word	0x20000d8c
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <prvGetNextExpireTime+0x44>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a2:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <prvGetNextExpireTime+0x44>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	e001      	b.n	80083b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20000d84 	.word	0x20000d84

080083c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083cc:	f7ff fa86 	bl	80078dc <xTaskGetTickCount>
 80083d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083d2:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <prvSampleTimeNow+0x3c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d205      	bcs.n	80083e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083dc:	f000 f908 	bl	80085f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e002      	b.n	80083ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083ee:	4a04      	ldr	r2, [pc, #16]	; (8008400 <prvSampleTimeNow+0x3c>)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083f4:	68fb      	ldr	r3, [r7, #12]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000d94 	.word	0x20000d94

08008404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	429a      	cmp	r2, r3
 8008428:	d812      	bhi.n	8008450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	429a      	cmp	r2, r3
 8008436:	d302      	bcc.n	800843e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e01b      	b.n	8008476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <prvInsertTimerInActiveList+0x7c>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe fa23 	bl	8006894 <vListInsert>
 800844e:	e012      	b.n	8008476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d206      	bcs.n	8008466 <prvInsertTimerInActiveList+0x62>
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d302      	bcc.n	8008466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e007      	b.n	8008476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008466:	4b07      	ldr	r3, [pc, #28]	; (8008484 <prvInsertTimerInActiveList+0x80>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe fa0f 	bl	8006894 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008476:	697b      	ldr	r3, [r7, #20]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000d88 	.word	0x20000d88
 8008484:	20000d84 	.word	0x20000d84

08008488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800848e:	e09d      	b.n	80085cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	da18      	bge.n	80084c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	3304      	adds	r3, #4
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	61fb      	str	r3, [r7, #28]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084be:	6850      	ldr	r0, [r2, #4]
 80084c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c2:	6892      	ldr	r2, [r2, #8]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db7d      	blt.n	80085ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	3304      	adds	r3, #4
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fa10 	bl	8006904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e4:	463b      	mov	r3, r7
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff ff6c 	bl	80083c4 <prvSampleTimeNow>
 80084ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	d86b      	bhi.n	80085cc <prvProcessReceivedCommands+0x144>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <prvProcessReceivedCommands+0x74>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008525 	.word	0x08008525
 8008500:	08008525 	.word	0x08008525
 8008504:	08008525 	.word	0x08008525
 8008508:	080085cd 	.word	0x080085cd
 800850c:	08008581 	.word	0x08008581
 8008510:	080085b9 	.word	0x080085b9
 8008514:	08008525 	.word	0x08008525
 8008518:	08008525 	.word	0x08008525
 800851c:	080085cd 	.word	0x080085cd
 8008520:	08008581 	.word	0x08008581
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	18d1      	adds	r1, r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008532:	f7ff ff67 	bl	8008404 <prvInsertTimerInActiveList>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d047      	beq.n	80085cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008542:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d13f      	bne.n	80085cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	441a      	add	r2, r3
 8008554:	2300      	movs	r3, #0
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	2300      	movs	r3, #0
 800855a:	2100      	movs	r1, #0
 800855c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855e:	f7ff fe1f 	bl	80081a0 <xTimerGenericCommand>
 8008562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d130      	bne.n	80085cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	61bb      	str	r3, [r7, #24]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617b      	str	r3, [r7, #20]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	699a      	ldr	r2, [r3, #24]
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	18d1      	adds	r1, r2, r3
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b2:	f7ff ff27 	bl	8008404 <prvInsertTimerInActiveList>
					break;
 80085b6:	e009      	b.n	80085cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	f000 fb6e 	bl	8008ca4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085c8:	e000      	b.n	80085cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085cc:	4b07      	ldr	r3, [pc, #28]	; (80085ec <prvProcessReceivedCommands+0x164>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	1d39      	adds	r1, r7, #4
 80085d2:	2200      	movs	r2, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fc57 	bl	8006e88 <xQueueReceive>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f af57 	bne.w	8008490 <prvProcessReceivedCommands+0x8>
	}
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	3730      	adds	r7, #48	; 0x30
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000d8c 	.word	0x20000d8c

080085f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085f6:	e045      	b.n	8008684 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f8:	4b2c      	ldr	r3, [pc, #176]	; (80086ac <prvSwitchTimerLists+0xbc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008602:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <prvSwitchTimerLists+0xbc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3304      	adds	r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe f977 	bl	8006904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d12e      	bne.n	8008684 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4413      	add	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d90e      	bls.n	8008656 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <prvSwitchTimerLists+0xbc>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3304      	adds	r3, #4
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fe f920 	bl	8006894 <vListInsert>
 8008654:	e016      	b.n	8008684 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008656:	2300      	movs	r3, #0
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	2100      	movs	r1, #0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fd9d 	bl	80081a0 <xTimerGenericCommand>
 8008666:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <prvSwitchTimerLists+0x94>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	603b      	str	r3, [r7, #0]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <prvSwitchTimerLists+0xbc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1b4      	bne.n	80085f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <prvSwitchTimerLists+0xbc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <prvSwitchTimerLists+0xc0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a04      	ldr	r2, [pc, #16]	; (80086ac <prvSwitchTimerLists+0xbc>)
 800869a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800869c:	4a04      	ldr	r2, [pc, #16]	; (80086b0 <prvSwitchTimerLists+0xc0>)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6013      	str	r3, [r2, #0]
}
 80086a2:	bf00      	nop
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000d84 	.word	0x20000d84
 80086b0:	20000d88 	.word	0x20000d88

080086b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ba:	f000 f92f 	bl	800891c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d120      	bne.n	8008708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086c6:	4814      	ldr	r0, [pc, #80]	; (8008718 <prvCheckForValidListAndQueue+0x64>)
 80086c8:	f7fe f896 	bl	80067f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086cc:	4813      	ldr	r0, [pc, #76]	; (800871c <prvCheckForValidListAndQueue+0x68>)
 80086ce:	f7fe f893 	bl	80067f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <prvCheckForValidListAndQueue+0x6c>)
 80086d4:	4a10      	ldr	r2, [pc, #64]	; (8008718 <prvCheckForValidListAndQueue+0x64>)
 80086d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <prvCheckForValidListAndQueue+0x70>)
 80086da:	4a10      	ldr	r2, [pc, #64]	; (800871c <prvCheckForValidListAndQueue+0x68>)
 80086dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <prvCheckForValidListAndQueue+0x74>)
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <prvCheckForValidListAndQueue+0x78>)
 80086e6:	2110      	movs	r1, #16
 80086e8:	200a      	movs	r0, #10
 80086ea:	f7fe f99d 	bl	8006a28 <xQueueGenericCreateStatic>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4a08      	ldr	r2, [pc, #32]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	490b      	ldr	r1, [pc, #44]	; (8008730 <prvCheckForValidListAndQueue+0x7c>)
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fdb0 	bl	8007268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008708:	f000 f938 	bl	800897c <vPortExitCritical>
}
 800870c:	bf00      	nop
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000d8c 	.word	0x20000d8c
 8008718:	20000d5c 	.word	0x20000d5c
 800871c:	20000d70 	.word	0x20000d70
 8008720:	20000d84 	.word	0x20000d84
 8008724:	20000d88 	.word	0x20000d88
 8008728:	20000e38 	.word	0x20000e38
 800872c:	20000d98 	.word	0x20000d98
 8008730:	08009870 	.word	0x08009870

08008734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3b04      	subs	r3, #4
 8008744:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800874c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b04      	subs	r3, #4
 8008752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f023 0201 	bic.w	r2, r3, #1
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3b04      	subs	r3, #4
 8008762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008764:	4a08      	ldr	r2, [pc, #32]	; (8008788 <pxPortInitialiseStack+0x54>)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3b14      	subs	r3, #20
 800876e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3b20      	subs	r3, #32
 800877a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800877c:	68fb      	ldr	r3, [r7, #12]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	0800878d 	.word	0x0800878d

0800878c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008796:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <prvTaskExitError+0x54>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879e:	d00a      	beq.n	80087b6 <prvTaskExitError+0x2a>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvTaskExitError+0x28>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60bb      	str	r3, [r7, #8]
}
 80087c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087ca:	bf00      	nop
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0fc      	beq.n	80087cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	2000011c 	.word	0x2000011c
	...

080087f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087f0:	4b07      	ldr	r3, [pc, #28]	; (8008810 <pxCurrentTCBConst2>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087fa:	f380 8809 	msr	PSP, r0
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	f04e 0e0d 	orr.w	lr, lr, #13
 800880e:	4770      	bx	lr

08008810 <pxCurrentTCBConst2>:
 8008810:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008818:	4806      	ldr	r0, [pc, #24]	; (8008834 <prvPortStartFirstTask+0x1c>)
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f380 8808 	msr	MSP, r0
 8008822:	b662      	cpsie	i
 8008824:	b661      	cpsie	f
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	df00      	svc	0
 8008830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008832:	bf00      	nop
 8008834:	e000ed08 	.word	0xe000ed08

08008838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800883e:	4b32      	ldr	r3, [pc, #200]	; (8008908 <xPortStartScheduler+0xd0>)
 8008840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	22ff      	movs	r2, #255	; 0xff
 800884e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008860:	b2da      	uxtb	r2, r3
 8008862:	4b2a      	ldr	r3, [pc, #168]	; (800890c <xPortStartScheduler+0xd4>)
 8008864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008866:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <xPortStartScheduler+0xd8>)
 8008868:	2207      	movs	r2, #7
 800886a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800886c:	e009      	b.n	8008882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800886e:	4b28      	ldr	r3, [pc, #160]	; (8008910 <xPortStartScheduler+0xd8>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3b01      	subs	r3, #1
 8008874:	4a26      	ldr	r2, [pc, #152]	; (8008910 <xPortStartScheduler+0xd8>)
 8008876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	d0ef      	beq.n	800886e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800888e:	4b20      	ldr	r3, [pc, #128]	; (8008910 <xPortStartScheduler+0xd8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f1c3 0307 	rsb	r3, r3, #7
 8008896:	2b04      	cmp	r3, #4
 8008898:	d00a      	beq.n	80088b0 <xPortStartScheduler+0x78>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60bb      	str	r3, [r7, #8]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088b0:	4b17      	ldr	r3, [pc, #92]	; (8008910 <xPortStartScheduler+0xd8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	4a16      	ldr	r2, [pc, #88]	; (8008910 <xPortStartScheduler+0xd8>)
 80088b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088ba:	4b15      	ldr	r3, [pc, #84]	; (8008910 <xPortStartScheduler+0xd8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088c2:	4a13      	ldr	r2, [pc, #76]	; (8008910 <xPortStartScheduler+0xd8>)
 80088c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <xPortStartScheduler+0xdc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a10      	ldr	r2, [pc, #64]	; (8008914 <xPortStartScheduler+0xdc>)
 80088d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088da:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <xPortStartScheduler+0xdc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a0d      	ldr	r2, [pc, #52]	; (8008914 <xPortStartScheduler+0xdc>)
 80088e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088e6:	f000 f8b9 	bl	8008a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <xPortStartScheduler+0xe0>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088f0:	f7ff ff92 	bl	8008818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088f4:	f7ff f8be 	bl	8007a74 <vTaskSwitchContext>
	prvTaskExitError();
 80088f8:	f7ff ff48 	bl	800878c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	e000e400 	.word	0xe000e400
 800890c:	20000e88 	.word	0x20000e88
 8008910:	20000e8c 	.word	0x20000e8c
 8008914:	e000ed20 	.word	0xe000ed20
 8008918:	2000011c 	.word	0x2000011c

0800891c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	607b      	str	r3, [r7, #4]
}
 8008934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <vPortEnterCritical+0x58>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	4a0d      	ldr	r2, [pc, #52]	; (8008974 <vPortEnterCritical+0x58>)
 800893e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008940:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <vPortEnterCritical+0x58>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10f      	bne.n	8008968 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008948:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <vPortEnterCritical+0x5c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <vPortEnterCritical+0x4c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	603b      	str	r3, [r7, #0]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <vPortEnterCritical+0x4a>
	}
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	2000011c 	.word	0x2000011c
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008982:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <vPortExitCritical+0x4c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <vPortExitCritical+0x24>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089a0:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <vPortExitCritical+0x4c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <vPortExitCritical+0x4c>)
 80089a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <vPortExitCritical+0x4c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <vPortExitCritical+0x42>
 80089b2:	2300      	movs	r3, #0
 80089b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	f383 8811 	msr	BASEPRI, r3
}
 80089bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr
 80089c8:	2000011c 	.word	0x2000011c
 80089cc:	00000000 	.word	0x00000000

080089d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089d0:	f3ef 8009 	mrs	r0, PSP
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <pxCurrentTCBConst>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089e0:	6010      	str	r0, [r2, #0]
 80089e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80089e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089ea:	f380 8811 	msr	BASEPRI, r0
 80089ee:	f7ff f841 	bl	8007a74 <vTaskSwitchContext>
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	6808      	ldr	r0, [r1, #0]
 8008a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a06:	f380 8809 	msr	PSP, r0
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	4770      	bx	lr

08008a10 <pxCurrentTCBConst>:
 8008a10:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a32:	f7fe ff61 	bl	80078f8 <xTaskIncrementTick>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <xPortSysTickHandler+0x40>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	2300      	movs	r3, #0
 8008a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f383 8811 	msr	BASEPRI, r3
}
 8008a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <vPortSetupTimerInterrupt+0x30>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a66:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <vPortSetupTimerInterrupt+0x34>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a6c:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <vPortSetupTimerInterrupt+0x38>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <vPortSetupTimerInterrupt+0x3c>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	099b      	lsrs	r3, r3, #6
 8008a78:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <vPortSetupTimerInterrupt+0x40>)
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a7e:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <vPortSetupTimerInterrupt+0x30>)
 8008a80:	2207      	movs	r2, #7
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	e000e010 	.word	0xe000e010
 8008a90:	e000e018 	.word	0xe000e018
 8008a94:	20000000 	.word	0x20000000
 8008a98:	10624dd3 	.word	0x10624dd3
 8008a9c:	e000e014 	.word	0xe000e014

08008aa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008aa6:	f3ef 8305 	mrs	r3, IPSR
 8008aaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d914      	bls.n	8008adc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ab2:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <vPortValidateInterruptPriority+0x6c>)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008abc:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <vPortValidateInterruptPriority+0x70>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	7afa      	ldrb	r2, [r7, #11]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d20a      	bcs.n	8008adc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	607b      	str	r3, [r7, #4]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <vPortValidateInterruptPriority+0x74>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <vPortValidateInterruptPriority+0x78>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d90a      	bls.n	8008b02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	603b      	str	r3, [r7, #0]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortValidateInterruptPriority+0x60>
	}
 8008b02:	bf00      	nop
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr
 8008b0c:	e000e3f0 	.word	0xe000e3f0
 8008b10:	20000e88 	.word	0x20000e88
 8008b14:	e000ed0c 	.word	0xe000ed0c
 8008b18:	20000e8c 	.word	0x20000e8c

08008b1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b28:	f7fe fe2c 	bl	8007784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b2c:	4b58      	ldr	r3, [pc, #352]	; (8008c90 <pvPortMalloc+0x174>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b34:	f000 f910 	bl	8008d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b38:	4b56      	ldr	r3, [pc, #344]	; (8008c94 <pvPortMalloc+0x178>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 808e 	bne.w	8008c62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01d      	beq.n	8008b88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d014      	beq.n	8008b88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f023 0307 	bic.w	r3, r3, #7
 8008b64:	3308      	adds	r3, #8
 8008b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <pvPortMalloc+0x6c>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	617b      	str	r3, [r7, #20]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d069      	beq.n	8008c62 <pvPortMalloc+0x146>
 8008b8e:	4b42      	ldr	r3, [pc, #264]	; (8008c98 <pvPortMalloc+0x17c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d864      	bhi.n	8008c62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b98:	4b40      	ldr	r3, [pc, #256]	; (8008c9c <pvPortMalloc+0x180>)
 8008b9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b9c:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <pvPortMalloc+0x180>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ba2:	e004      	b.n	8008bae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d903      	bls.n	8008bc0 <pvPortMalloc+0xa4>
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f1      	bne.n	8008ba4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bc0:	4b33      	ldr	r3, [pc, #204]	; (8008c90 <pvPortMalloc+0x174>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d04b      	beq.n	8008c62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2208      	movs	r2, #8
 8008bd0:	4413      	add	r3, r2
 8008bd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	2308      	movs	r3, #8
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d91f      	bls.n	8008c2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <pvPortMalloc+0xf8>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	613b      	str	r3, [r7, #16]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c26:	69b8      	ldr	r0, [r7, #24]
 8008c28:	f000 f8f8 	bl	8008e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <pvPortMalloc+0x17c>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <pvPortMalloc+0x17c>)
 8008c38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c3a:	4b17      	ldr	r3, [pc, #92]	; (8008c98 <pvPortMalloc+0x17c>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <pvPortMalloc+0x184>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d203      	bcs.n	8008c4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c46:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <pvPortMalloc+0x17c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <pvPortMalloc+0x184>)
 8008c4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <pvPortMalloc+0x178>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c62:	f7fe fd9d 	bl	80077a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <pvPortMalloc+0x16a>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <pvPortMalloc+0x168>
	return pvReturn;
 8008c86:	69fb      	ldr	r3, [r7, #28]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	; 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20001a98 	.word	0x20001a98
 8008c94:	20001aa4 	.word	0x20001aa4
 8008c98:	20001a9c 	.word	0x20001a9c
 8008c9c:	20001a90 	.word	0x20001a90
 8008ca0:	20001aa0 	.word	0x20001aa0

08008ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d048      	beq.n	8008d48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	425b      	negs	r3, r3
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	4b21      	ldr	r3, [pc, #132]	; (8008d50 <vPortFree+0xac>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <vPortFree+0x44>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	60fb      	str	r3, [r7, #12]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <vPortFree+0x62>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60bb      	str	r3, [r7, #8]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <vPortFree+0xac>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d019      	beq.n	8008d48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d115      	bne.n	8008d48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortFree+0xac>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	401a      	ands	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d2c:	f7fe fd2a 	bl	8007784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <vPortFree+0xb0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4413      	add	r3, r2
 8008d3a:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <vPortFree+0xb0>)
 8008d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d3e:	6938      	ldr	r0, [r7, #16]
 8008d40:	f000 f86c 	bl	8008e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d44:	f7fe fd2c 	bl	80077a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d48:	bf00      	nop
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001aa4 	.word	0x20001aa4
 8008d54:	20001a9c 	.word	0x20001a9c

08008d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d64:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <prvHeapInit+0xac>)
 8008d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00c      	beq.n	8008d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3307      	adds	r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <prvHeapInit+0xac>)
 8008d88:	4413      	add	r3, r2
 8008d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d90:	4a1d      	ldr	r2, [pc, #116]	; (8008e08 <prvHeapInit+0xb0>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d96:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <prvHeapInit+0xb0>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008da4:	2208      	movs	r2, #8
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0307 	bic.w	r3, r3, #7
 8008db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a15      	ldr	r2, [pc, #84]	; (8008e0c <prvHeapInit+0xb4>)
 8008db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dba:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <prvHeapInit+0xb4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dc2:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <prvHeapInit+0xb4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <prvHeapInit+0xb4>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <prvHeapInit+0xb8>)
 8008de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <prvHeapInit+0xbc>)
 8008dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008df0:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <prvHeapInit+0xc0>)
 8008df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008df6:	601a      	str	r2, [r3, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000e90 	.word	0x20000e90
 8008e08:	20001a90 	.word	0x20001a90
 8008e0c:	20001a98 	.word	0x20001a98
 8008e10:	20001aa0 	.word	0x20001aa0
 8008e14:	20001a9c 	.word	0x20001a9c
 8008e18:	20001aa4 	.word	0x20001aa4

08008e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e24:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <prvInsertBlockIntoFreeList+0xa8>)
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	e002      	b.n	8008e30 <prvInsertBlockIntoFreeList+0x14>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d8f7      	bhi.n	8008e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4413      	add	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d108      	bne.n	8008e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	441a      	add	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d118      	bne.n	8008ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <prvInsertBlockIntoFreeList+0xac>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d00d      	beq.n	8008e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	441a      	add	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e008      	b.n	8008eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <prvInsertBlockIntoFreeList+0xac>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e003      	b.n	8008eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d002      	beq.n	8008eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	20001a90 	.word	0x20001a90
 8008ec8:	20001a98 	.word	0x20001a98

08008ecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4912      	ldr	r1, [pc, #72]	; (8008f1c <MX_USB_DEVICE_Init+0x50>)
 8008ed4:	4812      	ldr	r0, [pc, #72]	; (8008f20 <MX_USB_DEVICE_Init+0x54>)
 8008ed6:	f7fc fa85 	bl	80053e4 <USBD_Init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ee0:	f7f7 f9e6 	bl	80002b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ee4:	490f      	ldr	r1, [pc, #60]	; (8008f24 <MX_USB_DEVICE_Init+0x58>)
 8008ee6:	480e      	ldr	r0, [pc, #56]	; (8008f20 <MX_USB_DEVICE_Init+0x54>)
 8008ee8:	f7fc faa7 	bl	800543a <USBD_RegisterClass>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ef2:	f7f7 f9dd 	bl	80002b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ef6:	490c      	ldr	r1, [pc, #48]	; (8008f28 <MX_USB_DEVICE_Init+0x5c>)
 8008ef8:	4809      	ldr	r0, [pc, #36]	; (8008f20 <MX_USB_DEVICE_Init+0x54>)
 8008efa:	f7fc fa07 	bl	800530c <USBD_CDC_RegisterInterface>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f04:	f7f7 f9d4 	bl	80002b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f08:	4805      	ldr	r0, [pc, #20]	; (8008f20 <MX_USB_DEVICE_Init+0x54>)
 8008f0a:	f7fc faaf 	bl	800546c <USBD_Start>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f14:	f7f7 f9cc 	bl	80002b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f18:	bf00      	nop
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000130 	.word	0x20000130
 8008f20:	20001d10 	.word	0x20001d10
 8008f24:	20000018 	.word	0x20000018
 8008f28:	20000120 	.word	0x20000120

08008f2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f30:	2200      	movs	r2, #0
 8008f32:	4905      	ldr	r1, [pc, #20]	; (8008f48 <CDC_Init_FS+0x1c>)
 8008f34:	4805      	ldr	r0, [pc, #20]	; (8008f4c <CDC_Init_FS+0x20>)
 8008f36:	f7fc f9ff 	bl	8005338 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f3a:	4905      	ldr	r1, [pc, #20]	; (8008f50 <CDC_Init_FS+0x24>)
 8008f3c:	4803      	ldr	r0, [pc, #12]	; (8008f4c <CDC_Init_FS+0x20>)
 8008f3e:	f7fc fa14 	bl	800536a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	200023bc 	.word	0x200023bc
 8008f4c:	20001d10 	.word	0x20001d10
 8008f50:	20001fd4 	.word	0x20001fd4

08008f54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
	...

08008f64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b23      	cmp	r3, #35	; 0x23
 8008f78:	d84a      	bhi.n	8009010 <CDC_Control_FS+0xac>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <CDC_Control_FS+0x1c>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08009011 	.word	0x08009011
 8008f84:	08009011 	.word	0x08009011
 8008f88:	08009011 	.word	0x08009011
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009011 	.word	0x08009011
 8008f94:	08009011 	.word	0x08009011
 8008f98:	08009011 	.word	0x08009011
 8008f9c:	08009011 	.word	0x08009011
 8008fa0:	08009011 	.word	0x08009011
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009011 	.word	0x08009011
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009011 	.word	0x08009011
 8008fd0:	08009011 	.word	0x08009011
 8008fd4:	08009011 	.word	0x08009011
 8008fd8:	08009011 	.word	0x08009011
 8008fdc:	08009011 	.word	0x08009011
 8008fe0:	08009011 	.word	0x08009011
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009011 	.word	0x08009011
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009011 	.word	0x08009011
 8009000:	08009011 	.word	0x08009011
 8009004:	08009011 	.word	0x08009011
 8009008:	08009011 	.word	0x08009011
 800900c:	08009011 	.word	0x08009011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009010:	bf00      	nop
  }

  return (USBD_OK);
 8009012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop

08009020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4805      	ldr	r0, [pc, #20]	; (8009044 <CDC_Receive_FS+0x24>)
 800902e:	f7fc f99c 	bl	800536a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009032:	4804      	ldr	r0, [pc, #16]	; (8009044 <CDC_Receive_FS+0x24>)
 8009034:	f7fc f9ac 	bl	8005390 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20001d10 	.word	0x20001d10

08009048 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2212      	movs	r2, #18
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_FS_DeviceDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	2000014c 	.word	0x2000014c

0800906c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2204      	movs	r2, #4
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800907e:	4b03      	ldr	r3, [pc, #12]	; (800908c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000160 	.word	0x20000160

08009090 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4907      	ldr	r1, [pc, #28]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80090a6:	4808      	ldr	r0, [pc, #32]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a8:	f7fd f958 	bl	800635c <USBD_GetString>
 80090ac:	e004      	b.n	80090b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4904      	ldr	r1, [pc, #16]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80090b2:	4805      	ldr	r0, [pc, #20]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80090b4:	f7fd f952 	bl	800635c <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200027a4 	.word	0x200027a4
 80090c8:	08009878 	.word	0x08009878

080090cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	4904      	ldr	r1, [pc, #16]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090dc:	4804      	ldr	r0, [pc, #16]	; (80090f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090de:	f7fd f93d 	bl	800635c <USBD_GetString>
  return USBD_StrDesc;
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200027a4 	.word	0x200027a4
 80090f0:	08009890 	.word	0x08009890

080090f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	221a      	movs	r2, #26
 8009104:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009106:	f000 f843 	bl	8009190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800910a:	4b02      	ldr	r3, [pc, #8]	; (8009114 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000164 	.word	0x20000164

08009118 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4907      	ldr	r1, [pc, #28]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
 800912e:	4808      	ldr	r0, [pc, #32]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009130:	f7fd f914 	bl	800635c <USBD_GetString>
 8009134:	e004      	b.n	8009140 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4904      	ldr	r1, [pc, #16]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
 800913a:	4805      	ldr	r0, [pc, #20]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x38>)
 800913c:	f7fd f90e 	bl	800635c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200027a4 	.word	0x200027a4
 8009150:	080098a4 	.word	0x080098a4

08009154 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800916c:	f7fd f8f6 	bl	800635c <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009178:	f7fd f8f0 	bl	800635c <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200027a4 	.word	0x200027a4
 800918c:	080098b0 	.word	0x080098b0

08009190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <Get_SerialNum+0x44>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <Get_SerialNum+0x48>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <Get_SerialNum+0x4c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091b6:	2208      	movs	r2, #8
 80091b8:	4909      	ldr	r1, [pc, #36]	; (80091e0 <Get_SerialNum+0x50>)
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f814 	bl	80091e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091c0:	2204      	movs	r2, #4
 80091c2:	4908      	ldr	r1, [pc, #32]	; (80091e4 <Get_SerialNum+0x54>)
 80091c4:	68b8      	ldr	r0, [r7, #8]
 80091c6:	f000 f80f 	bl	80091e8 <IntToUnicode>
  }
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	1ffff7e8 	.word	0x1ffff7e8
 80091d8:	1ffff7ec 	.word	0x1ffff7ec
 80091dc:	1ffff7f0 	.word	0x1ffff7f0
 80091e0:	20000166 	.word	0x20000166
 80091e4:	20000176 	.word	0x20000176

080091e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
 80091fe:	e027      	b.n	8009250 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0f1b      	lsrs	r3, r3, #28
 8009204:	2b09      	cmp	r3, #9
 8009206:	d80b      	bhi.n	8009220 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	0f1b      	lsrs	r3, r3, #28
 800920c:	b2da      	uxtb	r2, r3
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4619      	mov	r1, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	440b      	add	r3, r1
 8009218:	3230      	adds	r2, #48	; 0x30
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e00a      	b.n	8009236 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	0f1b      	lsrs	r3, r3, #28
 8009224:	b2da      	uxtb	r2, r3
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4619      	mov	r1, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	440b      	add	r3, r1
 8009230:	3237      	adds	r2, #55	; 0x37
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	3301      	adds	r3, #1
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	4413      	add	r3, r2
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	3301      	adds	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
 8009250:	7dfa      	ldrb	r2, [r7, #23]
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d3d3      	bcc.n	8009200 <IntToUnicode+0x18>
  }
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0d      	ldr	r2, [pc, #52]	; (80092a8 <HAL_PCD_MspInit+0x44>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d113      	bne.n	800929e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009276:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <HAL_PCD_MspInit+0x48>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4a0c      	ldr	r2, [pc, #48]	; (80092ac <HAL_PCD_MspInit+0x48>)
 800927c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009280:	61d3      	str	r3, [r2, #28]
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <HAL_PCD_MspInit+0x48>)
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800928e:	2200      	movs	r2, #0
 8009290:	2105      	movs	r1, #5
 8009292:	2014      	movs	r0, #20
 8009294:	f7f7 f9db 	bl	800064e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009298:	2014      	movs	r0, #20
 800929a:	f7f7 f9f4 	bl	8000686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40005c00 	.word	0x40005c00
 80092ac:	40021000 	.word	0x40021000

080092b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fc f918 	bl	80054fc <USBD_LL_SetupStage>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	440b      	add	r3, r1
 80092f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7fc f94a 	bl	8005596 <USBD_LL_DataOutStage>
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	333c      	adds	r3, #60	; 0x3c
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	4619      	mov	r1, r3
 8009332:	f7fc f9a1 	bl	8005678 <USBD_LL_DataInStage>
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800934c:	4618      	mov	r0, r3
 800934e:	f7fc fab1 	bl	80058b4 <USBD_LL_SOF>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d001      	beq.n	8009372 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800936e:	f7f6 ff9f 	bl	80002b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009378:	7bfa      	ldrb	r2, [r7, #15]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7fc fa61 	bl	8005844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009388:	4618      	mov	r0, r3
 800938a:	f7fc fa1a 	bl	80057c2 <USBD_LL_Reset>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fc fa5b 	bl	8005862 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d005      	beq.n	80093c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093b4:	4b04      	ldr	r3, [pc, #16]	; (80093c8 <HAL_PCD_SuspendCallback+0x30>)
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	4a03      	ldr	r2, [pc, #12]	; (80093c8 <HAL_PCD_SuspendCallback+0x30>)
 80093ba:	f043 0306 	orr.w	r3, r3, #6
 80093be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	e000ed00 	.word	0xe000ed00

080093cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fc fa55 	bl	800588a <USBD_LL_Resume>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093f0:	4a28      	ldr	r2, [pc, #160]	; (8009494 <USBD_LL_Init+0xac>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a26      	ldr	r2, [pc, #152]	; (8009494 <USBD_LL_Init+0xac>)
 80093fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009400:	4b24      	ldr	r3, [pc, #144]	; (8009494 <USBD_LL_Init+0xac>)
 8009402:	4a25      	ldr	r2, [pc, #148]	; (8009498 <USBD_LL_Init+0xb0>)
 8009404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009406:	4b23      	ldr	r3, [pc, #140]	; (8009494 <USBD_LL_Init+0xac>)
 8009408:	2208      	movs	r2, #8
 800940a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800940c:	4b21      	ldr	r3, [pc, #132]	; (8009494 <USBD_LL_Init+0xac>)
 800940e:	2202      	movs	r2, #2
 8009410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009412:	4b20      	ldr	r3, [pc, #128]	; (8009494 <USBD_LL_Init+0xac>)
 8009414:	2200      	movs	r2, #0
 8009416:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009418:	4b1e      	ldr	r3, [pc, #120]	; (8009494 <USBD_LL_Init+0xac>)
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800941e:	4b1d      	ldr	r3, [pc, #116]	; (8009494 <USBD_LL_Init+0xac>)
 8009420:	2200      	movs	r2, #0
 8009422:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009424:	481b      	ldr	r0, [pc, #108]	; (8009494 <USBD_LL_Init+0xac>)
 8009426:	f7f7 f948 	bl	80006ba <HAL_PCD_Init>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009430:	f7f6 ff3e 	bl	80002b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800943a:	2318      	movs	r3, #24
 800943c:	2200      	movs	r2, #0
 800943e:	2100      	movs	r1, #0
 8009440:	f7f8 fdbe 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800944a:	2358      	movs	r3, #88	; 0x58
 800944c:	2200      	movs	r2, #0
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	f7f8 fdb6 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800945a:	23c0      	movs	r3, #192	; 0xc0
 800945c:	2200      	movs	r2, #0
 800945e:	2181      	movs	r1, #129	; 0x81
 8009460:	f7f8 fdae 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800946a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800946e:	2200      	movs	r2, #0
 8009470:	2101      	movs	r1, #1
 8009472:	f7f8 fda5 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800947c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009480:	2200      	movs	r2, #0
 8009482:	2182      	movs	r1, #130	; 0x82
 8009484:	f7f8 fd9c 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200029a4 	.word	0x200029a4
 8009498:	40005c00 	.word	0x40005c00

0800949c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f7 fa0c 	bl	80008d0 <HAL_PCD_Start>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f94e 	bl	8009760 <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	461a      	mov	r2, r3
 80094e0:	4603      	mov	r3, r0
 80094e2:	70fb      	strb	r3, [r7, #3]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70bb      	strb	r3, [r7, #2]
 80094e8:	4613      	mov	r3, r2
 80094ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094fa:	78bb      	ldrb	r3, [r7, #2]
 80094fc:	883a      	ldrh	r2, [r7, #0]
 80094fe:	78f9      	ldrb	r1, [r7, #3]
 8009500:	f7f7 fb86 	bl	8000c10 <HAL_PCD_EP_Open>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f928 	bl	8009760 <USBD_Get_USB_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009514:	7bbb      	ldrb	r3, [r7, #14]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f7f7 fbcd 	bl	8000cdc <HAL_PCD_EP_Close>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f909 	bl	8009760 <USBD_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009552:	7bbb      	ldrb	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7f7 fc8d 	bl	8000e9a <HAL_PCD_EP_SetStall>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f8ea 	bl	8009760 <USBD_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009590:	7bbb      	ldrb	r3, [r7, #14]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7f7 fcce 	bl	8000f5a <HAL_PCD_EP_ClrStall>
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f8cb 	bl	8009760 <USBD_Get_USB_Status>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da0c      	bge.n	800960e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	440b      	add	r3, r1
 8009608:	3302      	adds	r3, #2
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	e00b      	b.n	8009626 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	440b      	add	r3, r1
 8009620:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009624:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7f7 fab9 	bl	8000bc6 <HAL_PCD_SetAddress>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f880 	bl	8009760 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009664:	7bbb      	ldrb	r3, [r7, #14]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	461a      	mov	r2, r3
 800967a:	460b      	mov	r3, r1
 800967c:	72fb      	strb	r3, [r7, #11]
 800967e:	4613      	mov	r3, r2
 8009680:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009690:	893b      	ldrh	r3, [r7, #8]
 8009692:	7af9      	ldrb	r1, [r7, #11]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	f7f7 fbbd 	bl	8000e14 <HAL_PCD_EP_Transmit>
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f85d 	bl	8009760 <USBD_Get_USB_Status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	461a      	mov	r2, r3
 80096c0:	460b      	mov	r3, r1
 80096c2:	72fb      	strb	r3, [r7, #11]
 80096c4:	4613      	mov	r3, r2
 80096c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096d6:	893b      	ldrh	r3, [r7, #8]
 80096d8:	7af9      	ldrb	r1, [r7, #11]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	f7f7 fb46 	bl	8000d6c <HAL_PCD_EP_Receive>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f83a 	bl	8009760 <USBD_Get_USB_Status>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f7f7 fb68 	bl	8000de6 <HAL_PCD_EP_GetRxCount>
 8009716:	4603      	mov	r3, r0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <USBD_static_malloc+0x14>)
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr
 8009734:	20001aa8 	.word	0x20001aa8

08009738 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr

0800974a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr

08009760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	2b03      	cmp	r3, #3
 8009772:	d817      	bhi.n	80097a4 <USBD_Get_USB_Status+0x44>
 8009774:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USBD_Get_USB_Status+0x1c>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	0800978d 	.word	0x0800978d
 8009780:	08009793 	.word	0x08009793
 8009784:	08009799 	.word	0x08009799
 8009788:	0800979f 	.word	0x0800979f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	e00b      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009792:	2302      	movs	r3, #2
 8009794:	73fb      	strb	r3, [r7, #15]
    break;
 8009796:	e008      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
    break;
 800979c:	e005      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800979e:	2302      	movs	r3, #2
 80097a0:	73fb      	strb	r3, [r7, #15]
    break;
 80097a2:	e002      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097a4:	2302      	movs	r3, #2
 80097a6:	73fb      	strb	r3, [r7, #15]
    break;
 80097a8:	bf00      	nop
  }
  return usb_status;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	2600      	movs	r6, #0
 80097bc:	4d0c      	ldr	r5, [pc, #48]	; (80097f0 <__libc_init_array+0x38>)
 80097be:	4c0d      	ldr	r4, [pc, #52]	; (80097f4 <__libc_init_array+0x3c>)
 80097c0:	1b64      	subs	r4, r4, r5
 80097c2:	10a4      	asrs	r4, r4, #2
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	f000 f830 	bl	800982c <_init>
 80097cc:	2600      	movs	r6, #0
 80097ce:	4d0a      	ldr	r5, [pc, #40]	; (80097f8 <__libc_init_array+0x40>)
 80097d0:	4c0a      	ldr	r4, [pc, #40]	; (80097fc <__libc_init_array+0x44>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e0:	4798      	blx	r3
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ea:	4798      	blx	r3
 80097ec:	3601      	adds	r6, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	080098f4 	.word	0x080098f4
 80097f4:	080098f4 	.word	0x080098f4
 80097f8:	080098f4 	.word	0x080098f4
 80097fc:	080098f8 	.word	0x080098f8

08009800 <memcpy>:
 8009800:	440a      	add	r2, r1
 8009802:	4291      	cmp	r1, r2
 8009804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009808:	d100      	bne.n	800980c <memcpy+0xc>
 800980a:	4770      	bx	lr
 800980c:	b510      	push	{r4, lr}
 800980e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009812:	4291      	cmp	r1, r2
 8009814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009818:	d1f9      	bne.n	800980e <memcpy+0xe>
 800981a:	bd10      	pop	{r4, pc}

0800981c <memset>:
 800981c:	4603      	mov	r3, r0
 800981e:	4402      	add	r2, r0
 8009820:	4293      	cmp	r3, r2
 8009822:	d100      	bne.n	8009826 <memset+0xa>
 8009824:	4770      	bx	lr
 8009826:	f803 1b01 	strb.w	r1, [r3], #1
 800982a:	e7f9      	b.n	8009820 <memset+0x4>

0800982c <_init>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr

08009838 <_fini>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr
