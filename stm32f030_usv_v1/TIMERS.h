///////////////////////////////////////////////////////////////		РќР°СЃС‚СЂР°РёРІР°РµРј TIMER 2		/////////////////////////////////
///////////////////////////////////////////////////////////////		РќР°СЃС‚СЂР°РёРІР°РµРј TIMER 3		/////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
void  init_TIMER3(){//long psc){	// Инициализация TIM3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //Включение тактирования таймера TIM3
	NVIC_EnableIRQ(TIM3_IRQn); // Включение прерывания от TIM3
	TIM3->PSC = 47000; //  -Регистр предделителя
	TIM3->ARR = 52000; //  - Регистр автоперезагрузки  (до которого будет вестись счёт)
	TIM3->CCR1 = 0xFFFF;TIM3->CCR2 = 0xFFFF;TIM3->CCR3 = 0xFFFF;TIM3->CCR4 = 0xFFFF; //  -
	TIM3->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
	TIM3->CR1 |= TIM_CR1_ARPE;
//	TIM3->CR1 |= TIM_CR1_CEN; // Включение таймера
}

//extern void TIM4_answer_NiHao_rk(void);
//extern void TIM4_answer_NiHaoend_rk(void);

//===============================================================
//				Обработчик прерывания по TIM3
//===============================================================
//void TIM3_IRQHandler(void)
//{//события обновления UEV
//	TIM3->SR &=~ TIM_SR_UIF; // Сбрасываем UIF – флаг прерывания по событию обновления
//	GPIOA->ODR ^= GPIO_BRR_BR_1;
//}
//===============================================================

///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
void  init_TIMER16(){//long psc){	// Инициализация
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE); //Включение тактирования таймера
	NVIC_EnableIRQ(TIM16_IRQn); // Включение прерывания
	TIM16->PSC = 479119; //  -Регистр предделителя
	TIM16->ARR = 210; //  - Регистр автоперезагрузки  (до которого будет вестись счёт)
	TIM16->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
	TIM16->CR1 |= TIM_CR1_CEN; // Включение тактирования таймера
}

//extern void TIM4_answer_NiHao_rk(void);
//extern void TIM4_answer_NiHaoend_rk(void);

//===============================================================
//				Обработчик прерывания по TIM16
//===============================================================
#ifndef VGA
void TIM16_IRQHandler(void)
{//события обновления UEV
	uart2_TX_IRQHandler();
//	GPIOA->ODR ^= GPIO_BRR_BR_1;
	TIM16->SR &=~ TIM_SR_UIF; // Сбрасываем UIF – флаг прерывания по событию обновления
}
#endif
//===============================================================
///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
void  init_TIMER17(long arr_){	// Инициализация
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE); //Включение тактирования таймера
	NVIC_EnableIRQ(TIM17_IRQn); // Включение прерывания
//vga	TIM17->PSC = 300; //  -Регистр предделителя
//RK	TIM17->PSC = 100; //  -Регистр предделителя
	TIM17->ARR = arr_;//210; //  - Регистр автоперезагрузки  (до которого будет вестись счёт)
	TIM17->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
#ifndef MIF
	TIM17->CR1 |= TIM_CR1_CEN; // Включение тактирования таймера в програмном уарте таймер запускаем по старт биту т.е. по прерыванию
#endif
}

//===============================================================
//#ifndef VGA
//void TIM17_IRQHandler(void){
//#ifdef RK_canal
//	RK_TIM17_IRQHandler();
//#endif
//	TIM17->SR &=~ TIM_SR_UIF; // Сбрасываем UIF – флаг прерывания по событию обновления
//		}
//#endif


